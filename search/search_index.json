{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcb8 Expense Tracker - Your Smart Money Manager","text":"<p>Ever wished your wallet could talk? Well, now it can! \ud83d\udde3\ufe0f This isn't just another expense tracker \u2013 it's your personal financial companion powered by artificial intelligence. Built with modern Android tech and a sprinkle of AI magic \u2728, it turns those boring bank SMSs into meaningful insights about your spending habits.</p>"},{"location":"#what-makes-it-special","title":"\u2728 What Makes It Special?","text":"<ul> <li>\ud83e\udd16 AI-Powered Analysis: Our Gemini AI integration automatically categorizes your expenses - no more manual entry headaches!</li> <li>\ud83d\udcf1 SMS Wizardry: Automagically picks up and processes your bank notifications</li> <li>\ud83c\udfa8 Eye Candy UI: Gorgeous Material Design 3 interface that adapts to your phone's theme</li> <li>\ud83c\udf19 Dark Mode Love: Because counting money at night shouldn't hurt your eyes</li> <li>\ud83d\udcca Smart Analytics: Beautiful charts and insights that actually make sense</li> <li>\u23f0 Never Miss a Payment: Smart reminders for your subscriptions and bills</li> </ul>"},{"location":"#the-cool-tech-behind-it","title":"\ud83d\udee0\ufe0f The Cool Tech Behind It","text":"<ul> <li>\ud83c\udfad Jetpack Compose - The future of Android UI</li> <li>\ud83e\udde0 Google Gemini AI - The brains behind the operation</li> <li>\ud83d\udd25 Firebase - Keeping your data safe and synced</li> <li>\ud83d\udcbe Room Database - Because offline is the new online</li> <li>\ud83d\udc89 Hilt - Making dependencies a breeze</li> </ul>"},{"location":"#project-blueprint","title":"\ud83d\udcc2 Project Blueprint","text":"<pre><code>app/               # Where the magic begins \ud83c\udfa9\n\u251c\u2500\u2500 auth/          # Keeping the bad guys out \ud83d\udd10\n\u251c\u2500\u2500 billing/       # Money stuff (the irony!) \ud83d\udcb0\n\u251c\u2500\u2500 core/          # The heart of the app \u2764\ufe0f\n\u251c\u2500\u2500 gemini/        # AI sorcery \ud83e\udd16\n\u251c\u2500\u2500 network/       # Internet whisperer \ud83c\udf10\n\u251c\u2500\u2500 storage/       # Data vault \ud83d\udcbe\n\u2514\u2500\u2500 sms/           # Message decoder \ud83d\udcf1\n</code></pre>"},{"location":"#lets-get-you-started","title":"\ud83d\ude80 Let's Get You Started!","text":""},{"location":"#shopping-list","title":"\ud83d\udccb Shopping List","text":"<ul> <li>Android Studio Hedgehog+ (yes, that's its real name! \ud83e\udd94)</li> <li>JDK 17+ (because we're modern like that \u2615)</li> <li>Android SDK (API 24+) \ud83d\udcf1</li> </ul>"},{"location":"#setup-steps","title":"\ud83d\udee0\ufe0f Setup Steps","text":"<ol> <li> <p>Clone the Magic \ud83e\uddd9\u200d\u2642\ufe0f <pre><code>git clone https://github.com/atick-faisal/Expense-Tracker-Android.git\n</code></pre></p> </li> <li> <p>Firebase Setup \ud83d\udd25</p> </li> <li>Create a Firebase project (it's easier than making instant noodles!)</li> <li>Drop <code>google-services.json</code> into the app directory</li> <li> <p>Enable Authentication and Analytics in Firebase Console</p> </li> <li> <p>Gemini API Magic \ud83e\ude84</p> </li> <li>Grab an API key from Google AI Studio</li> <li> <p>Add to <code>local.properties</code>:    <pre><code>GEMINI_API_KEY=\"your_magical_key_here\"\n</code></pre></p> </li> <li> <p>Launch! \ud83d\ude80 <pre><code>./gradlew assembleDebug\n</code></pre></p> </li> </ol>"},{"location":"#join-the-fun","title":"\ud83e\udd1d Join the Fun!","text":"<p>Got ideas? Found a bug? Want to make this even more awesome? We'd love your help! Here's how:</p> <ol> <li>\ud83c\udf74 Fork it</li> <li>\ud83c\udf3f Create your feature branch</li> <li>\ud83d\udcbe Commit your changes</li> <li>\ud83d\ude80 Push to your branch</li> <li>\ud83c\udfaf Open a Pull Request</li> </ol> <p>Check out CONTRIBUTING.md for the full scoop!</p> <p></p> <p>Qatar University Machine Learning Group <p></p>"},{"location":"app/","title":"Index","text":"<p>//app</p>"},{"location":"app/#app","title":"app","text":""},{"location":"app/#packages","title":"Packages","text":"Name dev.atick.compose dev.atick.compose.data.analysis dev.atick.compose.data.budgets dev.atick.compose.data.chat dev.atick.compose.data.expenses dev.atick.compose.data.settings dev.atick.compose.data.subscriptions dev.atick.compose.di.repository dev.atick.compose.di.task dev.atick.compose.navigation dev.atick.compose.navigation.analysis dev.atick.compose.navigation.budgets dev.atick.compose.navigation.chat dev.atick.compose.navigation.expenses dev.atick.compose.navigation.intro dev.atick.compose.navigation.subscriptions dev.atick.compose.receivers dev.atick.compose.repository.analysis dev.atick.compose.repository.budgets dev.atick.compose.repository.chat dev.atick.compose.repository.expenses dev.atick.compose.repository.subscriptions dev.atick.compose.repository.user dev.atick.compose.ui dev.atick.compose.ui.analysis dev.atick.compose.ui.budgets dev.atick.compose.ui.chat dev.atick.compose.ui.common dev.atick.compose.ui.expenses dev.atick.compose.ui.intro dev.atick.compose.ui.settings dev.atick.compose.ui.subscriptions dev.atick.compose.worker"},{"location":"app/app/dev.atick.compose/","title":"Index","text":"<p>//app/dev.atick.compose</p>"},{"location":"app/app/dev.atick.compose/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose/#types","title":"Types","text":"Name Summary App [androidJvm]class App : ApplicationThe main application class that extends Application and is annotated with HiltAndroidApp. MainActivity [androidJvm]class MainActivity : AppCompatActivityMain activity for the application. MainActivityViewModel [androidJvm]class MainActivityViewModel@Injectconstructor(userDataRepository: UserDataRepository) : ViewModelAnnotates a ViewModel class that is managed by Hilt's dependency injection system."},{"location":"app/app/dev.atick.compose/-app/","title":"Index","text":"<p>//app/dev.atick.compose/App</p>"},{"location":"app/app/dev.atick.compose/-app/#app","title":"App","text":"<p>[androidJvm]\\ class App : Application</p> <p>The main application class that extends Application and is annotated with HiltAndroidApp.</p>"},{"location":"app/app/dev.atick.compose/-app/#constructors","title":"Constructors","text":"App [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose/-app/#functions","title":"Functions","text":"Name Summary bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean budgetExceedNotification [androidJvm]fun Context.budgetExceedNotification(budgetAmount: Double, currentAmount: Double): NotificationNotification for budget exceed cancellationReminderNotification [androidJvm]fun Context.cancellationReminderNotification(merchantName: String, nextPaymentDate: Long): NotificationNotification for cancellation reminder checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getResources [androidJvm]open override fun getResources(): Resources getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]fun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): Topen override fun getSystemService(p0: String): Any getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(p0: Configuration) onCreate [androidJvm]open override fun onCreate()Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode. onLowMemory [androidJvm]open override fun onLowMemory() onTerminate [androidJvm]open fun onTerminate() onTrimMemory [androidJvm]open override fun onTrimMemory(p0: Int) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase paymentReminderNotification [androidJvm]fun Context.paymentReminderNotification(merchantName: String, nextPaymentDate: Long): NotificationNotification for payment reminder peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerOnProvideAssistDataListener [androidJvm]open fun registerOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setTheme [androidJvm]open override fun setTheme(p0: Int) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopService [androidJvm]open override fun stopService(p0: Intent): Boolean syncForegroundInfo [androidJvm]fun Context.syncForegroundInfo(total: Int, current: Int): ForegroundInfoForeground information for sync on lower API levels when sync workers are being run with a foreground service unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterOnProvideAssistDataListener [androidJvm]open fun unregisterOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"app/app/dev.atick.compose/-app/-app/","title":"app","text":"<p>//app/dev.atick.compose/App/App</p>"},{"location":"app/app/dev.atick.compose/-app/-app/#app","title":"App","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose/-app/on-create/","title":"On create","text":"<p>//app/dev.atick.compose/App/onCreate</p>"},{"location":"app/app/dev.atick.compose/-app/on-create/#oncreate","title":"onCreate","text":"<p>[androidJvm]\\ open override fun onCreate()</p> <p>Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode.</p>"},{"location":"app/app/dev.atick.compose/-main-activity/","title":"Index","text":"<p>//app/dev.atick.compose/MainActivity</p>"},{"location":"app/app/dev.atick.compose/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ class MainActivity : AppCompatActivity</p> <p>Main activity for the application.</p>"},{"location":"app/app/dev.atick.compose/-main-activity/#constructors","title":"Constructors","text":"MainActivity [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose/-main-activity/#properties","title":"Properties","text":"Name Summary activityResultRegistry [androidJvm]override val activityResultRegistry: ActivityResultRegistry defaultViewModelCreationExtras [androidJvm]open override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]open override val defaultViewModelProviderFactory: ViewModelProvider.Factory fullyDrawnReporter [androidJvm]open override val fullyDrawnReporter: FullyDrawnReporter lastCustomNonConfigurationInstance [androidJvm]open val lastCustomNonConfigurationInstance: Any? lifecycle [androidJvm]open override val lifecycle: Lifecycle networkUtils [androidJvm]@Injectlateinit var networkUtils: NetworkUtils onBackPressedDispatcher [androidJvm]override val onBackPressedDispatcher: OnBackPressedDispatcher savedStateRegistry [androidJvm]override val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]open override val viewModelStore: ViewModelStore"},{"location":"app/app/dev.atick.compose/-main-activity/#functions","title":"Functions","text":"Name Summary addContentView [androidJvm]open override fun addContentView(view: View?, params: ViewGroup.LayoutParams?) addMenuProvider [androidJvm]open override fun addMenuProvider(provider: MenuProvider)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner, state: Lifecycle.State) addOnConfigurationChangedListener [androidJvm]override fun addOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) addOnContextAvailableListener [androidJvm]override fun addOnContextAvailableListener(listener: OnContextAvailableListener) addOnMultiWindowModeChangedListener [androidJvm]override fun addOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) addOnNewIntentListener [androidJvm]override fun addOnNewIntentListener(listener: Consumer&lt;Intent&gt;) addOnPictureInPictureModeChangedListener [androidJvm]override fun addOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) addOnTrimMemoryListener [androidJvm]override fun addOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) addOnUserLeaveHintListener [androidJvm]override fun addOnUserLeaveHintListener(listener: Runnable) applyOverrideConfiguration [androidJvm]open fun applyOverrideConfiguration(p0: Configuration) bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean budgetExceedNotification [androidJvm]fun Context.budgetExceedNotification(budgetAmount: Double, currentAmount: Double): NotificationNotification for budget exceed cancellationReminderNotification [androidJvm]fun Context.cancellationReminderNotification(merchantName: String, nextPaymentDate: Long): NotificationNotification for cancellation reminder checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearOverrideActivityTransition [androidJvm]open fun clearOverrideActivityTransition(p0: Int) clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() closeContextMenu [androidJvm]open fun closeContextMenu() closeOptionsMenu [androidJvm]open override fun closeOptionsMenu() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createPendingResult [androidJvm]open fun createPendingResult(p0: Int, p1: Intent, p2: Int): PendingIntent createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean dismissDialog [androidJvm]fun ~~dismissDialog~~(p0: Int) dismissKeyboardShortcutsHelper [androidJvm]fun dismissKeyboardShortcutsHelper() dispatchGenericMotionEvent [androidJvm]open override fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchKeyEvent [androidJvm]open override fun dispatchKeyEvent(event: KeyEvent): Boolean dispatchKeyShortcutEvent [androidJvm]open override fun dispatchKeyShortcutEvent(event: KeyEvent): Boolean dispatchPopulateAccessibilityEvent [androidJvm]open override fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchTouchEvent [androidJvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [androidJvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dump [androidJvm]open override fun dump(@NonNullp0: String, @Nullablep1: FileDescriptor?, @NonNullp2: PrintWriter, @Nullablep3: Array&lt;String&gt;?) enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) enterPictureInPictureMode [androidJvm]open fun ~~enterPictureInPictureMode~~()open fun enterPictureInPictureMode(p0: PictureInPictureParams): Boolean fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; findViewById [androidJvm]open override fun &lt;T : View&gt; findViewById(@IdResp0: Int): T finish [androidJvm]open fun finish() finishActivity [androidJvm]open fun finishActivity(p0: Int) finishActivityFromChild [androidJvm]open fun ~~finishActivityFromChild~~(p0: Activity, p1: Int) finishAffinity [androidJvm]open fun finishAffinity() finishAfterTransition [androidJvm]open fun finishAfterTransition() finishAndRemoveTask [androidJvm]open fun finishAndRemoveTask() finishFromChild [androidJvm]open fun ~~finishFromChild~~(p0: Activity) getActionBar [androidJvm]open fun getActionBar(): ActionBar? getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getCaller [androidJvm]open fun getCaller(): ComponentCaller? getCallingActivity [androidJvm]open fun getCallingActivity(): ComponentName? getCallingPackage [androidJvm]open fun getCallingPackage(): String? getChangingConfigurations [androidJvm]open fun getChangingConfigurations(): Int getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getComponentName [androidJvm]open fun getComponentName(): ComponentName getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getContentScene [androidJvm]open fun getContentScene(): Scene getContentTransitionManager [androidJvm]open fun getContentTransitionManager(): TransitionManager getCurrentCaller [androidJvm]open fun getCurrentCaller(): ComponentCaller getCurrentFocus [androidJvm]open fun getCurrentFocus(): View? getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDelegate [androidJvm]@NonNullopen fun getDelegate(): AppCompatDelegate getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getDrawerToggleDelegate [androidJvm]@Nullableopen override fun getDrawerToggleDelegate(): ActionBarDrawerToggle.Delegate? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getExtraData [androidJvm]open fun &lt;T : ComponentActivity.ExtraData&gt; ~~getExtraData~~(extraDataClass: Class&lt;T&gt;): T? getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getFragmentManager [androidJvm]open fun ~~getFragmentManager~~(): FragmentManager getInitialCaller [androidJvm]open fun getInitialCaller(): ComponentCaller getIntent [androidJvm]open fun getIntent(): Intent getLastNonConfigurationInstance [androidJvm]open fun getLastNonConfigurationInstance(): Any? getLaunchedFromPackage [androidJvm]open fun getLaunchedFromPackage(): String? getLaunchedFromUid [androidJvm]open fun getLaunchedFromUid(): Int getLayoutInflater [androidJvm]open fun getLayoutInflater(): LayoutInflater getLoaderManager [androidJvm]open fun ~~getLoaderManager~~(): LoaderManager getLocalClassName [androidJvm]open fun getLocalClassName(): String getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getMaxNumPictureInPictureActions [androidJvm]open fun getMaxNumPictureInPictureActions(): Int getMediaController [androidJvm]fun getMediaController(): MediaController getMenuInflater [androidJvm]@NonNullopen override fun getMenuInflater(): MenuInflater getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOnBackInvokedDispatcher [androidJvm]open fun getOnBackInvokedDispatcher(): OnBackInvokedDispatcher getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getParent [androidJvm]fun ~~getParent~~(): Activity getParentActivityIntent [androidJvm]open fun getParentActivityIntent(): Intent? getPreferences [androidJvm]open fun getPreferences(p0: Int): SharedPreferences getReferrer [androidJvm]open fun getReferrer(): Uri? getRequestedOrientation [androidJvm]open fun getRequestedOrientation(): Int getResources [androidJvm]open override fun getResources(): Resources getSearchEvent [androidJvm]fun getSearchEvent(): SearchEvent getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getSplashScreen [androidJvm]fun getSplashScreen(): SplashScreen getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSupportActionBar [androidJvm]@Nullableopen fun getSupportActionBar(): ActionBar? getSupportFragmentManager [androidJvm]@NonNullopen fun getSupportFragmentManager(): FragmentManager getSupportLoaderManager [androidJvm]@NonNullopen fun ~~getSupportLoaderManager~~(): LoaderManager getSupportParentActivityIntent [androidJvm]@Nullableopen override fun getSupportParentActivityIntent(): Intent? getSystemService [androidJvm]open override fun getSystemService(p0: String): Anyfun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): T getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getTaskId [androidJvm]open fun getTaskId(): Int getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getTitle [androidJvm]fun getTitle(): CharSequence getTitleColor [androidJvm]fun getTitleColor(): Int getVoiceInteractor [androidJvm]open fun getVoiceInteractor(): VoiceInteractor getVolumeControlStream [androidJvm]fun getVolumeControlStream(): Int getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int getWindow [androidJvm]open fun getWindow(): Window getWindowManager [androidJvm]open fun getWindowManager(): WindowManager grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) hasWindowFocus [androidJvm]open fun hasWindowFocus(): Boolean initializeViewTreeOwners [androidJvm]open fun initializeViewTreeOwners() invalidateMenu [androidJvm]open override fun invalidateMenu() invalidateOptionsMenu [androidJvm]open override fun invalidateOptionsMenu() isActivityTransitionRunning [androidJvm]open fun isActivityTransitionRunning(): Boolean isChangingConfigurations [androidJvm]open fun isChangingConfigurations(): Boolean isChild [androidJvm]fun ~~isChild~~(): Boolean isDestroyed [androidJvm]open fun isDestroyed(): Boolean isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isFinishing [androidJvm]open fun isFinishing(): Boolean isImmersive [androidJvm]open fun isImmersive(): Boolean isInMultiWindowMode [androidJvm]open fun isInMultiWindowMode(): Boolean isInPictureInPictureMode [androidJvm]open fun isInPictureInPictureMode(): Boolean isLaunchedFromBubble [androidJvm]open fun isLaunchedFromBubble(): Boolean isLocalVoiceInteractionSupported [androidJvm]open fun isLocalVoiceInteractionSupported(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isTaskRoot [androidJvm]open fun isTaskRoot(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean isVoiceInteraction [androidJvm]open fun isVoiceInteraction(): Boolean isVoiceInteractionRoot [androidJvm]open fun isVoiceInteractionRoot(): Boolean managedQuery [androidJvm]fun ~~managedQuery~~(p0: Uri, p1: Array&lt;String&gt;, p2: String, p3: Array&lt;String&gt;, p4: String): Cursor moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean moveTaskToBack [androidJvm]open fun moveTaskToBack(p0: Boolean): Boolean navigateUpTo [androidJvm]open fun navigateUpTo(p0: Intent): Boolean navigateUpToFromChild [androidJvm]open fun ~~navigateUpToFromChild~~(p0: Activity, p1: Intent): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onActionModeFinished [androidJvm]open override fun onActionModeFinished(p0: ActionMode) onActionModeStarted [androidJvm]open override fun onActionModeStarted(p0: ActionMode) onActivityReenter [androidJvm]open fun onActivityReenter(p0: Int, p1: Intent) onActivityResult [androidJvm]open fun onActivityResult(p0: Int, p1: Int, p2: Intent?, p3: ComponentCaller) onAttachedToWindow [androidJvm]open override fun onAttachedToWindow() onAttachFragment [androidJvm]open fun ~~onAttachFragment~~(p0: Fragment)@MainThreadopen fun ~~onAttachFragment~~(@NonNullp0: Fragment) onBackPressed [androidJvm]open override fun ~~onBackPressed~~() onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(@NonNullnewConfig: Configuration) onContentChanged [androidJvm]open override fun onContentChanged() onContextItemSelected [androidJvm]open fun onContextItemSelected(p0: MenuItem): Boolean onContextMenuClosed [androidJvm]open fun onContextMenuClosed(p0: Menu) onCreate [androidJvm]open fun onCreate(p0: Bundle?, p1: PersistableBundle?) onCreateContextMenu [androidJvm]open override fun onCreateContextMenu(p0: ContextMenu, p1: View, p2: ContextMenu.ContextMenuInfo) onCreateDescription [androidJvm]open fun onCreateDescription(): CharSequence? onCreateNavigateUpTaskStack [androidJvm]open fun onCreateNavigateUpTaskStack(p0: TaskStackBuilder) onCreateOptionsMenu [androidJvm]open fun onCreateOptionsMenu(p0: Menu): Boolean onCreatePanelMenu [androidJvm]open override fun onCreatePanelMenu(featureId: Int, menu: Menu): Boolean onCreatePanelView [androidJvm]open override fun onCreatePanelView(p0: Int): View? onCreateSupportNavigateUpTaskStack [androidJvm]open fun onCreateSupportNavigateUpTaskStack(@NonNullp0: TaskStackBuilder) onCreateThumbnail [androidJvm]open fun ~~onCreateThumbnail~~(p0: Bitmap, p1: Canvas): Boolean onCreateView [androidJvm]@Nullableopen override fun onCreateView(@NonNullp0: String, @NonNullp1: Context, @NonNullp2: AttributeSet): View?@Nullableopen override fun onCreateView(@Nullablep0: View?, @NonNullp1: String, @NonNullp2: Context, @NonNullp3: AttributeSet): View? onDetachedFromWindow [androidJvm]open override fun onDetachedFromWindow() onEnterAnimationComplete [androidJvm]open fun onEnterAnimationComplete() onGenericMotionEvent [androidJvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onGetDirectActions [androidJvm]open fun onGetDirectActions(p0: CancellationSignal, p1: Consumer&lt;MutableList&lt;DirectAction&gt;&gt;) onKeyDown [androidJvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [androidJvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [androidJvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyShortcut [androidJvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [androidJvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onLocalVoiceInteractionStarted [androidJvm]open fun onLocalVoiceInteractionStarted() onLocalVoiceInteractionStopped [androidJvm]open fun onLocalVoiceInteractionStopped() onLowMemory [androidJvm]open override fun onLowMemory() onMenuItemSelected [androidJvm]override fun onMenuItemSelected(featureId: Int, @NonNullitem: MenuItem): Boolean onMenuOpened [androidJvm]open override fun onMenuOpened(p0: Int, p1: Menu): Boolean onMultiWindowModeChanged [androidJvm]open override fun ~~onMultiWindowModeChanged~~(isInMultiWindowMode: Boolean)open override fun onMultiWindowModeChanged(isInMultiWindowMode: Boolean, newConfig: Configuration) onNavigateUp [androidJvm]open fun onNavigateUp(): Boolean onNavigateUpFromChild [androidJvm]open fun ~~onNavigateUpFromChild~~(p0: Activity): Boolean onNewIntent [androidJvm]open fun onNewIntent(p0: Intent, p1: ComponentCaller) onOptionsItemSelected [androidJvm]open fun onOptionsItemSelected(p0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]open fun onOptionsMenuClosed(p0: Menu) onPanelClosed [androidJvm]open override fun onPanelClosed(featureId: Int, @NonNullmenu: Menu) onPerformDirectAction [androidJvm]open fun onPerformDirectAction(p0: String, p1: Bundle, p2: CancellationSignal, p3: Consumer&lt;Bundle&gt;) onPictureInPictureModeChanged [androidJvm]open override fun ~~onPictureInPictureModeChanged~~(isInPictureInPictureMode: Boolean)open override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration) onPictureInPictureRequested [androidJvm]open fun onPictureInPictureRequested(): Boolean onPictureInPictureUiStateChanged [androidJvm]open fun onPictureInPictureUiStateChanged(p0: PictureInPictureUiState) onPointerCaptureChanged [androidJvm]open fun onPointerCaptureChanged(p0: Boolean) onPostCreate [androidJvm]open fun onPostCreate(p0: Bundle?, p1: PersistableBundle?) onPrepareNavigateUpTaskStack [androidJvm]open fun onPrepareNavigateUpTaskStack(p0: TaskStackBuilder) onPrepareOptionsMenu [androidJvm]open fun onPrepareOptionsMenu(p0: Menu): Boolean onPreparePanel [androidJvm]open override fun onPreparePanel(featureId: Int, view: View?, menu: Menu): Boolean onPrepareSupportNavigateUpTaskStack [androidJvm]open fun onPrepareSupportNavigateUpTaskStack(@NonNullp0: TaskStackBuilder) onProvideAssistContent [androidJvm]open fun onProvideAssistContent(p0: AssistContent) onProvideAssistData [androidJvm]open fun onProvideAssistData(p0: Bundle) onProvideKeyboardShortcuts [androidJvm]open override fun onProvideKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Menu?, p2: Int) onProvideReferrer [androidJvm]open fun onProvideReferrer(): Uri onRequestPermissionsResult [androidJvm]open fun onRequestPermissionsResult(p0: Int, p1: Array&lt;String&gt;, p2: IntArray, p3: Int)@CallSuperopen override fun onRequestPermissionsResult(requestCode: Int, @NonNullpermissions: Array&lt;String&gt;, @NonNullgrantResults: IntArray) onRestoreInstanceState [androidJvm]open fun onRestoreInstanceState(p0: Bundle?, p1: PersistableBundle?) onRetainCustomNonConfigurationInstance [androidJvm]open fun ~~onRetainCustomNonConfigurationInstance~~(): Any? onRetainNonConfigurationInstance [androidJvm]override fun onRetainNonConfigurationInstance(): Any? onSaveInstanceState [androidJvm]open fun onSaveInstanceState(p0: Bundle, p1: PersistableBundle) onSearchRequested [androidJvm]open override fun onSearchRequested(): Booleanopen override fun onSearchRequested(p0: SearchEvent?): Boolean onStateNotSaved [androidJvm]open override fun onStateNotSaved() onSupportActionModeFinished [androidJvm]@CallSuperopen override fun onSupportActionModeFinished(@NonNullp0: ActionMode) onSupportActionModeStarted [androidJvm]@CallSuperopen override fun onSupportActionModeStarted(@NonNullp0: ActionMode) onSupportContentChanged [androidJvm]open fun ~~onSupportContentChanged~~() onSupportNavigateUp [androidJvm]open fun onSupportNavigateUp(): Boolean onTopResumedActivityChanged [androidJvm]open fun onTopResumedActivityChanged(p0: Boolean) onTouchEvent [androidJvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [androidJvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onTrimMemory [androidJvm]open override fun onTrimMemory(level: Int) onUserInteraction [androidJvm]open fun onUserInteraction() onVisibleBehindCanceled [androidJvm]open fun ~~onVisibleBehindCanceled~~() onWindowAttributesChanged [androidJvm]open override fun onWindowAttributesChanged(p0: WindowManager.LayoutParams) onWindowFocusChanged [androidJvm]open override fun onWindowFocusChanged(p0: Boolean) onWindowStartingActionMode [androidJvm]open override fun onWindowStartingActionMode(p0: ActionMode.Callback): ActionMode?open override fun onWindowStartingActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? onWindowStartingSupportActionMode [androidJvm]@Nullableopen override fun onWindowStartingSupportActionMode(@NonNullp0: ActionMode.Callback): ActionMode? openContextMenu [androidJvm]open fun openContextMenu(p0: View) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOptionsMenu [androidJvm]open override fun openOptionsMenu() openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase overrideActivityTransition [androidJvm]open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int)open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int, p3: Int) overridePendingTransition [androidJvm]open fun ~~overridePendingTransition~~(p0: Int, p1: Int)open fun ~~overridePendingTransition~~(p0: Int, p1: Int, p2: Int) paymentReminderNotification [androidJvm]fun Context.paymentReminderNotification(merchantName: String, nextPaymentDate: Long): NotificationNotification for payment reminder peekAvailableContext [androidJvm]open override fun peekAvailableContext(): Context? peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable postponeEnterTransition [androidJvm]open fun postponeEnterTransition() putExtraData [androidJvm]open fun ~~putExtraData~~(extraData: ComponentActivity.ExtraData) recreate [androidJvm]open fun recreate() registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerForActivityResult [androidJvm]override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, registry: ActivityResultRegistry, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(p0: View) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? registerScreenCaptureCallback [androidJvm]open fun registerScreenCaptureCallback(p0: Executor, p1: Activity.ScreenCaptureCallback) releaseInstance [androidJvm]open fun releaseInstance(): Boolean removeDialog [androidJvm]fun ~~removeDialog~~(p0: Int) removeMenuProvider [androidJvm]open override fun removeMenuProvider(provider: MenuProvider) removeOnConfigurationChangedListener [androidJvm]override fun removeOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) removeOnContextAvailableListener [androidJvm]override fun removeOnContextAvailableListener(listener: OnContextAvailableListener) removeOnMultiWindowModeChangedListener [androidJvm]override fun removeOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) removeOnNewIntentListener [androidJvm]override fun removeOnNewIntentListener(listener: Consumer&lt;Intent&gt;) removeOnPictureInPictureModeChangedListener [androidJvm]override fun removeOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) removeOnTrimMemoryListener [androidJvm]override fun removeOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) removeOnUserLeaveHintListener [androidJvm]override fun removeOnUserLeaveHintListener(listener: Runnable) removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) reportFullyDrawn [androidJvm]open override fun reportFullyDrawn() requestDragAndDropPermissions [androidJvm]open fun requestDragAndDropPermissions(p0: DragEvent): DragAndDropPermissions requestFullscreenMode [androidJvm]open fun requestFullscreenMode(p0: Int, p1: OutcomeReceiver&lt;Void, Throwable&gt;?) requestPermissions [androidJvm]fun requestPermissions(p0: Array&lt;String&gt;, p1: Int)fun requestPermissions(p0: Array&lt;String&gt;, p1: Int, p2: Int) requestShowKeyboardShortcuts [androidJvm]fun requestShowKeyboardShortcuts() requestVisibleBehind [androidJvm]open fun ~~requestVisibleBehind~~(p0: Boolean): Boolean requestWindowFeature [androidJvm]fun requestWindowFeature(p0: Int): Boolean requireViewById [androidJvm]fun &lt;T : View&gt; requireViewById(p0: Int): T &amp; Any revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) runOnUiThread [androidJvm]fun runOnUiThread(p0: Runnable) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setActionBar [androidJvm]open fun setActionBar(p0: Toolbar?) setAllowCrossUidActivitySwitchFromBelow [androidJvm]open fun setAllowCrossUidActivitySwitchFromBelow(p0: Boolean) setContentTransitionManager [androidJvm]open fun setContentTransitionManager(p0: TransitionManager) setContentView [androidJvm]open override fun setContentView(view: View?)open override fun setContentView(@LayoutReslayoutResID: Int)open override fun setContentView(view: View?, params: ViewGroup.LayoutParams?) setDefaultKeyMode [androidJvm]fun setDefaultKeyMode(p0: Int) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(p0: SharedElementCallback)open fun setEnterSharedElementCallback(@Nullablep0: SharedElementCallback?) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(p0: SharedElementCallback)open fun setExitSharedElementCallback(@Nullablep0: SharedElementCallback?) setFeatureDrawable [androidJvm]fun setFeatureDrawable(p0: Int, p1: Drawable) setFeatureDrawableAlpha [androidJvm]fun setFeatureDrawableAlpha(p0: Int, p1: Int) setFeatureDrawableResource [androidJvm]fun setFeatureDrawableResource(p0: Int, p1: Int) setFeatureDrawableUri [androidJvm]fun setFeatureDrawableUri(p0: Int, p1: Uri) setFinishOnTouchOutside [androidJvm]open fun setFinishOnTouchOutside(p0: Boolean) setImmersive [androidJvm]open fun setImmersive(p0: Boolean) setInheritShowWhenLocked [androidJvm]open fun setInheritShowWhenLocked(p0: Boolean) setIntent [androidJvm]open fun setIntent(p0: Intent)open fun setIntent(p0: Intent?, p1: ComponentCaller?) setLocusContext [androidJvm]open fun setLocusContext(p0: LocusId?, p1: Bundle?) setMediaController [androidJvm]fun setMediaController(p0: MediaController) setPictureInPictureParams [androidJvm]open fun setPictureInPictureParams(p0: PictureInPictureParams) setProgress [androidJvm]fun ~~setProgress~~(p0: Int) setProgressBarIndeterminate [androidJvm]fun ~~setProgressBarIndeterminate~~(p0: Boolean) setProgressBarIndeterminateVisibility [androidJvm]fun ~~setProgressBarIndeterminateVisibility~~(p0: Boolean) setProgressBarVisibility [androidJvm]fun ~~setProgressBarVisibility~~(p0: Boolean) setRecentsScreenshotEnabled [androidJvm]open fun setRecentsScreenshotEnabled(p0: Boolean) setRequestedOrientation [androidJvm]open fun setRequestedOrientation(p0: Int) setResult [androidJvm]fun setResult(p0: Int)fun setResult(p0: Int, p1: Intent) setSecondaryProgress [androidJvm]fun ~~setSecondaryProgress~~(p0: Int) setShouldDockBigOverlays [androidJvm]open fun setShouldDockBigOverlays(p0: Boolean) setShowWhenLocked [androidJvm]open fun setShowWhenLocked(p0: Boolean) setSupportActionBar [androidJvm]open fun setSupportActionBar(@Nullablep0: Toolbar?) setSupportProgress [androidJvm]open fun ~~setSupportProgress~~(p0: Int) setSupportProgressBarIndeterminate [androidJvm]open fun ~~setSupportProgressBarIndeterminate~~(p0: Boolean) setSupportProgressBarIndeterminateVisibility [androidJvm]open fun ~~setSupportProgressBarIndeterminateVisibility~~(p0: Boolean) setSupportProgressBarVisibility [androidJvm]open fun ~~setSupportProgressBarVisibility~~(p0: Boolean) setTaskDescription [androidJvm]open fun setTaskDescription(p0: ActivityManager.TaskDescription) setTheme [androidJvm]open fun setTheme(p0: Resources.Theme?)open override fun setTheme(@StyleResp0: Int) setTitle [androidJvm]open fun setTitle(p0: CharSequence)open fun setTitle(p0: Int) setTitleColor [androidJvm]open fun ~~setTitleColor~~(p0: Int) setTranslucent [androidJvm]open fun setTranslucent(p0: Boolean): Boolean setTurnScreenOn [androidJvm]open fun setTurnScreenOn(p0: Boolean) setVisible [androidJvm]open fun setVisible(p0: Boolean) setVolumeControlStream [androidJvm]fun setVolumeControlStream(p0: Int) setVrModeEnabled [androidJvm]open fun setVrModeEnabled(p0: Boolean, p1: ComponentName) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) shouldDockBigOverlays [androidJvm]open fun shouldDockBigOverlays(): Boolean shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(p0: String): Booleanopen fun shouldShowRequestPermissionRationale(p0: String, p1: Int): Boolean shouldUpRecreateTask [androidJvm]open fun shouldUpRecreateTask(p0: Intent): Boolean showAssist [androidJvm]open fun showAssist(p0: Bundle): Boolean showDialog [androidJvm]fun ~~showDialog~~(p0: Int)fun ~~showDialog~~(p0: Int, p1: Bundle): Boolean showLockTaskEscapeMessage [androidJvm]open fun showLockTaskEscapeMessage() startActionMode [androidJvm]open fun startActionMode(p0: ActionMode.Callback): ActionMode?open fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startActivityForResult [androidJvm]open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int)open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int, options: Bundle?) startActivityFromChild [androidJvm]open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int)open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int, p3: Bundle?) startActivityFromFragment [androidJvm]open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int)open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int, p3: Bundle?)open fun startActivityFromFragment(@NonNullp0: Fragment, @NonNullp1: Intent, p2: Int)open fun startActivityFromFragment(@NonNullp0: Fragment, @NonNullp1: Intent, p2: Int, @Nullablep3: Bundle?) startActivityIfNeeded [androidJvm]open fun startActivityIfNeeded(p0: Intent, p1: Int): Booleanopen fun startActivityIfNeeded(p0: Intent, p1: Int, p2: Bundle?): Boolean startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startIntentSenderForResult [androidJvm]open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int)open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int, options: Bundle?) startIntentSenderFromChild [androidJvm]open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int)open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int, p7: Bundle?) startIntentSenderFromFragment [androidJvm]open fun ~~startIntentSenderFromFragment~~(@NonNullp0: Fragment, @NonNullp1: IntentSender, p2: Int, @Nullablep3: Intent?, p4: Int, p5: Int, p6: Int, @Nullablep7: Bundle?) startLocalVoiceInteraction [androidJvm]open fun startLocalVoiceInteraction(p0: Bundle) startLockTask [androidJvm]open fun startLockTask() startManagingCursor [androidJvm]open fun ~~startManagingCursor~~(p0: Cursor) startNextMatchingActivity [androidJvm]open fun startNextMatchingActivity(p0: Intent): Booleanopen fun startNextMatchingActivity(p0: Intent, p1: Bundle?): Boolean startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() startSearch [androidJvm]open fun startSearch(p0: String?, p1: Boolean, p2: Bundle?, p3: Boolean) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? startSupportActionMode [androidJvm]@Nullableopen fun startSupportActionMode(@NonNullp0: ActionMode.Callback): ActionMode? stopLocalVoiceInteraction [androidJvm]open fun stopLocalVoiceInteraction() stopLockTask [androidJvm]open fun stopLockTask() stopManagingCursor [androidJvm]open fun ~~stopManagingCursor~~(p0: Cursor) stopService [androidJvm]open override fun stopService(p0: Intent): Boolean superDispatchKeyEvent [androidJvm]open override fun superDispatchKeyEvent(event: KeyEvent): Boolean supportFinishAfterTransition [androidJvm]open fun supportFinishAfterTransition() supportInvalidateOptionsMenu [androidJvm]open override fun supportInvalidateOptionsMenu() supportNavigateUpTo [androidJvm]open fun supportNavigateUpTo(@NonNullp0: Intent) supportPostponeEnterTransition [androidJvm]open fun supportPostponeEnterTransition() supportRequestWindowFeature [androidJvm]open fun supportRequestWindowFeature(p0: Int): Boolean supportShouldUpRecreateTask [androidJvm]open fun supportShouldUpRecreateTask(@NonNullp0: Intent): Boolean supportStartPostponedEnterTransition [androidJvm]open fun supportStartPostponedEnterTransition() syncForegroundInfo [androidJvm]fun Context.syncForegroundInfo(total: Int, current: Int): ForegroundInfoForeground information for sync on lower API levels when sync workers are being run with a foreground service takeKeyEvents [androidJvm]open fun takeKeyEvents(p0: Boolean) triggerSearch [androidJvm]open fun triggerSearch(p0: String, p1: Bundle?) unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(p0: View) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) unregisterScreenCaptureCallback [androidJvm]open fun unregisterScreenCaptureCallback(p0: Activity.ScreenCaptureCallback) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int) validateRequestPermissionsRequestCode [androidJvm]override fun ~~validateRequestPermissionsRequestCode~~(p0: Int)"},{"location":"app/app/dev.atick.compose/-main-activity/-main-activity/","title":"main activity","text":"<p>//app/dev.atick.compose/MainActivity/MainActivity</p>"},{"location":"app/app/dev.atick.compose/-main-activity/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose/-main-activity/network-utils/","title":"Network utils","text":"<p>//app/dev.atick.compose/MainActivity/networkUtils</p>"},{"location":"app/app/dev.atick.compose/-main-activity/network-utils/#networkutils","title":"networkUtils","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var networkUtils: NetworkUtils</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/","title":"Index","text":"<p>//app/dev.atick.compose/MainActivityViewModel</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>class MainActivityViewModel@Injectconstructor(userDataRepository: UserDataRepository) : ViewModel</p> <p>Annotates a ViewModel class that is managed by Hilt's dependency injection system.</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> userDataRepository The repository providing access to user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#constructors","title":"Constructors","text":"MainActivityViewModel [androidJvm]@Injectconstructor(userDataRepository: UserDataRepository)Creates a MainActivityViewModel instance."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#properties","title":"Properties","text":"Name Summary uiState [androidJvm]val uiState: StateFlow&lt;UiState&lt;UserData&gt;&gt;Represents the state of the UI for user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/","title":"main activity view model","text":"<p>//app/dev.atick.compose/MainActivityViewModel/MainActivityViewModel</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userDataRepository: UserDataRepository)</p> <p>Creates a MainActivityViewModel instance.</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> userDataRepository The repository providing access to user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/ui-state/","title":"Ui state","text":"<p>//app/dev.atick.compose/MainActivityViewModel/uiState</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/ui-state/#uistate","title":"uiState","text":"<p>[androidJvm]\\ val uiState: StateFlow&lt;UiState&lt;UserData&gt;&gt;</p> <p>Represents the state of the UI for user data.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/","title":"Index","text":"<p>//app/dev.atick.compose.data.analysis</p>"},{"location":"app/app/dev.atick.compose.data.analysis/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.analysis/#types","title":"Types","text":"Name Summary AnalysisScreenData [androidJvm]data class AnalysisScreenData(val categoryAnalyses: List&lt;UiAnalysis&gt; = emptyList(), val merchantAnalyses: List&lt;UiAnalysis&gt; = emptyList())Data class representing the analysis screen data. UiAnalysis [androidJvm]data class UiAnalysis(val categoryOrMerchant: String, val spending: Double, val currency: String, val maxAmount: Double, val minAmount: Double, val percentage: Double)Data class representing the UI analysis data."},{"location":"app/app/dev.atick.compose.data.analysis/#functions","title":"Functions","text":"Name Summary toUiAnalyses [androidJvm]fun List&lt;ExpenseAnalysis&gt;.toUiAnalyses(): List&lt;UiAnalysis&gt;Converts a list of ExpenseAnalysis to a list of UiAnalysis. toUiAnalysis [androidJvm]fun ExpenseAnalysis.toUiAnalysis(): UiAnalysisConverts an ExpenseAnalysis to a UiAnalysis."},{"location":"app/app/dev.atick.compose.data.analysis/to-ui-analyses/","title":"To ui analyses","text":"<p>//app/dev.atick.compose.data.analysis/toUiAnalyses</p>"},{"location":"app/app/dev.atick.compose.data.analysis/to-ui-analyses/#touianalyses","title":"toUiAnalyses","text":"<p>[androidJvm]\\ fun List&lt;ExpenseAnalysis&gt;.toUiAnalyses(): List&lt;UiAnalysis&gt;</p> <p>Converts a list of ExpenseAnalysis to a list of UiAnalysis.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/to-ui-analyses/#return","title":"Return","text":"<p>The list of UiAnalysis representation of the list of ExpenseAnalysis.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/to-ui-analysis/","title":"To ui analysis","text":"<p>//app/dev.atick.compose.data.analysis/toUiAnalysis</p>"},{"location":"app/app/dev.atick.compose.data.analysis/to-ui-analysis/#touianalysis","title":"toUiAnalysis","text":"<p>[androidJvm]\\ fun ExpenseAnalysis.toUiAnalysis(): UiAnalysis</p> <p>Converts an ExpenseAnalysis to a UiAnalysis.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/to-ui-analysis/#return","title":"Return","text":"<p>The UiAnalysis representation of the ExpenseAnalysis.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.analysis/AnalysisScreenData</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/#analysisscreendata","title":"AnalysisScreenData","text":"<p>data class AnalysisScreenData(val categoryAnalyses: List&lt;UiAnalysis&gt; = emptyList(), val merchantAnalyses: List&lt;UiAnalysis&gt; = emptyList())</p> <p>Data class representing the analysis screen data.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> categoryAnalyses The list of category analyses. merchantAnalyses The list of merchant analyses."},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/#constructors","title":"Constructors","text":"AnalysisScreenData [androidJvm]constructor(categoryAnalyses: List&lt;UiAnalysis&gt; = emptyList(), merchantAnalyses: List&lt;UiAnalysis&gt; = emptyList())"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/#properties","title":"Properties","text":"Name Summary categoryAnalyses [androidJvm]val categoryAnalyses: List&lt;UiAnalysis&gt; merchantAnalyses [androidJvm]val merchantAnalyses: List&lt;UiAnalysis&gt;"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/-analysis-screen-data/","title":"analysis screen data","text":"<p>//app/dev.atick.compose.data.analysis/AnalysisScreenData/AnalysisScreenData</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/-analysis-screen-data/#analysisscreendata","title":"AnalysisScreenData","text":"<p>[androidJvm]\\ constructor(categoryAnalyses: List&lt;UiAnalysis&gt; = emptyList(), merchantAnalyses: List&lt;UiAnalysis&gt; = emptyList())</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/-analysis-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> categoryAnalyses The list of category analyses. merchantAnalyses The list of merchant analyses."},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/category-analyses/","title":"Category analyses","text":"<p>//app/dev.atick.compose.data.analysis/AnalysisScreenData/categoryAnalyses</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/category-analyses/#categoryanalyses","title":"categoryAnalyses","text":"<p>[androidJvm]\\ val categoryAnalyses: List&lt;UiAnalysis&gt;</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/category-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> categoryAnalyses The list of category analyses."},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/merchant-analyses/","title":"Merchant analyses","text":"<p>//app/dev.atick.compose.data.analysis/AnalysisScreenData/merchantAnalyses</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/merchant-analyses/#merchantanalyses","title":"merchantAnalyses","text":"<p>[androidJvm]\\ val merchantAnalyses: List&lt;UiAnalysis&gt;</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-analysis-screen-data/merchant-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantAnalyses The list of merchant analyses."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/","title":"Index","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/#uianalysis","title":"UiAnalysis","text":"<p>data class UiAnalysis(val categoryOrMerchant: String, val spending: Double, val currency: String, val maxAmount: Double, val minAmount: Double, val percentage: Double)</p> <p>Data class representing the UI analysis data.</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/#parameters","title":"Parameters","text":"<p>androidJvm</p> categoryOrMerchant The category or merchant name. spending The total spending in the category or merchant. currency The currency of the spending. maxAmount The maximum amount spent in the category or merchant. minAmount The minimum amount spent in the category or merchant. percentage The percentage of the total spending in the category or merchant."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/#constructors","title":"Constructors","text":"UiAnalysis [androidJvm]constructor(categoryOrMerchant: String, spending: Double, currency: String, maxAmount: Double, minAmount: Double, percentage: Double)"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/#properties","title":"Properties","text":"Name Summary categoryOrMerchant [androidJvm]val categoryOrMerchant: String currency [androidJvm]val currency: String maxAmount [androidJvm]val maxAmount: Double minAmount [androidJvm]val minAmount: Double percentage [androidJvm]val percentage: Double spending [androidJvm]val spending: Double"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/-ui-analysis/","title":"ui analysis","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/UiAnalysis</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/-ui-analysis/#uianalysis","title":"UiAnalysis","text":"<p>[androidJvm]\\ constructor(categoryOrMerchant: String, spending: Double, currency: String, maxAmount: Double, minAmount: Double, percentage: Double)</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/-ui-analysis/#parameters","title":"Parameters","text":"<p>androidJvm</p> categoryOrMerchant The category or merchant name. spending The total spending in the category or merchant. currency The currency of the spending. maxAmount The maximum amount spent in the category or merchant. minAmount The minimum amount spent in the category or merchant. percentage The percentage of the total spending in the category or merchant."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/category-or-merchant/","title":"Category or merchant","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/categoryOrMerchant</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/category-or-merchant/#categoryormerchant","title":"categoryOrMerchant","text":"<p>[androidJvm]\\ val categoryOrMerchant: String</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/category-or-merchant/#parameters","title":"Parameters","text":"<p>androidJvm</p> categoryOrMerchant The category or merchant name."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/currency/","title":"Currency","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/currency</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/currency/#currency","title":"currency","text":"<p>[androidJvm]\\ val currency: String</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/currency/#parameters","title":"Parameters","text":"<p>androidJvm</p> currency The currency of the spending."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/max-amount/","title":"Max amount","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/maxAmount</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/max-amount/#maxamount","title":"maxAmount","text":"<p>[androidJvm]\\ val maxAmount: Double</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/max-amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> maxAmount The maximum amount spent in the category or merchant."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/min-amount/","title":"Min amount","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/minAmount</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/min-amount/#minamount","title":"minAmount","text":"<p>[androidJvm]\\ val minAmount: Double</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/min-amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> minAmount The minimum amount spent in the category or merchant."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/percentage/","title":"Percentage","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/percentage</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/percentage/#percentage","title":"percentage","text":"<p>[androidJvm]\\ val percentage: Double</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/percentage/#parameters","title":"Parameters","text":"<p>androidJvm</p> percentage The percentage of the total spending in the category or merchant."},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/spending/","title":"Spending","text":"<p>//app/dev.atick.compose.data.analysis/UiAnalysis/spending</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/spending/#spending","title":"spending","text":"<p>[androidJvm]\\ val spending: Double</p>"},{"location":"app/app/dev.atick.compose.data.analysis/-ui-analysis/spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> spending The total spending in the category or merchant."},{"location":"app/app/dev.atick.compose.data.budgets/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets</p>"},{"location":"app/app/dev.atick.compose.data.budgets/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.budgets/#types","title":"Types","text":"Name Summary BudgetsScreenData [androidJvm]data class BudgetsScreenData(val budget: UiBudget = UiBudget(), val cumulativeExpenses: List&lt;UiCumulativeExpense&gt; = emptyList())Data class representing the budgets screen data. BudgetStatus [androidJvm]enum BudgetStatus : Enum&lt;BudgetStatus&gt; Enum class representing the status of the budget. EditBudgetScreenData [androidJvm]data class EditBudgetScreenData(val month: Long = getMonthInfoAt(0).startDate, val amount: Double? = null, val navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))Data class representing the edit budget screen data. UiBudget [androidJvm]data class UiBudget(val month: Long = getMonthInfoAt(0).startDate, val amount: Double? = null)Data class representing the UI budget data. UiCumulativeExpense [androidJvm]data class UiCumulativeExpense(val amount: Double, val atTime: Long)Data class representing the UI cumulative expense data."},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/#budgetstatus","title":"BudgetStatus","text":"<p>[androidJvm]\\ enum BudgetStatus : Enum&lt;BudgetStatus&gt; </p> <p>Enum class representing the status of the budget.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/#entries","title":"Entries","text":"SAFE [androidJvm]SAFE WARNING [androidJvm]WARNING CRITICAL [androidJvm]CRITICAL EXCEEDED [androidJvm]EXCEEDED"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;BudgetStatus&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): BudgetStatusReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;BudgetStatus&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/entries</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;BudgetStatus&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/valueOf</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): BudgetStatus</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/values/","title":"Values","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/values</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;BudgetStatus&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-c-r-i-t-i-c-a-l/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/CRITICAL</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-c-r-i-t-i-c-a-l/#critical","title":"CRITICAL","text":"<p>[androidJvm]\\ CRITICAL</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-c-r-i-t-i-c-a-l/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-e-x-c-e-e-d-e-d/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/EXCEEDED</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-e-x-c-e-e-d-e-d/#exceeded","title":"EXCEEDED","text":"<p>[androidJvm]\\ EXCEEDED</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-e-x-c-e-e-d-e-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-s-a-f-e/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/SAFE</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-s-a-f-e/#safe","title":"SAFE","text":"<p>[androidJvm]\\ SAFE</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-s-a-f-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-w-a-r-n-i-n-g/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/BudgetStatus/WARNING</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-w-a-r-n-i-n-g/#warning","title":"WARNING","text":"<p>[androidJvm]\\ WARNING</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budget-status/-w-a-r-n-i-n-g/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/#budgetsscreendata","title":"BudgetsScreenData","text":"<p>data class BudgetsScreenData(val budget: UiBudget = UiBudget(), val cumulativeExpenses: List&lt;UiCumulativeExpense&gt; = emptyList())</p> <p>Data class representing the budgets screen data.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget data. cumulativeExpenses The list of cumulative expenses."},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/#constructors","title":"Constructors","text":"BudgetsScreenData [androidJvm]constructor(budget: UiBudget = UiBudget(), cumulativeExpenses: List&lt;UiCumulativeExpense&gt; = emptyList())"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/#properties","title":"Properties","text":"Name Summary budget [androidJvm]val budget: UiBudget budgetStatus [androidJvm]val budgetStatus: BudgetStatusThe status of the budget. cumulativeExpenses [androidJvm]val cumulativeExpenses: List&lt;UiCumulativeExpense&gt; currentExpenses [androidJvm]val currentExpenses: DoubleThe current expenses. isOverBudget [androidJvm]val isOverBudget: BooleanWhether the budget is over. overBudgetAmount [androidJvm]val overBudgetAmount: DoubleThe amount by which the budget is over. percentageUsed [androidJvm]val percentageUsed: DoubleThe percentage of the budget used. remainingBudget [androidJvm]val remainingBudget: DoubleThe remaining budget."},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/-budgets-screen-data/","title":"budgets screen data","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/BudgetsScreenData</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/-budgets-screen-data/#budgetsscreendata","title":"BudgetsScreenData","text":"<p>[androidJvm]\\ constructor(budget: UiBudget = UiBudget(), cumulativeExpenses: List&lt;UiCumulativeExpense&gt; = emptyList())</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/-budgets-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget data. cumulativeExpenses The list of cumulative expenses."},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/budget-status/","title":"Budget status","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/budgetStatus</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/budget-status/#budgetstatus","title":"budgetStatus","text":"<p>[androidJvm]\\ val budgetStatus: BudgetStatus</p> <p>The status of the budget.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/budget/","title":"Budget","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/budget</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/budget/#budget","title":"budget","text":"<p>[androidJvm]\\ val budget: UiBudget</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget data."},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/cumulative-expenses/","title":"Cumulative expenses","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/cumulativeExpenses</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/cumulative-expenses/#cumulativeexpenses","title":"cumulativeExpenses","text":"<p>[androidJvm]\\ val cumulativeExpenses: List&lt;UiCumulativeExpense&gt;</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/cumulative-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> cumulativeExpenses The list of cumulative expenses."},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/current-expenses/","title":"Current expenses","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/currentExpenses</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/current-expenses/#currentexpenses","title":"currentExpenses","text":"<p>[androidJvm]\\ val currentExpenses: Double</p> <p>The current expenses.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/is-over-budget/","title":"Is over budget","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/isOverBudget</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/is-over-budget/#isoverbudget","title":"isOverBudget","text":"<p>[androidJvm]\\ val isOverBudget: Boolean</p> <p>Whether the budget is over.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/over-budget-amount/","title":"Over budget amount","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/overBudgetAmount</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/over-budget-amount/#overbudgetamount","title":"overBudgetAmount","text":"<p>[androidJvm]\\ val overBudgetAmount: Double</p> <p>The amount by which the budget is over.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/percentage-used/","title":"Percentage used","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/percentageUsed</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/percentage-used/#percentageused","title":"percentageUsed","text":"<p>[androidJvm]\\ val percentageUsed: Double</p> <p>The percentage of the budget used.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/remaining-budget/","title":"Remaining budget","text":"<p>//app/dev.atick.compose.data.budgets/BudgetsScreenData/remainingBudget</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-budgets-screen-data/remaining-budget/#remainingbudget","title":"remainingBudget","text":"<p>[androidJvm]\\ val remainingBudget: Double</p> <p>The remaining budget.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/EditBudgetScreenData</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/#editbudgetscreendata","title":"EditBudgetScreenData","text":"<p>data class EditBudgetScreenData(val month: Long = getMonthInfoAt(0).startDate, val amount: Double? = null, val navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))</p> <p>Data class representing the edit budget screen data.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The timestamp of the start date of the month. amount The budget amount. navigateBack The event to navigate back."},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/#constructors","title":"Constructors","text":"EditBudgetScreenData [androidJvm]constructor(month: Long = getMonthInfoAt(0).startDate, amount: Double? = null, navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: Double? = null month [androidJvm]val month: Long navigateBack [androidJvm]val navigateBack: OneTimeEvent&lt;Boolean&gt;"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/-edit-budget-screen-data/","title":"edit budget screen data","text":"<p>//app/dev.atick.compose.data.budgets/EditBudgetScreenData/EditBudgetScreenData</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/-edit-budget-screen-data/#editbudgetscreendata","title":"EditBudgetScreenData","text":"<p>[androidJvm]\\ constructor(month: Long = getMonthInfoAt(0).startDate, amount: Double? = null, navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/-edit-budget-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The timestamp of the start date of the month. amount The budget amount. navigateBack The event to navigate back."},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/amount/","title":"Amount","text":"<p>//app/dev.atick.compose.data.budgets/EditBudgetScreenData/amount</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double? = null</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The budget amount."},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/month/","title":"Month","text":"<p>//app/dev.atick.compose.data.budgets/EditBudgetScreenData/month</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/month/#month","title":"month","text":"<p>[androidJvm]\\ val month: Long</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The timestamp of the start date of the month."},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/navigate-back/","title":"Navigate back","text":"<p>//app/dev.atick.compose.data.budgets/EditBudgetScreenData/navigateBack</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/navigate-back/#navigateback","title":"navigateBack","text":"<p>[androidJvm]\\ val navigateBack: OneTimeEvent&lt;Boolean&gt;</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-edit-budget-screen-data/navigate-back/#parameters","title":"Parameters","text":"<p>androidJvm</p> navigateBack The event to navigate back."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/UiBudget</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/#uibudget","title":"UiBudget","text":"<p>data class UiBudget(val month: Long = getMonthInfoAt(0).startDate, val amount: Double? = null)</p> <p>Data class representing the UI budget data.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is set. amount The budget amount."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/#constructors","title":"Constructors","text":"UiBudget [androidJvm]constructor(month: Long = getMonthInfoAt(0).startDate, amount: Double? = null)"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: Double? = null month [androidJvm]val month: Long"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/-ui-budget/","title":"ui budget","text":"<p>//app/dev.atick.compose.data.budgets/UiBudget/UiBudget</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/-ui-budget/#uibudget","title":"UiBudget","text":"<p>[androidJvm]\\ constructor(month: Long = getMonthInfoAt(0).startDate, amount: Double? = null)</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/-ui-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is set. amount The budget amount."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/amount/","title":"Amount","text":"<p>//app/dev.atick.compose.data.budgets/UiBudget/amount</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double? = null</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The budget amount."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/month/","title":"Month","text":"<p>//app/dev.atick.compose.data.budgets/UiBudget/month</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/month/#month","title":"month","text":"<p>[androidJvm]\\ val month: Long</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-budget/month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is set."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/","title":"Index","text":"<p>//app/dev.atick.compose.data.budgets/UiCumulativeExpense</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/#uicumulativeexpense","title":"UiCumulativeExpense","text":"<p>data class UiCumulativeExpense(val amount: Double, val atTime: Long)</p> <p>Data class representing the UI cumulative expense data.</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The amount of the expense. atTime The time at which the expense was made."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/#constructors","title":"Constructors","text":"UiCumulativeExpense [androidJvm]constructor(amount: Double, atTime: Long)"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: Double atTime [androidJvm]val atTime: Long"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/-ui-cumulative-expense/","title":"ui cumulative expense","text":"<p>//app/dev.atick.compose.data.budgets/UiCumulativeExpense/UiCumulativeExpense</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/-ui-cumulative-expense/#uicumulativeexpense","title":"UiCumulativeExpense","text":"<p>[androidJvm]\\ constructor(amount: Double, atTime: Long)</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/-ui-cumulative-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The amount of the expense. atTime The time at which the expense was made."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/amount/","title":"Amount","text":"<p>//app/dev.atick.compose.data.budgets/UiCumulativeExpense/amount</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The amount of the expense."},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/at-time/","title":"At time","text":"<p>//app/dev.atick.compose.data.budgets/UiCumulativeExpense/atTime</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/at-time/#attime","title":"atTime","text":"<p>[androidJvm]\\ val atTime: Long</p>"},{"location":"app/app/dev.atick.compose.data.budgets/-ui-cumulative-expense/at-time/#parameters","title":"Parameters","text":"<p>androidJvm</p> atTime The time at which the expense was made."},{"location":"app/app/dev.atick.compose.data.chat/","title":"Index","text":"<p>//app/dev.atick.compose.data.chat</p>"},{"location":"app/app/dev.atick.compose.data.chat/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.chat/#types","title":"Types","text":"Name Summary ChatScreenData [androidJvm]data class ChatScreenData(val newMessage: TextFieldData = TextFieldData(\"\"), val messages: List&lt;UiMessage&gt; = emptyList())Data class representing the chat screen data. UiMessage [androidJvm]data class UiMessage(val id: Long, val text: String, val isFromUser: Boolean = true)Data class representing the UI message data."},{"location":"app/app/dev.atick.compose.data.chat/#properties","title":"Properties","text":"Name Summary demoQuestions [androidJvm]val demoQuestions: List&lt;Int&gt;The list of demo questions."},{"location":"app/app/dev.atick.compose.data.chat/#functions","title":"Functions","text":"Name Summary asUiMessage [androidJvm]fun ChatEntity.asUiMessage(): UiMessageConverts a ChatEntity to a UiMessage. asUiMessages [androidJvm]fun List&lt;ChatEntity&gt;.asUiMessages(): List&lt;UiMessage&gt;Converts a list of ChatEntity to a list of UiMessage."},{"location":"app/app/dev.atick.compose.data.chat/as-ui-message/","title":"As ui message","text":"<p>//app/dev.atick.compose.data.chat/asUiMessage</p>"},{"location":"app/app/dev.atick.compose.data.chat/as-ui-message/#asuimessage","title":"asUiMessage","text":"<p>[androidJvm]\\ fun ChatEntity.asUiMessage(): UiMessage</p> <p>Converts a ChatEntity to a UiMessage.</p>"},{"location":"app/app/dev.atick.compose.data.chat/as-ui-messages/","title":"As ui messages","text":"<p>//app/dev.atick.compose.data.chat/asUiMessages</p>"},{"location":"app/app/dev.atick.compose.data.chat/as-ui-messages/#asuimessages","title":"asUiMessages","text":"<p>[androidJvm]\\ fun List&lt;ChatEntity&gt;.asUiMessages(): List&lt;UiMessage&gt;</p> <p>Converts a list of ChatEntity to a list of UiMessage.</p>"},{"location":"app/app/dev.atick.compose.data.chat/demo-questions/","title":"Demo questions","text":"<p>//app/dev.atick.compose.data.chat/demoQuestions</p>"},{"location":"app/app/dev.atick.compose.data.chat/demo-questions/#demoquestions","title":"demoQuestions","text":"<p>[androidJvm]\\ val demoQuestions: List&lt;Int&gt;</p> <p>The list of demo questions.</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.chat/ChatScreenData</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/#chatscreendata","title":"ChatScreenData","text":"<p>data class ChatScreenData(val newMessage: TextFieldData = TextFieldData(\"\"), val messages: List&lt;UiMessage&gt; = emptyList())</p> <p>Data class representing the chat screen data.</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> newMessage The new message data. messages The list of messages."},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/#constructors","title":"Constructors","text":"ChatScreenData [androidJvm]constructor(newMessage: TextFieldData = TextFieldData(\"\"), messages: List&lt;UiMessage&gt; = emptyList())"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/#properties","title":"Properties","text":"Name Summary messages [androidJvm]val messages: List&lt;UiMessage&gt; newMessage [androidJvm]val newMessage: TextFieldData"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/-chat-screen-data/","title":"chat screen data","text":"<p>//app/dev.atick.compose.data.chat/ChatScreenData/ChatScreenData</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/-chat-screen-data/#chatscreendata","title":"ChatScreenData","text":"<p>[androidJvm]\\ constructor(newMessage: TextFieldData = TextFieldData(\"\"), messages: List&lt;UiMessage&gt; = emptyList())</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/-chat-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> newMessage The new message data. messages The list of messages."},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/messages/","title":"Messages","text":"<p>//app/dev.atick.compose.data.chat/ChatScreenData/messages</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/messages/#messages","title":"messages","text":"<p>[androidJvm]\\ val messages: List&lt;UiMessage&gt;</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/messages/#parameters","title":"Parameters","text":"<p>androidJvm</p> messages The list of messages."},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/new-message/","title":"New message","text":"<p>//app/dev.atick.compose.data.chat/ChatScreenData/newMessage</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/new-message/#newmessage","title":"newMessage","text":"<p>[androidJvm]\\ val newMessage: TextFieldData</p>"},{"location":"app/app/dev.atick.compose.data.chat/-chat-screen-data/new-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> newMessage The new message data."},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/","title":"Index","text":"<p>//app/dev.atick.compose.data.chat/UiMessage</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/#uimessage","title":"UiMessage","text":"<p>data class UiMessage(val id: Long, val text: String, val isFromUser: Boolean = true)</p> <p>Data class representing the UI message data.</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The message ID. text The message text. isFromUser Whether the message is from the user."},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/#constructors","title":"Constructors","text":"UiMessage [androidJvm]constructor(id: Long, text: String, isFromUser: Boolean = true)"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: Long isFromUser [androidJvm]val isFromUser: Boolean = true text [androidJvm]val text: String"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/-ui-message/","title":"ui message","text":"<p>//app/dev.atick.compose.data.chat/UiMessage/UiMessage</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/-ui-message/#uimessage","title":"UiMessage","text":"<p>[androidJvm]\\ constructor(id: Long, text: String, isFromUser: Boolean = true)</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/-ui-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The message ID. text The message text. isFromUser Whether the message is from the user."},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/id/","title":"Id","text":"<p>//app/dev.atick.compose.data.chat/UiMessage/id</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Long</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The message ID."},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/is-from-user/","title":"Is from user","text":"<p>//app/dev.atick.compose.data.chat/UiMessage/isFromUser</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/is-from-user/#isfromuser","title":"isFromUser","text":"<p>[androidJvm]\\ val isFromUser: Boolean = true</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/is-from-user/#parameters","title":"Parameters","text":"<p>androidJvm</p> isFromUser Whether the message is from the user."},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/text/","title":"Text","text":"<p>//app/dev.atick.compose.data.chat/UiMessage/text</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/text/#text","title":"text","text":"<p>[androidJvm]\\ val text: String</p>"},{"location":"app/app/dev.atick.compose.data.chat/-ui-message/text/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The message text."},{"location":"app/app/dev.atick.compose.data.expenses/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses</p>"},{"location":"app/app/dev.atick.compose.data.expenses/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.expenses/#types","title":"Types","text":"Name Summary EditExpenseScreenData [androidJvm]data class EditExpenseScreenData(val id: Long = 0, val amount: Double = 0.0, val currency: UiCurrencyType = UiCurrencyType.QAR, val merchant: String = \"Unknown\", val category: UiCategoryType = UiCategoryType.ESSENTIAL, val paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, val recurringType: UiRecurringType = UiRecurringType.ONETIME, val paymentDate: Long = System.currentTimeMillis(), val dueDate: Long? = null, val toBeCancelled: Boolean = false, val formattedDate: String = paymentDate.asFormattedDateTime(), val navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))Data class representing the edit expense screen data. ExpensesScreenData [androidJvm]data class ExpensesScreenData(val expenses: List&lt;UiExpense&gt; = emptyList(), val displayMonthYear: String = \"\")Data class representing the expenses screen data. UiCategoryType [androidJvm]enum UiCategoryType : Enum&lt;UiCategoryType&gt; UI category type. UiCurrencyType [androidJvm]enum UiCurrencyType : Enum&lt;UiCurrencyType&gt; UI currency type. UiExpense [androidJvm]data class UiExpense(val id: Long = 0, val amount: Double = 0.0, val currency: UiCurrencyType = UiCurrencyType.QAR, val merchant: String = \"Unknown\", val category: UiCategoryType = UiCategoryType.ESSENTIAL, val paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, val recurringType: UiRecurringType = UiRecurringType.ONETIME, val paymentDate: Long = System.currentTimeMillis(), val dueDate: Long? = null, val toBeCancelled: Boolean = false, val formattedDate: String = paymentDate.asFormattedDateTime())Data class representing the UI expense data. UiPaymentStatus [androidJvm]enum UiPaymentStatus : Enum&lt;UiPaymentStatus&gt; UI payment status. UiRecurringType [androidJvm]enum UiRecurringType : Enum&lt;UiRecurringType&gt; UI recurring type."},{"location":"app/app/dev.atick.compose.data.expenses/#functions","title":"Functions","text":"Name Summary toEditableExpense [androidJvm]fun UiExpense.toEditableExpense(): EditExpenseScreenDataConverts a ExpenseEntity to a UiExpense. toExpenseEntity [androidJvm]fun UiExpense.toExpenseEntity(): ExpenseEntityConverts a ExpenseEntity to a UiExpense. toUiExpense [androidJvm]fun ExpenseEntity.toUiExpense(): UiExpenseConverts a ExpenseEntity to a UiExpense. toUiExpenses [androidJvm]fun List&lt;ExpenseEntity&gt;.toUiExpenses(): List&lt;UiExpense&gt;Converts a list of ExpenseEntity to a list of UiExpense."},{"location":"app/app/dev.atick.compose.data.expenses/to-editable-expense/","title":"To editable expense","text":"<p>//app/dev.atick.compose.data.expenses/toEditableExpense</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-editable-expense/#toeditableexpense","title":"toEditableExpense","text":"<p>[androidJvm]\\ fun UiExpense.toEditableExpense(): EditExpenseScreenData</p> <p>Converts a ExpenseEntity to a UiExpense.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-expense-entity/","title":"To expense entity","text":"<p>//app/dev.atick.compose.data.expenses/toExpenseEntity</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-expense-entity/#toexpenseentity","title":"toExpenseEntity","text":"<p>[androidJvm]\\ fun UiExpense.toExpenseEntity(): ExpenseEntity</p> <p>Converts a ExpenseEntity to a UiExpense.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-ui-expense/","title":"To ui expense","text":"<p>//app/dev.atick.compose.data.expenses/toUiExpense</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-ui-expense/#touiexpense","title":"toUiExpense","text":"<p>[androidJvm]\\ fun ExpenseEntity.toUiExpense(): UiExpense</p> <p>Converts a ExpenseEntity to a UiExpense.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-ui-expenses/","title":"To ui expenses","text":"<p>//app/dev.atick.compose.data.expenses/toUiExpenses</p>"},{"location":"app/app/dev.atick.compose.data.expenses/to-ui-expenses/#touiexpenses","title":"toUiExpenses","text":"<p>[androidJvm]\\ fun List&lt;ExpenseEntity&gt;.toUiExpenses(): List&lt;UiExpense&gt;</p> <p>Converts a list of ExpenseEntity to a list of UiExpense.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/#editexpensescreendata","title":"EditExpenseScreenData","text":"<p>data class EditExpenseScreenData(val id: Long = 0, val amount: Double = 0.0, val currency: UiCurrencyType = UiCurrencyType.QAR, val merchant: String = \"Unknown\", val category: UiCategoryType = UiCategoryType.ESSENTIAL, val paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, val recurringType: UiRecurringType = UiRecurringType.ONETIME, val paymentDate: Long = System.currentTimeMillis(), val dueDate: Long? = null, val toBeCancelled: Boolean = false, val formattedDate: String = paymentDate.asFormattedDateTime(), val navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))</p> <p>Data class representing the edit expense screen data.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The expense ID. amount The expense amount. currency The expense currency. merchant The expense merchant. category The expense category. paymentStatus The expense payment status. recurringType The expense recurring type. paymentDate The expense payment date. dueDate The expense due date. toBeCancelled Whether the expense is to be cancelled. formattedDate The formatted payment date. navigateBack The event to navigate back."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/#constructors","title":"Constructors","text":"EditExpenseScreenData [androidJvm]constructor(id: Long = 0, amount: Double = 0.0, currency: UiCurrencyType = UiCurrencyType.QAR, merchant: String = \"Unknown\", category: UiCategoryType = UiCategoryType.ESSENTIAL, paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, recurringType: UiRecurringType = UiRecurringType.ONETIME, paymentDate: Long = System.currentTimeMillis(), dueDate: Long? = null, toBeCancelled: Boolean = false, formattedDate: String = paymentDate.asFormattedDateTime(), navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: Double = 0.0 category [androidJvm]val category: UiCategoryType currency [androidJvm]val currency: UiCurrencyType dueDate [androidJvm]val dueDate: Long? = null formattedDate [androidJvm]val formattedDate: String id [androidJvm]val id: Long = 0 merchant [androidJvm]val merchant: String navigateBack [androidJvm]val navigateBack: OneTimeEvent&lt;Boolean&gt; paymentDate [androidJvm]val paymentDate: Long paymentStatus [androidJvm]val paymentStatus: UiPaymentStatus recurringType [androidJvm]val recurringType: UiRecurringType toBeCancelled [androidJvm]val toBeCancelled: Boolean = false"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/-edit-expense-screen-data/","title":"edit expense screen data","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/EditExpenseScreenData</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/-edit-expense-screen-data/#editexpensescreendata","title":"EditExpenseScreenData","text":"<p>[androidJvm]\\ constructor(id: Long = 0, amount: Double = 0.0, currency: UiCurrencyType = UiCurrencyType.QAR, merchant: String = \"Unknown\", category: UiCategoryType = UiCategoryType.ESSENTIAL, paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, recurringType: UiRecurringType = UiRecurringType.ONETIME, paymentDate: Long = System.currentTimeMillis(), dueDate: Long? = null, toBeCancelled: Boolean = false, formattedDate: String = paymentDate.asFormattedDateTime(), navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/-edit-expense-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The expense ID. amount The expense amount. currency The expense currency. merchant The expense merchant. category The expense category. paymentStatus The expense payment status. recurringType The expense recurring type. paymentDate The expense payment date. dueDate The expense due date. toBeCancelled Whether the expense is to be cancelled. formattedDate The formatted payment date. navigateBack The event to navigate back."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/amount/","title":"Amount","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/amount</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double = 0.0</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The expense amount."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/category/","title":"Category","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/category</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/category/#category","title":"category","text":"<p>[androidJvm]\\ val category: UiCategoryType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/category/#parameters","title":"Parameters","text":"<p>androidJvm</p> category The expense category."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/currency/","title":"Currency","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/currency</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/currency/#currency","title":"currency","text":"<p>[androidJvm]\\ val currency: UiCurrencyType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/currency/#parameters","title":"Parameters","text":"<p>androidJvm</p> currency The expense currency."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/due-date/","title":"Due date","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/dueDate</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/due-date/#duedate","title":"dueDate","text":"<p>[androidJvm]\\ val dueDate: Long? = null</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/due-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> dueDate The expense due date."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/formatted-date/","title":"Formatted date","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/formattedDate</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/formatted-date/#formatteddate","title":"formattedDate","text":"<p>[androidJvm]\\ val formattedDate: String</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/formatted-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> formattedDate The formatted payment date."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/id/","title":"Id","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/id</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Long = 0</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The expense ID."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/merchant/","title":"Merchant","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/merchant</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/merchant/#merchant","title":"merchant","text":"<p>[androidJvm]\\ val merchant: String</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/merchant/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The expense merchant."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/navigate-back/","title":"Navigate back","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/navigateBack</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/navigate-back/#navigateback","title":"navigateBack","text":"<p>[androidJvm]\\ val navigateBack: OneTimeEvent&lt;Boolean&gt;</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/navigate-back/#parameters","title":"Parameters","text":"<p>androidJvm</p> navigateBack The event to navigate back."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/payment-date/","title":"Payment date","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/paymentDate</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/payment-date/#paymentdate","title":"paymentDate","text":"<p>[androidJvm]\\ val paymentDate: Long</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> paymentDate The expense payment date."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/payment-status/","title":"Payment status","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/paymentStatus</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/payment-status/#paymentstatus","title":"paymentStatus","text":"<p>[androidJvm]\\ val paymentStatus: UiPaymentStatus</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/payment-status/#parameters","title":"Parameters","text":"<p>androidJvm</p> paymentStatus The expense payment status."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/recurring-type/","title":"Recurring type","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/recurringType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/recurring-type/#recurringtype","title":"recurringType","text":"<p>[androidJvm]\\ val recurringType: UiRecurringType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/recurring-type/#parameters","title":"Parameters","text":"<p>androidJvm</p> recurringType The expense recurring type."},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/to-be-cancelled/","title":"To be cancelled","text":"<p>//app/dev.atick.compose.data.expenses/EditExpenseScreenData/toBeCancelled</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/to-be-cancelled/#tobecancelled","title":"toBeCancelled","text":"<p>[androidJvm]\\ val toBeCancelled: Boolean = false</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-edit-expense-screen-data/to-be-cancelled/#parameters","title":"Parameters","text":"<p>androidJvm</p> toBeCancelled Whether the expense is to be cancelled."},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/ExpensesScreenData</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/#expensesscreendata","title":"ExpensesScreenData","text":"<p>data class ExpensesScreenData(val expenses: List&lt;UiExpense&gt; = emptyList(), val displayMonthYear: String = \"\")</p> <p>Data class representing the expenses screen data.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenses The list of expenses. displayMonthYear The display month and year."},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/#constructors","title":"Constructors","text":"ExpensesScreenData [androidJvm]constructor(expenses: List&lt;UiExpense&gt; = emptyList(), displayMonthYear: String = \"\")"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/#properties","title":"Properties","text":"Name Summary displayMonthYear [androidJvm]val displayMonthYear: String expenses [androidJvm]val expenses: List&lt;UiExpense&gt;"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/-expenses-screen-data/","title":"expenses screen data","text":"<p>//app/dev.atick.compose.data.expenses/ExpensesScreenData/ExpensesScreenData</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/-expenses-screen-data/#expensesscreendata","title":"ExpensesScreenData","text":"<p>[androidJvm]\\ constructor(expenses: List&lt;UiExpense&gt; = emptyList(), displayMonthYear: String = \"\")</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/-expenses-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenses The list of expenses. displayMonthYear The display month and year."},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/display-month-year/","title":"Display month year","text":"<p>//app/dev.atick.compose.data.expenses/ExpensesScreenData/displayMonthYear</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/display-month-year/#displaymonthyear","title":"displayMonthYear","text":"<p>[androidJvm]\\ val displayMonthYear: String</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/display-month-year/#parameters","title":"Parameters","text":"<p>androidJvm</p> displayMonthYear The display month and year."},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/expenses/","title":"Expenses","text":"<p>//app/dev.atick.compose.data.expenses/ExpensesScreenData/expenses</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/expenses/#expenses","title":"expenses","text":"<p>[androidJvm]\\ val expenses: List&lt;UiExpense&gt;</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-expenses-screen-data/expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenses The list of expenses."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/#uicategorytype","title":"UiCategoryType","text":"<p>[androidJvm]\\ enum UiCategoryType : Enum&lt;UiCategoryType&gt; </p> <p>UI category type.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/#entries","title":"Entries","text":"FOOD [androidJvm]FOOD ESSENTIAL [androidJvm]ESSENTIAL LIFESTYLE [androidJvm]LIFESTYLE TRANSPORTATION [androidJvm]TRANSPORTATION HEALTHCARE [androidJvm]HEALTHCARE SAVINGS [androidJvm]SAVINGS DEBT [androidJvm]DEBT EDUCATION [androidJvm]EDUCATION OTHERS [androidJvm]OTHERS"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;UiCategoryType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): UiCategoryTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;UiCategoryType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/entries</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;UiCategoryType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/valueOf</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): UiCategoryType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/value/","title":"Value","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/value</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: Int</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/values/","title":"Values","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/values</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;UiCategoryType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-d-e-b-t/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/DEBT</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-d-e-b-t/#debt","title":"DEBT","text":"<p>[androidJvm]\\ DEBT</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-d-e-b-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-e-d-u-c-a-t-i-o-n/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/EDUCATION</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-e-d-u-c-a-t-i-o-n/#education","title":"EDUCATION","text":"<p>[androidJvm]\\ EDUCATION</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-e-d-u-c-a-t-i-o-n/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-e-s-s-e-n-t-i-a-l/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/ESSENTIAL</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-e-s-s-e-n-t-i-a-l/#essential","title":"ESSENTIAL","text":"<p>[androidJvm]\\ ESSENTIAL</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-e-s-s-e-n-t-i-a-l/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-f-o-o-d/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/FOOD</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-f-o-o-d/#food","title":"FOOD","text":"<p>[androidJvm]\\ FOOD</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-f-o-o-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-h-e-a-l-t-h-c-a-r-e/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/HEALTHCARE</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-h-e-a-l-t-h-c-a-r-e/#healthcare","title":"HEALTHCARE","text":"<p>[androidJvm]\\ HEALTHCARE</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-h-e-a-l-t-h-c-a-r-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-l-i-f-e-s-t-y-l-e/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/LIFESTYLE</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-l-i-f-e-s-t-y-l-e/#lifestyle","title":"LIFESTYLE","text":"<p>[androidJvm]\\ LIFESTYLE</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-l-i-f-e-s-t-y-l-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-o-t-h-e-r-s/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/OTHERS</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-o-t-h-e-r-s/#others","title":"OTHERS","text":"<p>[androidJvm]\\ OTHERS</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-o-t-h-e-r-s/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-s-a-v-i-n-g-s/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/SAVINGS</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-s-a-v-i-n-g-s/#savings","title":"SAVINGS","text":"<p>[androidJvm]\\ SAVINGS</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-s-a-v-i-n-g-s/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-t-r-a-n-s-p-o-r-t-a-t-i-o-n/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCategoryType/TRANSPORTATION</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-t-r-a-n-s-p-o-r-t-a-t-i-o-n/#transportation","title":"TRANSPORTATION","text":"<p>[androidJvm]\\ TRANSPORTATION</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-category-type/-t-r-a-n-s-p-o-r-t-a-t-i-o-n/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/#uicurrencytype","title":"UiCurrencyType","text":"<p>[androidJvm]\\ enum UiCurrencyType : Enum&lt;UiCurrencyType&gt; </p> <p>UI currency type.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/#entries","title":"Entries","text":"QAR [androidJvm]QAR USD [androidJvm]USD EUR [androidJvm]EUR GBP [androidJvm]GBP BDT [androidJvm]BDT"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;UiCurrencyType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): UiCurrencyTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;UiCurrencyType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/entries</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;UiCurrencyType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/valueOf</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): UiCurrencyType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/values/","title":"Values","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/values</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;UiCurrencyType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-b-d-t/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/BDT</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-b-d-t/#bdt","title":"BDT","text":"<p>[androidJvm]\\ BDT</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-b-d-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-e-u-r/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/EUR</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-e-u-r/#eur","title":"EUR","text":"<p>[androidJvm]\\ EUR</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-e-u-r/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-g-b-p/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/GBP</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-g-b-p/#gbp","title":"GBP","text":"<p>[androidJvm]\\ GBP</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-g-b-p/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-q-a-r/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/QAR</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-q-a-r/#qar","title":"QAR","text":"<p>[androidJvm]\\ QAR</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-q-a-r/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-u-s-d/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiCurrencyType/USD</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-u-s-d/#usd","title":"USD","text":"<p>[androidJvm]\\ USD</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-currency-type/-u-s-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/#uiexpense","title":"UiExpense","text":"<p>data class UiExpense(val id: Long = 0, val amount: Double = 0.0, val currency: UiCurrencyType = UiCurrencyType.QAR, val merchant: String = \"Unknown\", val category: UiCategoryType = UiCategoryType.ESSENTIAL, val paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, val recurringType: UiRecurringType = UiRecurringType.ONETIME, val paymentDate: Long = System.currentTimeMillis(), val dueDate: Long? = null, val toBeCancelled: Boolean = false, val formattedDate: String = paymentDate.asFormattedDateTime())</p> <p>Data class representing the UI expense data.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The expense ID. amount The expense amount. currency The currency of the expense. merchant The merchant name. category The category of the expense. paymentStatus The payment status of the expense. recurringType The recurring type of the expense. paymentDate The payment date of the expense. dueDate The due date of the expense. toBeCancelled Whether the expense is to be cancelled. formattedDate The formatted payment date."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/#constructors","title":"Constructors","text":"UiExpense [androidJvm]constructor(id: Long = 0, amount: Double = 0.0, currency: UiCurrencyType = UiCurrencyType.QAR, merchant: String = \"Unknown\", category: UiCategoryType = UiCategoryType.ESSENTIAL, paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, recurringType: UiRecurringType = UiRecurringType.ONETIME, paymentDate: Long = System.currentTimeMillis(), dueDate: Long? = null, toBeCancelled: Boolean = false, formattedDate: String = paymentDate.asFormattedDateTime())"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: Double = 0.0 category [androidJvm]val category: UiCategoryType currency [androidJvm]val currency: UiCurrencyType dueDate [androidJvm]val dueDate: Long? = null formattedDate [androidJvm]val formattedDate: String id [androidJvm]val id: Long = 0 merchant [androidJvm]val merchant: String paymentDate [androidJvm]val paymentDate: Long paymentStatus [androidJvm]val paymentStatus: UiPaymentStatus recurringType [androidJvm]val recurringType: UiRecurringType toBeCancelled [androidJvm]val toBeCancelled: Boolean = false"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/#functions","title":"Functions","text":"Name Summary toEditableExpense [androidJvm]fun UiExpense.toEditableExpense(): EditExpenseScreenDataConverts a ExpenseEntity to a UiExpense. toExpenseEntity [androidJvm]fun UiExpense.toExpenseEntity(): ExpenseEntityConverts a ExpenseEntity to a UiExpense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/-ui-expense/","title":"ui expense","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/UiExpense</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/-ui-expense/#uiexpense","title":"UiExpense","text":"<p>[androidJvm]\\ constructor(id: Long = 0, amount: Double = 0.0, currency: UiCurrencyType = UiCurrencyType.QAR, merchant: String = \"Unknown\", category: UiCategoryType = UiCategoryType.ESSENTIAL, paymentStatus: UiPaymentStatus = UiPaymentStatus.PENDING, recurringType: UiRecurringType = UiRecurringType.ONETIME, paymentDate: Long = System.currentTimeMillis(), dueDate: Long? = null, toBeCancelled: Boolean = false, formattedDate: String = paymentDate.asFormattedDateTime())</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/-ui-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The expense ID. amount The expense amount. currency The currency of the expense. merchant The merchant name. category The category of the expense. paymentStatus The payment status of the expense. recurringType The recurring type of the expense. paymentDate The payment date of the expense. dueDate The due date of the expense. toBeCancelled Whether the expense is to be cancelled. formattedDate The formatted payment date."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/amount/","title":"Amount","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/amount</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double = 0.0</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/amount/#parameters","title":"Parameters","text":"<p>androidJvm</p> amount The expense amount."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/category/","title":"Category","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/category</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/category/#category","title":"category","text":"<p>[androidJvm]\\ val category: UiCategoryType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/category/#parameters","title":"Parameters","text":"<p>androidJvm</p> category The category of the expense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/currency/","title":"Currency","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/currency</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/currency/#currency","title":"currency","text":"<p>[androidJvm]\\ val currency: UiCurrencyType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/currency/#parameters","title":"Parameters","text":"<p>androidJvm</p> currency The currency of the expense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/due-date/","title":"Due date","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/dueDate</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/due-date/#duedate","title":"dueDate","text":"<p>[androidJvm]\\ val dueDate: Long? = null</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/due-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> dueDate The due date of the expense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/formatted-date/","title":"Formatted date","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/formattedDate</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/formatted-date/#formatteddate","title":"formattedDate","text":"<p>[androidJvm]\\ val formattedDate: String</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/formatted-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> formattedDate The formatted payment date."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/id/","title":"Id","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/id</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Long = 0</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The expense ID."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/merchant/","title":"Merchant","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/merchant</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/merchant/#merchant","title":"merchant","text":"<p>[androidJvm]\\ val merchant: String</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/merchant/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant name."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/payment-date/","title":"Payment date","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/paymentDate</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/payment-date/#paymentdate","title":"paymentDate","text":"<p>[androidJvm]\\ val paymentDate: Long</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> paymentDate The payment date of the expense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/payment-status/","title":"Payment status","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/paymentStatus</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/payment-status/#paymentstatus","title":"paymentStatus","text":"<p>[androidJvm]\\ val paymentStatus: UiPaymentStatus</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/payment-status/#parameters","title":"Parameters","text":"<p>androidJvm</p> paymentStatus The payment status of the expense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/recurring-type/","title":"Recurring type","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/recurringType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/recurring-type/#recurringtype","title":"recurringType","text":"<p>[androidJvm]\\ val recurringType: UiRecurringType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/recurring-type/#parameters","title":"Parameters","text":"<p>androidJvm</p> recurringType The recurring type of the expense."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/to-be-cancelled/","title":"To be cancelled","text":"<p>//app/dev.atick.compose.data.expenses/UiExpense/toBeCancelled</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/to-be-cancelled/#tobecancelled","title":"toBeCancelled","text":"<p>[androidJvm]\\ val toBeCancelled: Boolean = false</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-expense/to-be-cancelled/#parameters","title":"Parameters","text":"<p>androidJvm</p> toBeCancelled Whether the expense is to be cancelled."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/#uipaymentstatus","title":"UiPaymentStatus","text":"<p>[androidJvm]\\ enum UiPaymentStatus : Enum&lt;UiPaymentStatus&gt; </p> <p>UI payment status.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/#entries","title":"Entries","text":"PENDING [androidJvm]PENDING PAID [androidJvm]PAID OVERDUE [androidJvm]OVERDUE CANCELLED [androidJvm]CANCELLED"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;UiPaymentStatus&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): UiPaymentStatusReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;UiPaymentStatus&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/entries</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;UiPaymentStatus&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/valueOf</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): UiPaymentStatus</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/value/","title":"Value","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/value</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: Int</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/values/","title":"Values","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/values</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;UiPaymentStatus&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-c-a-n-c-e-l-l-e-d/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/CANCELLED</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-c-a-n-c-e-l-l-e-d/#cancelled","title":"CANCELLED","text":"<p>[androidJvm]\\ CANCELLED</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-c-a-n-c-e-l-l-e-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-o-v-e-r-d-u-e/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/OVERDUE</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-o-v-e-r-d-u-e/#overdue","title":"OVERDUE","text":"<p>[androidJvm]\\ OVERDUE</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-o-v-e-r-d-u-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-p-a-i-d/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/PAID</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-p-a-i-d/#paid","title":"PAID","text":"<p>[androidJvm]\\ PAID</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-p-a-i-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-p-e-n-d-i-n-g/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiPaymentStatus/PENDING</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-p-e-n-d-i-n-g/#pending","title":"PENDING","text":"<p>[androidJvm]\\ PENDING</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-payment-status/-p-e-n-d-i-n-g/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/#uirecurringtype","title":"UiRecurringType","text":"<p>[androidJvm]\\ enum UiRecurringType : Enum&lt;UiRecurringType&gt; </p> <p>UI recurring type.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/#entries","title":"Entries","text":"ONETIME [androidJvm]ONETIME DAILY [androidJvm]DAILY WEEKLY [androidJvm]WEEKLY MONTHLY [androidJvm]MONTHLY YEARLY [androidJvm]YEARLY"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;UiRecurringType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): UiRecurringTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;UiRecurringType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/entries</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;UiRecurringType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/valueOf</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): UiRecurringType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/value/","title":"Value","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/value</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: Int</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/values/","title":"Values","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/values</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;UiRecurringType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-d-a-i-l-y/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/DAILY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-d-a-i-l-y/#daily","title":"DAILY","text":"<p>[androidJvm]\\ DAILY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-d-a-i-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-m-o-n-t-h-l-y/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/MONTHLY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-m-o-n-t-h-l-y/#monthly","title":"MONTHLY","text":"<p>[androidJvm]\\ MONTHLY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-m-o-n-t-h-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-o-n-e-t-i-m-e/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/ONETIME</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-o-n-e-t-i-m-e/#onetime","title":"ONETIME","text":"<p>[androidJvm]\\ ONETIME</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-o-n-e-t-i-m-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-w-e-e-k-l-y/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/WEEKLY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-w-e-e-k-l-y/#weekly","title":"WEEKLY","text":"<p>[androidJvm]\\ WEEKLY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-w-e-e-k-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-y-e-a-r-l-y/","title":"Index","text":"<p>//app/dev.atick.compose.data.expenses/UiRecurringType/YEARLY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-y-e-a-r-l-y/#yearly","title":"YEARLY","text":"<p>[androidJvm]\\ YEARLY</p>"},{"location":"app/app/dev.atick.compose.data.expenses/-ui-recurring-type/-y-e-a-r-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int value [androidJvm]val value: Int"},{"location":"app/app/dev.atick.compose.data.settings/","title":"Index","text":"<p>//app/dev.atick.compose.data.settings</p>"},{"location":"app/app/dev.atick.compose.data.settings/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.settings/#types","title":"Types","text":"Name Summary Language [androidJvm]enum Language : Enum&lt;Language&gt; Enum class representing the supported languages. UserEditableSettings [androidJvm]data class UserEditableSettings(val language: String = Language.ENGLISH.code, val brand: ThemeBrand = ThemeBrand.DEFAULT, val useDynamicColor: Boolean = true, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)Data class representing editable user settings related to themes and appearance."},{"location":"app/app/dev.atick.compose.data.settings/-language/","title":"Index","text":"<p>//app/dev.atick.compose.data.settings/Language</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/#language","title":"Language","text":"<p>[androidJvm]\\ enum Language : Enum&lt;Language&gt; </p> <p>Enum class representing the supported languages.</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/#entries","title":"Entries","text":"ENGLISH [androidJvm]ENGLISH ARABIC [androidJvm]ARABIC"},{"location":"app/app/dev.atick.compose.data.settings/-language/#properties","title":"Properties","text":"Name Summary code [androidJvm]val code: StringThe language code. entries [androidJvm]val entries: EnumEntries&lt;Language&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. icon [androidJvm]val icon: ImageVectorThe icon for the language. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int title [androidJvm]val title: IntThe string resource id for the language title."},{"location":"app/app/dev.atick.compose.data.settings/-language/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): LanguageReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;Language&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.data.settings/-language/code/","title":"Code","text":"<p>//app/dev.atick.compose.data.settings/Language/code</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/code/#code","title":"code","text":"<p>[androidJvm]\\ val code: String</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.data.settings/Language/entries</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;Language&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/icon/","title":"Icon","text":"<p>//app/dev.atick.compose.data.settings/Language/icon</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/icon/#icon","title":"icon","text":"<p>[androidJvm]\\ val icon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/title/","title":"Title","text":"<p>//app/dev.atick.compose.data.settings/Language/title</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: Int</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.data.settings/Language/valueOf</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): Language</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.data.settings/-language/values/","title":"Values","text":"<p>//app/dev.atick.compose.data.settings/Language/values</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;Language&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/-a-r-a-b-i-c/","title":"Index","text":"<p>//app/dev.atick.compose.data.settings/Language/ARABIC</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/-a-r-a-b-i-c/#arabic","title":"ARABIC","text":"<p>[androidJvm]\\ ARABIC</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/-a-r-a-b-i-c/#properties","title":"Properties","text":"Name Summary code [androidJvm]val code: StringThe language code. icon [androidJvm]val icon: ImageVectorThe icon for the language. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int title [androidJvm]val title: IntThe string resource id for the language title."},{"location":"app/app/dev.atick.compose.data.settings/-language/-e-n-g-l-i-s-h/","title":"Index","text":"<p>//app/dev.atick.compose.data.settings/Language/ENGLISH</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/-e-n-g-l-i-s-h/#english","title":"ENGLISH","text":"<p>[androidJvm]\\ ENGLISH</p>"},{"location":"app/app/dev.atick.compose.data.settings/-language/-e-n-g-l-i-s-h/#properties","title":"Properties","text":"Name Summary code [androidJvm]val code: StringThe language code. icon [androidJvm]val icon: ImageVectorThe icon for the language. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int title [androidJvm]val title: IntThe string resource id for the language title."},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/","title":"Index","text":"<p>//app/dev.atick.compose.data.settings/UserEditableSettings</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/#usereditablesettings","title":"UserEditableSettings","text":"<p>[androidJvm]\\ data class UserEditableSettings(val language: String = Language.ENGLISH.code, val brand: ThemeBrand = ThemeBrand.DEFAULT, val useDynamicColor: Boolean = true, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)</p> <p>Data class representing editable user settings related to themes and appearance.</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/#constructors","title":"Constructors","text":"UserEditableSettings [androidJvm]constructor(language: String = Language.ENGLISH.code, brand: ThemeBrand = ThemeBrand.DEFAULT, useDynamicColor: Boolean = true, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)Creates a UserEditableSettings instance with optional parameters."},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/#properties","title":"Properties","text":"Name Summary brand [androidJvm]val brand: ThemeBrandThe selected brand for the theme. darkThemeConfig [androidJvm]val darkThemeConfig: DarkThemeConfigConfiguration for the dark theme. language [androidJvm]val language: StringThe preferred ui language. useDynamicColor [androidJvm]val useDynamicColor: Boolean = trueIndicates whether dynamic colors are enabled."},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/-user-editable-settings/","title":"user editable settings","text":"<p>//app/dev.atick.compose.data.settings/UserEditableSettings/UserEditableSettings</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/-user-editable-settings/#usereditablesettings","title":"UserEditableSettings","text":"<p>[androidJvm]\\ constructor(language: String = Language.ENGLISH.code, brand: ThemeBrand = ThemeBrand.DEFAULT, useDynamicColor: Boolean = true, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)</p> <p>Creates a UserEditableSettings instance with optional parameters.</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/brand/","title":"Brand","text":"<p>//app/dev.atick.compose.data.settings/UserEditableSettings/brand</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/brand/#brand","title":"brand","text":"<p>[androidJvm]\\ val brand: ThemeBrand</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/dark-theme-config/","title":"Dark theme config","text":"<p>//app/dev.atick.compose.data.settings/UserEditableSettings/darkThemeConfig</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/dark-theme-config/#darkthemeconfig","title":"darkThemeConfig","text":"<p>[androidJvm]\\ val darkThemeConfig: DarkThemeConfig</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/language/","title":"Language","text":"<p>//app/dev.atick.compose.data.settings/UserEditableSettings/language</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/language/#language","title":"language","text":"<p>[androidJvm]\\ val language: String</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/use-dynamic-color/","title":"Use dynamic color","text":"<p>//app/dev.atick.compose.data.settings/UserEditableSettings/useDynamicColor</p>"},{"location":"app/app/dev.atick.compose.data.settings/-user-editable-settings/use-dynamic-color/#usedynamiccolor","title":"useDynamicColor","text":"<p>[androidJvm]\\ val useDynamicColor: Boolean = true</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/","title":"Index","text":"<p>//app/dev.atick.compose.data.subscriptions</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.subscriptions/#types","title":"Types","text":"Name Summary SubscriptionsScreenData [androidJvm]data class SubscriptionsScreenData(val subscriptions: List&lt;UiExpense&gt; = emptyList())Data class representing the subscriptions screen data."},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.subscriptions/SubscriptionsScreenData</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/#subscriptionsscreendata","title":"SubscriptionsScreenData","text":"<p>data class SubscriptionsScreenData(val subscriptions: List&lt;UiExpense&gt; = emptyList())</p> <p>Data class representing the subscriptions screen data.</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> subscriptions The list of subscriptions."},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/#constructors","title":"Constructors","text":"SubscriptionsScreenData [androidJvm]constructor(subscriptions: List&lt;UiExpense&gt; = emptyList())"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/#properties","title":"Properties","text":"Name Summary subscriptions [androidJvm]val subscriptions: List&lt;UiExpense&gt;"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/-subscriptions-screen-data/","title":"subscriptions screen data","text":"<p>//app/dev.atick.compose.data.subscriptions/SubscriptionsScreenData/SubscriptionsScreenData</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/-subscriptions-screen-data/#subscriptionsscreendata","title":"SubscriptionsScreenData","text":"<p>[androidJvm]\\ constructor(subscriptions: List&lt;UiExpense&gt; = emptyList())</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/-subscriptions-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> subscriptions The list of subscriptions."},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/subscriptions/","title":"Subscriptions","text":"<p>//app/dev.atick.compose.data.subscriptions/SubscriptionsScreenData/subscriptions</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/subscriptions/#subscriptions","title":"subscriptions","text":"<p>[androidJvm]\\ val subscriptions: List&lt;UiExpense&gt;</p>"},{"location":"app/app/dev.atick.compose.data.subscriptions/-subscriptions-screen-data/subscriptions/#parameters","title":"Parameters","text":"<p>androidJvm</p> subscriptions The list of subscriptions."},{"location":"app/app/dev.atick.compose.di.repository/","title":"Index","text":"<p>//app/dev.atick.compose.di.repository</p>"},{"location":"app/app/dev.atick.compose.di.repository/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.di.repository/#types","title":"Types","text":"Name Summary RepositoryModule [androidJvm]@Moduleabstract class RepositoryModuleDagger module that provides the binding for repository interfaces."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/","title":"Index","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class RepositoryModule</p> <p>Dagger module that provides the binding for repository interfaces.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/#constructors","title":"Constructors","text":"RepositoryModule [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/#functions","title":"Functions","text":"Name Summary bindAnalysisRepository [androidJvm]@Binds@Singletonabstract fun bindAnalysisRepository(analysisRepositoryImpl: AnalysisRepositoryImpl): AnalysisRepositoryBinds the AnalysisRepositoryImpl implementation to the AnalysisRepository interface. bindBudgetsRepository [androidJvm]@Binds@Singletonabstract fun bindBudgetsRepository(budgetsRepositoryImpl: BudgetsRepositoryImpl): BudgetsRepositoryBinds the BudgetsRepositoryImpl implementation to the BudgetsRepository interface. bindCategoriesRepository [androidJvm]@Binds@Singletonabstract fun bindCategoriesRepository(subscriptionRepositoryImpl: SubscriptionsRepositoryImpl): SubscriptionsRepositoryBinds the SubscriptionsRepositoryImpl implementation to the SubscriptionsRepository interface. bindChatRepository [androidJvm]@Binds@Singletonabstract fun bindChatRepository(chatRepositoryImpl: ChatRepositoryImpl): ChatRepositoryBinds the ChatRepositoryImpl implementation to the ChatRepository interface. bindExpensesRepository [androidJvm]@Binds@Singletonabstract fun bindExpensesRepository(expensesRepositoryImpl: ExpensesRepositoryImpl): ExpensesRepositoryBinds the ExpensesRepositoryImpl implementation to the ExpensesRepository interface. bindUserDataRepository [androidJvm]@Binds@Singletonabstract fun bindUserDataRepository(userDataRepositoryImpl: UserDataRepositoryImpl): UserDataRepositoryBinds the UserDataRepositoryImpl implementation to the UserDataRepository interface."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/-repository-module/","title":"repository module","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/RepositoryModule</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-analysis-repository/","title":"Bind analysis repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindAnalysisRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-analysis-repository/#bindanalysisrepository","title":"bindAnalysisRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindAnalysisRepository(analysisRepositoryImpl: AnalysisRepositoryImpl): AnalysisRepository</p> <p>Binds the AnalysisRepositoryImpl implementation to the AnalysisRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-analysis-repository/#return","title":"Return","text":"<p>The AnalysisRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-analysis-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> analysisRepositoryImpl The implementation of AnalysisRepository to be bound."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-budgets-repository/","title":"Bind budgets repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindBudgetsRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-budgets-repository/#bindbudgetsrepository","title":"bindBudgetsRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindBudgetsRepository(budgetsRepositoryImpl: BudgetsRepositoryImpl): BudgetsRepository</p> <p>Binds the BudgetsRepositoryImpl implementation to the BudgetsRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-budgets-repository/#return","title":"Return","text":"<p>The BudgetsRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-budgets-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetsRepositoryImpl The implementation of BudgetsRepository to be bound."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-categories-repository/","title":"Bind categories repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindCategoriesRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-categories-repository/#bindcategoriesrepository","title":"bindCategoriesRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindCategoriesRepository(subscriptionRepositoryImpl: SubscriptionsRepositoryImpl): SubscriptionsRepository</p> <p>Binds the SubscriptionsRepositoryImpl implementation to the SubscriptionsRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-categories-repository/#return","title":"Return","text":"<p>The SubscriptionsRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-categories-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> subscriptionRepositoryImpl The implementation of SubscriptionsRepository to be bound."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-chat-repository/","title":"Bind chat repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindChatRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-chat-repository/#bindchatrepository","title":"bindChatRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindChatRepository(chatRepositoryImpl: ChatRepositoryImpl): ChatRepository</p> <p>Binds the ChatRepositoryImpl implementation to the ChatRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-chat-repository/#return","title":"Return","text":"<p>The ChatRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-chat-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatRepositoryImpl The implementation of ChatRepository to be bound."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-expenses-repository/","title":"Bind expenses repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindExpensesRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-expenses-repository/#bindexpensesrepository","title":"bindExpensesRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindExpensesRepository(expensesRepositoryImpl: ExpensesRepositoryImpl): ExpensesRepository</p> <p>Binds the ExpensesRepositoryImpl implementation to the ExpensesRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-expenses-repository/#return","title":"Return","text":"<p>The ExpensesRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-expenses-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> expensesRepositoryImpl The implementation of ExpensesRepository to be bound."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-user-data-repository/","title":"Bind user data repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindUserDataRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-user-data-repository/#binduserdatarepository","title":"bindUserDataRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindUserDataRepository(userDataRepositoryImpl: UserDataRepositoryImpl): UserDataRepository</p> <p>Binds the UserDataRepositoryImpl implementation to the UserDataRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-user-data-repository/#return","title":"Return","text":"<p>The UserDataRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-user-data-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> userDataRepositoryImpl The implementation of UserDataRepository to be bound."},{"location":"app/app/dev.atick.compose.di.task/","title":"Index","text":"<p>//app/dev.atick.compose.di.task</p>"},{"location":"app/app/dev.atick.compose.di.task/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.di.task/#types","title":"Types","text":"Name Summary TaskModule [androidJvm]@Moduleabstract class TaskModuleDagger module that provides the binding for the TaskManager interface."},{"location":"app/app/dev.atick.compose.di.task/-task-module/","title":"Index","text":"<p>//app/dev.atick.compose.di.task/TaskModule</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/#taskmodule","title":"TaskModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class TaskModule</p> <p>Dagger module that provides the binding for the TaskManager interface.</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/#constructors","title":"Constructors","text":"TaskModule [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose.di.task/-task-module/#functions","title":"Functions","text":"Name Summary bindTaskManager [androidJvm]@Binds@Singletonabstract fun bindTaskManager(taskManagerImpl: TaskManagerImpl): TaskManagerBinds the TaskManagerImpl implementation to the TaskManager interface."},{"location":"app/app/dev.atick.compose.di.task/-task-module/-task-module/","title":"task module","text":"<p>//app/dev.atick.compose.di.task/TaskModule/TaskModule</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/-task-module/#taskmodule","title":"TaskModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/bind-task-manager/","title":"Bind task manager","text":"<p>//app/dev.atick.compose.di.task/TaskModule/bindTaskManager</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/bind-task-manager/#bindtaskmanager","title":"bindTaskManager","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindTaskManager(taskManagerImpl: TaskManagerImpl): TaskManager</p> <p>Binds the TaskManagerImpl implementation to the TaskManager interface.</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/bind-task-manager/#return","title":"Return","text":"<p>The TaskManager interface.</p>"},{"location":"app/app/dev.atick.compose.di.task/-task-module/bind-task-manager/#parameters","title":"Parameters","text":"<p>androidJvm</p> taskManagerImpl The implementation of TaskManager to be bound."},{"location":"app/app/dev.atick.compose.navigation/","title":"Index","text":"<p>//app/dev.atick.compose.navigation</p>"},{"location":"app/app/dev.atick.compose.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation/#types","title":"Types","text":"Name Summary TopLevelDestination [androidJvm]enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; Enum class representing top-level destinations in a navigation system."},{"location":"app/app/dev.atick.compose.navigation/#functions","title":"Functions","text":"Name Summary JetpackNavHost [androidJvm]@Composablefun JetpackNavHost(appState: JetpackAppState, monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean, modifier: Modifier = Modifier)Builds the App NavHost."},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/","title":"jetpack nav host","text":"<p>//app/dev.atick.compose.navigation/JetpackNavHost</p>"},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/#jetpacknavhost","title":"JetpackNavHost","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavHost(appState: JetpackAppState, monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean, modifier: Modifier = Modifier)</p> <p>Builds the App NavHost.</p>"},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/#parameters","title":"Parameters","text":"<p>androidJvm</p> appState The Jetpack app state. monthInfo The month information. onShowSnackbar The callback to show a snackbar. modifier The modifier."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#topleveldestination","title":"TopLevelDestination","text":"<p>[androidJvm]\\ enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; </p> <p>Enum class representing top-level destinations in a navigation system.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#entries","title":"Entries","text":"EXPENSES [androidJvm]EXPENSES ANALYSIS [androidJvm]ANALYSIS BUDGETS [androidJvm]BUDGETS SUBSCRIPTIONS [androidJvm]SUBSCRIPTIONS CHAT [androidJvm]CHAT"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;TopLevelDestination&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): TopLevelDestinationReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;TopLevelDestination&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/entries</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;TopLevelDestination&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/icon-text-id/","title":"Icon text id","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/iconTextId</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/icon-text-id/#icontextid","title":"iconTextId","text":"<p>[androidJvm]\\ val iconTextId: Int</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/route/","title":"Route","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/route</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/route/#route","title":"route","text":"<p>[androidJvm]\\ val route: KClass&lt;*&gt;</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/selected-icon/","title":"Selected icon","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/selectedIcon</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/selected-icon/#selectedicon","title":"selectedIcon","text":"<p>[androidJvm]\\ val selectedIcon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/title-text-id/","title":"Title text id","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/titleTextId</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/title-text-id/#titletextid","title":"titleTextId","text":"<p>[androidJvm]\\ val titleTextId: Int</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/unselected-icon/","title":"Unselected icon","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/unselectedIcon</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/unselected-icon/#unselectedicon","title":"unselectedIcon","text":"<p>[androidJvm]\\ val unselectedIcon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/valueOf</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): TopLevelDestination</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/values/","title":"Values","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/values</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;TopLevelDestination&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-a-n-a-l-y-s-i-s/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/ANALYSIS</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-a-n-a-l-y-s-i-s/#analysis","title":"ANALYSIS","text":"<p>[androidJvm]\\ ANALYSIS</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-a-n-a-l-y-s-i-s/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-b-u-d-g-e-t-s/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/BUDGETS</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-b-u-d-g-e-t-s/#budgets","title":"BUDGETS","text":"<p>[androidJvm]\\ BUDGETS</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-b-u-d-g-e-t-s/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-c-h-a-t/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/CHAT</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-c-h-a-t/#chat","title":"CHAT","text":"<p>[androidJvm]\\ CHAT</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-c-h-a-t/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-e-x-p-e-n-s-e-s/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/EXPENSES</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-e-x-p-e-n-s-e-s/#expenses","title":"EXPENSES","text":"<p>[androidJvm]\\ EXPENSES</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-e-x-p-e-n-s-e-s/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-s-u-b-s-c-r-i-p-t-i-o-n-s/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/SUBSCRIPTIONS</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-s-u-b-s-c-r-i-p-t-i-o-n-s/#subscriptions","title":"SUBSCRIPTIONS","text":"<p>[androidJvm]\\ SUBSCRIPTIONS</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-s-u-b-s-c-r-i-p-t-i-o-n-s/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation.analysis/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.analysis</p>"},{"location":"app/app/dev.atick.compose.navigation.analysis/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.analysis/#types","title":"Types","text":"Name Summary Analysis [androidJvm]@Serializabledata object AnalysisRepresents the analysis route."},{"location":"app/app/dev.atick.compose.navigation.analysis/#functions","title":"Functions","text":"Name Summary analysisScreen [androidJvm]fun NavGraphBuilder.analysisScreen(monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean)Builds the analysis screen. navigateToAnalysis [androidJvm]fun NavController.navigateToAnalysis(navOptions: NavOptions?)Navigates to the analysis screen."},{"location":"app/app/dev.atick.compose.navigation.analysis/analysis-screen/","title":"Analysis screen","text":"<p>//app/dev.atick.compose.navigation.analysis/analysisScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.analysis/analysis-screen/#analysisscreen","title":"analysisScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.analysisScreen(monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Builds the analysis screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.analysis/analysis-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information. onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.analysis/navigate-to-analysis/","title":"Navigate to analysis","text":"<p>//app/dev.atick.compose.navigation.analysis/navigateToAnalysis</p>"},{"location":"app/app/dev.atick.compose.navigation.analysis/navigate-to-analysis/#navigatetoanalysis","title":"navigateToAnalysis","text":"<p>[androidJvm]\\ fun NavController.navigateToAnalysis(navOptions: NavOptions?)</p> <p>Navigates to the analysis screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.analysis/navigate-to-analysis/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions The navigation options."},{"location":"app/app/dev.atick.compose.navigation.analysis/-analysis/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.analysis/Analysis</p>"},{"location":"app/app/dev.atick.compose.navigation.analysis/-analysis/#analysis","title":"Analysis","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Analysis</p> <p>Represents the analysis route.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.budgets</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.budgets/#types","title":"Types","text":"Name Summary Budgets [androidJvm]@Serializabledata object BudgetsRepresents the budgets route. BudgetsNavGraph [androidJvm]@Serializabledata object BudgetsNavGraphRepresents the budgets navigation graph. EditBudget [androidJvm]@Serializabledata object EditBudgetRepresents the edit budget route."},{"location":"app/app/dev.atick.compose.navigation.budgets/#functions","title":"Functions","text":"Name Summary budgetsNavGraph [androidJvm]fun NavGraphBuilder.budgetsNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)Builds the budgets navigation graph. budgetsScreen [androidJvm]fun NavGraphBuilder.budgetsScreen(monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean)Navigates to the budgets screen. editBudgetScreen [androidJvm]fun NavGraphBuilder.editBudgetScreen(monthInfo: MonthInfo, onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)Builds the edit budget screen. navigateToBudgetsNavGraph [androidJvm]fun NavController.navigateToBudgetsNavGraph(navOptions: NavOptions? = null)Navigates to the budgets navigation graph. navigateToEditBudgetScreen [androidJvm]fun NavController.navigateToEditBudgetScreen()Navigates to the edit budget screen."},{"location":"app/app/dev.atick.compose.navigation.budgets/budgets-nav-graph/","title":"Budgets nav graph","text":"<p>//app/dev.atick.compose.navigation.budgets/budgetsNavGraph</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/budgets-nav-graph/#budgetsnavgraph","title":"budgetsNavGraph","text":"<p>[androidJvm]\\ fun NavGraphBuilder.budgetsNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)</p> <p>Builds the budgets navigation graph.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/budgets-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> nestedNavGraphs The nested navigation graphs."},{"location":"app/app/dev.atick.compose.navigation.budgets/budgets-screen/","title":"Budgets screen","text":"<p>//app/dev.atick.compose.navigation.budgets/budgetsScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/budgets-screen/#budgetsscreen","title":"budgetsScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.budgetsScreen(monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Navigates to the budgets screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/budgets-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information. onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.budgets/edit-budget-screen/","title":"Edit budget screen","text":"<p>//app/dev.atick.compose.navigation.budgets/editBudgetScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/edit-budget-screen/#editbudgetscreen","title":"editBudgetScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.editBudgetScreen(monthInfo: MonthInfo, onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Builds the edit budget screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/edit-budget-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information. onBackClick The callback to handle the back click. onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.budgets/navigate-to-budgets-nav-graph/","title":"Navigate to budgets nav graph","text":"<p>//app/dev.atick.compose.navigation.budgets/navigateToBudgetsNavGraph</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/navigate-to-budgets-nav-graph/#navigatetobudgetsnavgraph","title":"navigateToBudgetsNavGraph","text":"<p>[androidJvm]\\ fun NavController.navigateToBudgetsNavGraph(navOptions: NavOptions? = null)</p> <p>Navigates to the budgets navigation graph.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/navigate-to-budgets-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions The navigation options."},{"location":"app/app/dev.atick.compose.navigation.budgets/navigate-to-edit-budget-screen/","title":"Navigate to edit budget screen","text":"<p>//app/dev.atick.compose.navigation.budgets/navigateToEditBudgetScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/navigate-to-edit-budget-screen/#navigatetoeditbudgetscreen","title":"navigateToEditBudgetScreen","text":"<p>[androidJvm]\\ fun NavController.navigateToEditBudgetScreen()</p> <p>Navigates to the edit budget screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/-budgets/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.budgets/Budgets</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/-budgets/#budgets","title":"Budgets","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Budgets</p> <p>Represents the budgets route.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/-budgets-nav-graph/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.budgets/BudgetsNavGraph</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/-budgets-nav-graph/#budgetsnavgraph","title":"BudgetsNavGraph","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object BudgetsNavGraph</p> <p>Represents the budgets navigation graph.</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/-edit-budget/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.budgets/EditBudget</p>"},{"location":"app/app/dev.atick.compose.navigation.budgets/-edit-budget/#editbudget","title":"EditBudget","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object EditBudget</p> <p>Represents the edit budget route.</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.chat</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.chat/#types","title":"Types","text":"Name Summary Chat [androidJvm]@Serializabledata object ChatRepresents the chat route."},{"location":"app/app/dev.atick.compose.navigation.chat/#functions","title":"Functions","text":"Name Summary chatScreen [androidJvm]fun NavGraphBuilder.chatScreen(monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean)Builds the chat screen. navigateToChat [androidJvm]fun NavController.navigateToChat(navOptions: NavOptions?)Navigates to the chat screen."},{"location":"app/app/dev.atick.compose.navigation.chat/chat-screen/","title":"Chat screen","text":"<p>//app/dev.atick.compose.navigation.chat/chatScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/chat-screen/#chatscreen","title":"chatScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.chatScreen(monthInfo: MonthInfo, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Builds the chat screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/chat-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information. onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.chat/navigate-to-chat/","title":"Navigate to chat","text":"<p>//app/dev.atick.compose.navigation.chat/navigateToChat</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/navigate-to-chat/#navigatetochat","title":"navigateToChat","text":"<p>[androidJvm]\\ fun NavController.navigateToChat(navOptions: NavOptions?)</p> <p>Navigates to the chat screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/navigate-to-chat/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions The navigation options."},{"location":"app/app/dev.atick.compose.navigation.chat/-chat/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.chat/Chat</p>"},{"location":"app/app/dev.atick.compose.navigation.chat/-chat/#chat","title":"Chat","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Chat</p> <p>Represents the chat route.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.expenses</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.expenses/#types","title":"Types","text":"Name Summary EditExpense [androidJvm]@Serializabledata class EditExpense(val expenseId: Long)Represents the edit expense route. Expenses [androidJvm]@Serializabledata object ExpensesRepresents the expenses route. ExpensesNavGraph [androidJvm]@Serializabledata object ExpensesNavGraphRepresents the expenses navigation graph."},{"location":"app/app/dev.atick.compose.navigation.expenses/#functions","title":"Functions","text":"Name Summary editExpenseScreen [androidJvm]fun NavGraphBuilder.editExpenseScreen(onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)Builds the edit expense screen. expensesNavGraph [androidJvm]fun NavGraphBuilder.expensesNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)Builds the expenses navigation graph. expensesScreen [androidJvm]fun NavGraphBuilder.expensesScreen(monthInfo: MonthInfo, onExpenseClick: (Long) -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)Navigates to the expenses screen. navigateToEditExpenseScreen [androidJvm]fun NavController.navigateToEditExpenseScreen(expenseId: Long)Navigates to the edit expense screen. navigateToExpensesNavGraph [androidJvm]fun NavController.navigateToExpensesNavGraph(navOptions: NavOptions? = null)Navigates to the expenses navigation graph."},{"location":"app/app/dev.atick.compose.navigation.expenses/edit-expense-screen/","title":"Edit expense screen","text":"<p>//app/dev.atick.compose.navigation.expenses/editExpenseScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/edit-expense-screen/#editexpensescreen","title":"editExpenseScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.editExpenseScreen(onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Builds the edit expense screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/edit-expense-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onBackClick The callback to handle the back click. onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.expenses/expenses-nav-graph/","title":"Expenses nav graph","text":"<p>//app/dev.atick.compose.navigation.expenses/expensesNavGraph</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/expenses-nav-graph/#expensesnavgraph","title":"expensesNavGraph","text":"<p>[androidJvm]\\ fun NavGraphBuilder.expensesNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)</p> <p>Builds the expenses navigation graph.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/expenses-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> nestedNavGraphs The nested navigation graphs."},{"location":"app/app/dev.atick.compose.navigation.expenses/expenses-screen/","title":"Expenses screen","text":"<p>//app/dev.atick.compose.navigation.expenses/expensesScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/expenses-screen/#expensesscreen","title":"expensesScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.expensesScreen(monthInfo: MonthInfo, onExpenseClick: (Long) -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Navigates to the expenses screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/expenses-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information. onExpenseClick The callback to handle the expense click. onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.expenses/navigate-to-edit-expense-screen/","title":"Navigate to edit expense screen","text":"<p>//app/dev.atick.compose.navigation.expenses/navigateToEditExpenseScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/navigate-to-edit-expense-screen/#navigatetoeditexpensescreen","title":"navigateToEditExpenseScreen","text":"<p>[androidJvm]\\ fun NavController.navigateToEditExpenseScreen(expenseId: Long)</p> <p>Navigates to the edit expense screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/navigate-to-edit-expense-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseId The expense ID."},{"location":"app/app/dev.atick.compose.navigation.expenses/navigate-to-expenses-nav-graph/","title":"Navigate to expenses nav graph","text":"<p>//app/dev.atick.compose.navigation.expenses/navigateToExpensesNavGraph</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/navigate-to-expenses-nav-graph/#navigatetoexpensesnavgraph","title":"navigateToExpensesNavGraph","text":"<p>[androidJvm]\\ fun NavController.navigateToExpensesNavGraph(navOptions: NavOptions? = null)</p> <p>Navigates to the expenses navigation graph.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/navigate-to-expenses-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions The navigation options."},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.expenses/EditExpense</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/#editexpense","title":"EditExpense","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class EditExpense(val expenseId: Long)</p> <p>Represents the edit expense route.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/#constructors","title":"Constructors","text":"EditExpense [androidJvm]constructor(expenseId: Long)"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/#properties","title":"Properties","text":"Name Summary expenseId [androidJvm]val expenseId: Long"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/-edit-expense/","title":"edit expense","text":"<p>//app/dev.atick.compose.navigation.expenses/EditExpense/EditExpense</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/-edit-expense/#editexpense","title":"EditExpense","text":"<p>[androidJvm]\\ constructor(expenseId: Long)</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/expense-id/","title":"Expense id","text":"<p>//app/dev.atick.compose.navigation.expenses/EditExpense/expenseId</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-edit-expense/expense-id/#expenseid","title":"expenseId","text":"<p>[androidJvm]\\ val expenseId: Long</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-expenses/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.expenses/Expenses</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-expenses/#expenses","title":"Expenses","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Expenses</p> <p>Represents the expenses route.</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-expenses-nav-graph/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.expenses/ExpensesNavGraph</p>"},{"location":"app/app/dev.atick.compose.navigation.expenses/-expenses-nav-graph/#expensesnavgraph","title":"ExpensesNavGraph","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object ExpensesNavGraph</p> <p>Represents the expenses navigation graph.</p>"},{"location":"app/app/dev.atick.compose.navigation.intro/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.intro</p>"},{"location":"app/app/dev.atick.compose.navigation.intro/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.intro/#types","title":"Types","text":"Name Summary Intro [androidJvm]@Serializabledata object IntroRepresents the intro route."},{"location":"app/app/dev.atick.compose.navigation.intro/#functions","title":"Functions","text":"Name Summary introScreen [androidJvm]fun NavGraphBuilder.introScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)Builds the intro screen."},{"location":"app/app/dev.atick.compose.navigation.intro/intro-screen/","title":"Intro screen","text":"<p>//app/dev.atick.compose.navigation.intro/introScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.intro/intro-screen/#introscreen","title":"introScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.introScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Builds the intro screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.intro/intro-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.intro/-intro/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.intro/Intro</p>"},{"location":"app/app/dev.atick.compose.navigation.intro/-intro/#intro","title":"Intro","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Intro</p> <p>Represents the intro route.</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.subscriptions</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.subscriptions/#types","title":"Types","text":"Name Summary Subscriptions [androidJvm]@Serializabledata object SubscriptionsRepresents the subscriptions route."},{"location":"app/app/dev.atick.compose.navigation.subscriptions/#functions","title":"Functions","text":"Name Summary navigateToSubscriptions [androidJvm]fun NavController.navigateToSubscriptions(navOptions: NavOptions? = null)Navigates to the subscriptions screen. subscriptionsScreen [androidJvm]fun NavGraphBuilder.subscriptionsScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)Builds the subscriptions screen."},{"location":"app/app/dev.atick.compose.navigation.subscriptions/navigate-to-subscriptions/","title":"Navigate to subscriptions","text":"<p>//app/dev.atick.compose.navigation.subscriptions/navigateToSubscriptions</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/navigate-to-subscriptions/#navigatetosubscriptions","title":"navigateToSubscriptions","text":"<p>[androidJvm]\\ fun NavController.navigateToSubscriptions(navOptions: NavOptions? = null)</p> <p>Navigates to the subscriptions screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/navigate-to-subscriptions/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions The navigation options."},{"location":"app/app/dev.atick.compose.navigation.subscriptions/subscriptions-screen/","title":"Subscriptions screen","text":"<p>//app/dev.atick.compose.navigation.subscriptions/subscriptionsScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/subscriptions-screen/#subscriptionsscreen","title":"subscriptionsScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.subscriptionsScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Builds the subscriptions screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/subscriptions-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onShowSnackbar The callback to show a snackbar."},{"location":"app/app/dev.atick.compose.navigation.subscriptions/-subscriptions/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.subscriptions/Subscriptions</p>"},{"location":"app/app/dev.atick.compose.navigation.subscriptions/-subscriptions/#subscriptions","title":"Subscriptions","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Subscriptions</p> <p>Represents the subscriptions route.</p>"},{"location":"app/app/dev.atick.compose.receivers/","title":"Index","text":"<p>//app/dev.atick.compose.receivers</p>"},{"location":"app/app/dev.atick.compose.receivers/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.receivers/#types","title":"Types","text":"Name Summary SmsReceiver [androidJvm]class SmsReceiver@Injectconstructor : BroadcastReceiverA broadcast receiver that listens for incoming SMS messages."},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/","title":"Index","text":"<p>//app/dev.atick.compose.receivers/SmsReceiver</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/#smsreceiver","title":"SmsReceiver","text":"<p>[androidJvm]\\ class SmsReceiver@Injectconstructor : BroadcastReceiver</p> <p>A broadcast receiver that listens for incoming SMS messages.</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/#constructors","title":"Constructors","text":"SmsReceiver [androidJvm]@Injectconstructor()"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/#properties","title":"Properties","text":"Name Summary taskManager [androidJvm]@Injectlateinit var taskManager: TaskManager"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/#functions","title":"Functions","text":"Name Summary abortBroadcast [androidJvm]fun abortBroadcast() clearAbortBroadcast [androidJvm]fun clearAbortBroadcast() getAbortBroadcast [androidJvm]fun getAbortBroadcast(): Boolean getDebugUnregister [androidJvm]fun getDebugUnregister(): Boolean getResultCode [androidJvm]fun getResultCode(): Int getResultData [androidJvm]fun getResultData(): String getResultExtras [androidJvm]fun getResultExtras(p0: Boolean): Bundle getSentFromPackage [androidJvm]open fun getSentFromPackage(): String? getSentFromUid [androidJvm]open fun getSentFromUid(): Int goAsync [androidJvm]fun goAsync(): BroadcastReceiver.PendingResult isInitialStickyBroadcast [androidJvm]fun isInitialStickyBroadcast(): Boolean isOrderedBroadcast [androidJvm]fun isOrderedBroadcast(): Boolean onReceive [androidJvm]open override fun onReceive(context: Context, intent: Intent) peekService [androidJvm]open fun peekService(p0: Context, p1: Intent): IBinder setDebugUnregister [androidJvm]fun setDebugUnregister(p0: Boolean) setOrderedHint [androidJvm]fun setOrderedHint(p0: Boolean) setResult [androidJvm]fun setResult(p0: Int, p1: String, p2: Bundle) setResultCode [androidJvm]fun setResultCode(p0: Int) setResultData [androidJvm]fun setResultData(p0: String) setResultExtras [androidJvm]fun setResultExtras(p0: Bundle)"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/-sms-receiver/","title":"sms receiver","text":"<p>//app/dev.atick.compose.receivers/SmsReceiver/SmsReceiver</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/-sms-receiver/#smsreceiver","title":"SmsReceiver","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor()</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/on-receive/","title":"On receive","text":"<p>//app/dev.atick.compose.receivers/SmsReceiver/onReceive</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/on-receive/#onreceive","title":"onReceive","text":"<p>[androidJvm]\\ open override fun onReceive(context: Context, intent: Intent)</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/task-manager/","title":"Task manager","text":"<p>//app/dev.atick.compose.receivers/SmsReceiver/taskManager</p>"},{"location":"app/app/dev.atick.compose.receivers/-sms-receiver/task-manager/#taskmanager","title":"taskManager","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var taskManager: TaskManager</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/","title":"Index","text":"<p>//app/dev.atick.compose.repository.analysis</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.analysis/#types","title":"Types","text":"Name Summary AnalysisRepository [androidJvm]interface AnalysisRepositoryRepository for fetching analysis data. AnalysisRepositoryImpl [androidJvm]class AnalysisRepositoryImpl@Injectconstructor(analysisDataSource: AnalysisDataSource) : AnalysisRepositoryImplementation of AnalysisRepository that fetches data from the AnalysisDataSource."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepository</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/#analysisrepository","title":"AnalysisRepository","text":"<p>interface AnalysisRepository</p> <p>Repository for fetching analysis data.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/#inheritors","title":"Inheritors","text":"AnalysisRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/#functions","title":"Functions","text":"Name Summary getCategoryAnalyses [androidJvm]abstract fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;Gets the category analyses. getMerchantAnalyses [androidJvm]abstract fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;Gets the merchant analyses. getTotalSpending [androidJvm]abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;Gets the total spending."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-category-analyses/","title":"Get category analyses","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepository/getCategoryAnalyses</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-category-analyses/#getcategoryanalyses","title":"getCategoryAnalyses","text":"<p>[androidJvm]\\ abstract fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;</p> <p>Gets the category analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-category-analyses/#return","title":"Return","text":"<p>A Flow of List of UiAnalysis representing the category analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-category-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis. topN The number of top categories to fetch."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-merchant-analyses/","title":"Get merchant analyses","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepository/getMerchantAnalyses</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-merchant-analyses/#getmerchantanalyses","title":"getMerchantAnalyses","text":"<p>[androidJvm]\\ abstract fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;</p> <p>Gets the merchant analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-merchant-analyses/#return","title":"Return","text":"<p>A Flow of List of UiAnalysis representing the merchant analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-merchant-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis. topN The number of top merchants to fetch."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-total-spending/","title":"Get total spending","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepository/getTotalSpending</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;</p> <p>Gets the total spending.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-total-spending/#return","title":"Return","text":"<p>A Flow of Double representing the total spending.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/#analysisrepositoryimpl","title":"AnalysisRepositoryImpl","text":"<p>class AnalysisRepositoryImpl@Injectconstructor(analysisDataSource: AnalysisDataSource) : AnalysisRepository</p> <p>Implementation of AnalysisRepository that fetches data from the AnalysisDataSource.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> analysisDataSource The data source for analysis data."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/#constructors","title":"Constructors","text":"AnalysisRepositoryImpl [androidJvm]@Injectconstructor(analysisDataSource: AnalysisDataSource)"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/#functions","title":"Functions","text":"Name Summary getCategoryAnalyses [androidJvm]open override fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;Gets the category analyses. getMerchantAnalyses [androidJvm]open override fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;Gets the merchant analyses. getTotalSpending [androidJvm]open override fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;Gets the total spending."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/-analysis-repository-impl/","title":"analysis repository impl","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepositoryImpl/AnalysisRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/-analysis-repository-impl/#analysisrepositoryimpl","title":"AnalysisRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(analysisDataSource: AnalysisDataSource)</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/-analysis-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> analysisDataSource The data source for analysis data."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-category-analyses/","title":"Get category analyses","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepositoryImpl/getCategoryAnalyses</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-category-analyses/#getcategoryanalyses","title":"getCategoryAnalyses","text":"<p>[androidJvm]\\ open override fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;</p> <p>Gets the category analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-category-analyses/#return","title":"Return","text":"<p>A Flow of List of UiAnalysis representing the category analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-category-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis. topN The number of top categories to fetch."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-merchant-analyses/","title":"Get merchant analyses","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepositoryImpl/getMerchantAnalyses</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-merchant-analyses/#getmerchantanalyses","title":"getMerchantAnalyses","text":"<p>[androidJvm]\\ open override fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;UiAnalysis&gt;&gt;</p> <p>Gets the merchant analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-merchant-analyses/#return","title":"Return","text":"<p>A Flow of List of UiAnalysis representing the merchant analyses.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-merchant-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis. topN The number of top merchants to fetch."},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-total-spending/","title":"Get total spending","text":"<p>//app/dev.atick.compose.repository.analysis/AnalysisRepositoryImpl/getTotalSpending</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ open override fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;</p> <p>Gets the total spending.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-total-spending/#return","title":"Return","text":"<p>A Flow of Double representing the total spending.</p>"},{"location":"app/app/dev.atick.compose.repository.analysis/-analysis-repository-impl/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis."},{"location":"app/app/dev.atick.compose.repository.budgets/","title":"Index","text":"<p>//app/dev.atick.compose.repository.budgets</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.budgets/#types","title":"Types","text":"Name Summary BudgetsRepository [androidJvm]interface BudgetsRepositoryRepository for fetching budget data. BudgetsRepositoryImpl [androidJvm]class BudgetsRepositoryImpl@Injectconstructor(expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource) : BudgetsRepositoryImplementation of BudgetsRepository that fetches data from the BudgetDataSource and ExpenseDataSource."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepository</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/#budgetsrepository","title":"BudgetsRepository","text":"<p>interface BudgetsRepository</p> <p>Repository for fetching budget data.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/#inheritors","title":"Inheritors","text":"BudgetsRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/#functions","title":"Functions","text":"Name Summary deleteBudget [androidJvm]abstract suspend fun deleteBudget(budget: UiBudget): Result&lt;Unit&gt;Deletes the budget. getBudgetForMonth [androidJvm]abstract fun getBudgetForMonth(month: Long): Flow&lt;UiBudget&gt;Gets the budget for the month. getCumulativeExpenses [androidJvm]abstract fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiCumulativeExpense&gt;&gt;Gets the cumulative expenses. insertOrUpdateBudget [androidJvm]abstract suspend fun insertOrUpdateBudget(budget: UiBudget): Result&lt;Unit&gt;Inserts or updates the budget."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/delete-budget/","title":"Delete budget","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepository/deleteBudget</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/delete-budget/#deletebudget","title":"deleteBudget","text":"<p>[androidJvm]\\ abstract suspend fun deleteBudget(budget: UiBudget): Result&lt;Unit&gt;</p> <p>Deletes the budget.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/delete-budget/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/delete-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget to be deleted."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-budget-for-month/","title":"Get budget for month","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepository/getBudgetForMonth</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-budget-for-month/#getbudgetformonth","title":"getBudgetForMonth","text":"<p>[androidJvm]\\ abstract fun getBudgetForMonth(month: Long): Flow&lt;UiBudget&gt;</p> <p>Gets the budget for the month.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-budget-for-month/#return","title":"Return","text":"<p>A Flow of UiBudget representing the budget for the month.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-budget-for-month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is to be fetched."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-cumulative-expenses/","title":"Get cumulative expenses","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepository/getCumulativeExpenses</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-cumulative-expenses/#getcumulativeexpenses","title":"getCumulativeExpenses","text":"<p>[androidJvm]\\ abstract fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiCumulativeExpense&gt;&gt;</p> <p>Gets the cumulative expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-cumulative-expenses/#return","title":"Return","text":"<p>A Flow of List of UiCumulativeExpense representing the cumulative expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/get-cumulative-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/insert-or-update-budget/","title":"Insert or update budget","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepository/insertOrUpdateBudget</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/insert-or-update-budget/#insertorupdatebudget","title":"insertOrUpdateBudget","text":"<p>[androidJvm]\\ abstract suspend fun insertOrUpdateBudget(budget: UiBudget): Result&lt;Unit&gt;</p> <p>Inserts or updates the budget.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/insert-or-update-budget/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository/insert-or-update-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget to be inserted or updated."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/#budgetsrepositoryimpl","title":"BudgetsRepositoryImpl","text":"<p>class BudgetsRepositoryImpl@Injectconstructor(expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource) : BudgetsRepository</p> <p>Implementation of BudgetsRepository that fetches data from the BudgetDataSource and ExpenseDataSource.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSource The data source for expense data. budgetDataSource The data source for budget data."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/#constructors","title":"Constructors","text":"BudgetsRepositoryImpl [androidJvm]@Injectconstructor(expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource)"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/#functions","title":"Functions","text":"Name Summary deleteBudget [androidJvm]open suspend override fun deleteBudget(budget: UiBudget): Result&lt;Unit&gt;Deletes the budget. getBudgetForMonth [androidJvm]open override fun getBudgetForMonth(month: Long): Flow&lt;UiBudget&gt;Gets the budget for the month. getCumulativeExpenses [androidJvm]open override fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiCumulativeExpense&gt;&gt;Gets the cumulative expenses. insertOrUpdateBudget [androidJvm]open suspend override fun insertOrUpdateBudget(budget: UiBudget): Result&lt;Unit&gt;Inserts or updates the budget."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/-budgets-repository-impl/","title":"budgets repository impl","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepositoryImpl/BudgetsRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/-budgets-repository-impl/#budgetsrepositoryimpl","title":"BudgetsRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource)</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/-budgets-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSource The data source for expense data. budgetDataSource The data source for budget data."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/delete-budget/","title":"Delete budget","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepositoryImpl/deleteBudget</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/delete-budget/#deletebudget","title":"deleteBudget","text":"<p>[androidJvm]\\ open suspend override fun deleteBudget(budget: UiBudget): Result&lt;Unit&gt;</p> <p>Deletes the budget.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/delete-budget/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/delete-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget to be deleted."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-budget-for-month/","title":"Get budget for month","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepositoryImpl/getBudgetForMonth</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-budget-for-month/#getbudgetformonth","title":"getBudgetForMonth","text":"<p>[androidJvm]\\ open override fun getBudgetForMonth(month: Long): Flow&lt;UiBudget&gt;</p> <p>Gets the budget for the month.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-budget-for-month/#return","title":"Return","text":"<p>A Flow of UiBudget representing the budget for the month.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-budget-for-month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is to be fetched."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-cumulative-expenses/","title":"Get cumulative expenses","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepositoryImpl/getCumulativeExpenses</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-cumulative-expenses/#getcumulativeexpenses","title":"getCumulativeExpenses","text":"<p>[androidJvm]\\ open override fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiCumulativeExpense&gt;&gt;</p> <p>Gets the cumulative expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-cumulative-expenses/#return","title":"Return","text":"<p>A Flow of List of UiCumulativeExpense representing the cumulative expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/get-cumulative-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the analysis. endDate The end date of the analysis."},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/insert-or-update-budget/","title":"Insert or update budget","text":"<p>//app/dev.atick.compose.repository.budgets/BudgetsRepositoryImpl/insertOrUpdateBudget</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/insert-or-update-budget/#insertorupdatebudget","title":"insertOrUpdateBudget","text":"<p>[androidJvm]\\ open suspend override fun insertOrUpdateBudget(budget: UiBudget): Result&lt;Unit&gt;</p> <p>Inserts or updates the budget.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/insert-or-update-budget/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.budgets/-budgets-repository-impl/insert-or-update-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The budget to be inserted or updated."},{"location":"app/app/dev.atick.compose.repository.chat/","title":"Index","text":"<p>//app/dev.atick.compose.repository.chat</p>"},{"location":"app/app/dev.atick.compose.repository.chat/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.chat/#types","title":"Types","text":"Name Summary ChatRepository [androidJvm]interface ChatRepositoryRepository for fetching chat data. ChatRepositoryImpl [androidJvm]class ChatRepositoryImpl@Injectconstructor(expenseDataSource: ExpenseDataSource, analysisDataSource: AnalysisDataSource, budgetDataSource: BudgetDataSource, chatDataSource: ChatDataSource, geminiDataSource: GeminiDataSource) : ChatRepositoryImplementation of ChatRepository that fetches data from the ChatDataSource, AnalysisDataSource, BudgetDataSource, and GeminiDataSource. Quintuple [androidJvm]data class Quintuple&lt;A, B, C, D, E&gt;(val first: A, val second: B, val third: C, val fourth: D, val fifth: E)A data class representing a quintuple, which is a tuple with five elements."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/#chatrepository","title":"ChatRepository","text":"<p>interface ChatRepository</p> <p>Repository for fetching chat data.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/#inheritors","title":"Inheritors","text":"ChatRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/#functions","title":"Functions","text":"Name Summary getAllMessages [androidJvm]abstract fun getAllMessages(): Flow&lt;List&lt;UiMessage&gt;&gt;Gets all the messages. initializeChat [androidJvm]abstract suspend fun initializeChat(monthInfo: MonthInfo, historyDepth: Int): Result&lt;Unit&gt;Initializes the chat. sendMessage [androidJvm]abstract suspend fun sendMessage(message: String): Result&lt;Unit&gt;Sends a message."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/get-all-messages/","title":"Get all messages","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/getAllMessages</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/get-all-messages/#getallmessages","title":"getAllMessages","text":"<p>[androidJvm]\\ abstract fun getAllMessages(): Flow&lt;List&lt;UiMessage&gt;&gt;</p> <p>Gets all the messages.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/get-all-messages/#return","title":"Return","text":"<p>A Flow of List of UiMessage representing the messages.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/initialize-chat/","title":"Initialize chat","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/initializeChat</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/initialize-chat/#initializechat","title":"initializeChat","text":"<p>[androidJvm]\\ abstract suspend fun initializeChat(monthInfo: MonthInfo, historyDepth: Int): Result&lt;Unit&gt;</p> <p>Initializes the chat.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/initialize-chat/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/initialize-chat/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information for which the chat is to be initialized. historyDepth The depth of the chat history to fetch."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/send-message/","title":"Send message","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/sendMessage</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/send-message/#sendmessage","title":"sendMessage","text":"<p>[androidJvm]\\ abstract suspend fun sendMessage(message: String): Result&lt;Unit&gt;</p> <p>Sends a message.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/send-message/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/send-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to be sent."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/Companion</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/#properties","title":"Properties","text":"Name Summary MAX_HISTORY_DEPTH [androidJvm]const val MAX_HISTORY_DEPTH: Int = 100The maximum depth of the chat history to fetch. N_TOP_CATEGORY_TO_LOAD [androidJvm]const val N_TOP_CATEGORY_TO_LOAD: Int = 10The number of top categories to load. N_TOP_MERCHANT_TO_LOAD [androidJvm]const val N_TOP_MERCHANT_TO_LOAD: Int = 10The number of top merchants to load."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/-m-a-x_-h-i-s-t-o-r-y_-d-e-p-t-h/","title":"m a x  h i s t o r y  d e p t h","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/Companion/MAX_HISTORY_DEPTH</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/-m-a-x_-h-i-s-t-o-r-y_-d-e-p-t-h/#max_history_depth","title":"MAX_HISTORY_DEPTH","text":"<p>[androidJvm]\\ const val MAX_HISTORY_DEPTH: Int = 100</p> <p>The maximum depth of the chat history to fetch.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/-n_-t-o-p_-c-a-t-e-g-o-r-y_-t-o_-l-o-a-d/","title":"n  t o p  c a t e g o r y  t o  l o a d","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/Companion/N_TOP_CATEGORY_TO_LOAD</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/-n_-t-o-p_-c-a-t-e-g-o-r-y_-t-o_-l-o-a-d/#n_top_category_to_load","title":"N_TOP_CATEGORY_TO_LOAD","text":"<p>[androidJvm]\\ const val N_TOP_CATEGORY_TO_LOAD: Int = 10</p> <p>The number of top categories to load.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/-n_-t-o-p_-m-e-r-c-h-a-n-t_-t-o_-l-o-a-d/","title":"n  t o p  m e r c h a n t  t o  l o a d","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepository/Companion/N_TOP_MERCHANT_TO_LOAD</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository/-companion/-n_-t-o-p_-m-e-r-c-h-a-n-t_-t-o_-l-o-a-d/#n_top_merchant_to_load","title":"N_TOP_MERCHANT_TO_LOAD","text":"<p>[androidJvm]\\ const val N_TOP_MERCHANT_TO_LOAD: Int = 10</p> <p>The number of top merchants to load.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/#chatrepositoryimpl","title":"ChatRepositoryImpl","text":"<p>class ChatRepositoryImpl@Injectconstructor(expenseDataSource: ExpenseDataSource, analysisDataSource: AnalysisDataSource, budgetDataSource: BudgetDataSource, chatDataSource: ChatDataSource, geminiDataSource: GeminiDataSource) : ChatRepository</p> <p>Implementation of ChatRepository that fetches data from the ChatDataSource, AnalysisDataSource, BudgetDataSource, and GeminiDataSource.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSource The data source for expense data. analysisDataSource The data source for analysis data. budgetDataSource The data source for budget data. chatDataSource The data source for chat data. geminiDataSource The data source for Gemini chat data."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/#constructors","title":"Constructors","text":"ChatRepositoryImpl [androidJvm]@Injectconstructor(expenseDataSource: ExpenseDataSource, analysisDataSource: AnalysisDataSource, budgetDataSource: BudgetDataSource, chatDataSource: ChatDataSource, geminiDataSource: GeminiDataSource)"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/#functions","title":"Functions","text":"Name Summary getAllMessages [androidJvm]open override fun getAllMessages(): Flow&lt;List&lt;UiMessage&gt;&gt;Gets all the messages. initializeChat [androidJvm]open suspend override fun initializeChat(monthInfo: MonthInfo, historyDepth: Int): Result&lt;Unit&gt;Initializes the chat. sendMessage [androidJvm]open suspend override fun sendMessage(message: String): Result&lt;Unit&gt;Sends a message."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/-chat-repository-impl/","title":"chat repository impl","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepositoryImpl/ChatRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/-chat-repository-impl/#chatrepositoryimpl","title":"ChatRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(expenseDataSource: ExpenseDataSource, analysisDataSource: AnalysisDataSource, budgetDataSource: BudgetDataSource, chatDataSource: ChatDataSource, geminiDataSource: GeminiDataSource)</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/-chat-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSource The data source for expense data. analysisDataSource The data source for analysis data. budgetDataSource The data source for budget data. chatDataSource The data source for chat data. geminiDataSource The data source for Gemini chat data."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/get-all-messages/","title":"Get all messages","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepositoryImpl/getAllMessages</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/get-all-messages/#getallmessages","title":"getAllMessages","text":"<p>[androidJvm]\\ open override fun getAllMessages(): Flow&lt;List&lt;UiMessage&gt;&gt;</p> <p>Gets all the messages.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/get-all-messages/#return","title":"Return","text":"<p>A Flow of List of UiMessage representing the messages.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/initialize-chat/","title":"Initialize chat","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepositoryImpl/initializeChat</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/initialize-chat/#initializechat","title":"initializeChat","text":"<p>[androidJvm]\\ open suspend override fun initializeChat(monthInfo: MonthInfo, historyDepth: Int): Result&lt;Unit&gt;</p> <p>Initializes the chat.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/initialize-chat/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/initialize-chat/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthInfo The month information for which the chat is to be initialized. historyDepth The depth of the chat history to fetch."},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/send-message/","title":"Send message","text":"<p>//app/dev.atick.compose.repository.chat/ChatRepositoryImpl/sendMessage</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/send-message/#sendmessage","title":"sendMessage","text":"<p>[androidJvm]\\ open suspend override fun sendMessage(message: String): Result&lt;Unit&gt;</p> <p>Sends a message.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/send-message/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-chat-repository-impl/send-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to be sent."},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/","title":"Index","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/#quintuple","title":"Quintuple","text":"<p>data class Quintuple&lt;A, B, C, D, E&gt;(val first: A, val second: B, val third: C, val fourth: D, val fifth: E)</p> <p>A data class representing a quintuple, which is a tuple with five elements.</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/#parameters","title":"Parameters","text":"<p>androidJvm</p> A The type of the first element. B The type of the second element. C The type of the third element. D The type of the fourth element. E The type of the fifth element."},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/#constructors","title":"Constructors","text":"Quintuple [androidJvm]constructor(first: A, second: B, third: C, fourth: D, fifth: E)"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/#properties","title":"Properties","text":"Name Summary fifth [androidJvm]val fifth: EThe fifth element of the quintuple. first [androidJvm]val first: AThe first element of the quintuple. fourth [androidJvm]val fourth: DThe fourth element of the quintuple. second [androidJvm]val second: BThe second element of the quintuple. third [androidJvm]val third: CThe third element of the quintuple."},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/-quintuple/","title":"quintuple","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple/Quintuple</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/-quintuple/#quintuple","title":"Quintuple","text":"<p>[androidJvm]\\ constructor(first: A, second: B, third: C, fourth: D, fifth: E)</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/-quintuple/#parameters","title":"Parameters","text":"<p>androidJvm</p> A The type of the first element. B The type of the second element. C The type of the third element. D The type of the fourth element. E The type of the fifth element."},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/fifth/","title":"Fifth","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple/fifth</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/fifth/#fifth","title":"fifth","text":"<p>[androidJvm]\\ val fifth: E</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/first/","title":"First","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple/first</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/first/#first","title":"first","text":"<p>[androidJvm]\\ val first: A</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/fourth/","title":"Fourth","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple/fourth</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/fourth/#fourth","title":"fourth","text":"<p>[androidJvm]\\ val fourth: D</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/second/","title":"Second","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple/second</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/second/#second","title":"second","text":"<p>[androidJvm]\\ val second: B</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/third/","title":"Third","text":"<p>//app/dev.atick.compose.repository.chat/Quintuple/third</p>"},{"location":"app/app/dev.atick.compose.repository.chat/-quintuple/third/#third","title":"third","text":"<p>[androidJvm]\\ val third: C</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/","title":"Index","text":"<p>//app/dev.atick.compose.repository.expenses</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.expenses/#types","title":"Types","text":"Name Summary ExpensesRepository [androidJvm]interface ExpensesRepositoryRepository for fetching expenses data. ExpensesRepositoryImpl [androidJvm]class ExpensesRepositoryImpl@Injectconstructor(geminiDataSource: GeminiDataSource, geminiRateLimiter: GeminiRateLimiter, smsDataSource: SMSDataSource, expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource, taskManager: TaskManager) : ExpensesRepositoryImplementation of ExpensesRepository that fetches data from the ExpenseDataSource, BudgetDataSource, SMSDataSource, and GeminiDataSource."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/#expensesrepository","title":"ExpensesRepository","text":"<p>interface ExpensesRepository</p> <p>Repository for fetching expenses data.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/#inheritors","title":"Inheritors","text":"ExpensesRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/#properties","title":"Properties","text":"Name Summary isSyncing [androidJvm]abstract val isSyncing: Flow&lt;Boolean&gt;A Flow that emits a Boolean indicating whether the expenses are syncing."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/#functions","title":"Functions","text":"Name Summary deleteExpense [androidJvm]abstract suspend fun deleteExpense(expense: UiExpense): Result&lt;Unit&gt;Deletes the expense. getAllExpenses [androidJvm]abstract fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiExpense&gt;&gt;Gets all the expenses. getExpenseById [androidJvm]abstract fun getExpenseById(id: Long): Flow&lt;UiExpense&gt;Gets the expense by ID. requestSync [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")abstract fun requestSync(): Result&lt;Unit&gt;Requests a sync of the expenses. setRecurringType [androidJvm]abstract suspend fun setRecurringType(merchant: String, recurringType: UiRecurringType): Result&lt;Unit&gt;Sets the recurring type for the merchant. syncExpensesFromSms [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")abstract fun syncExpensesFromSms(): Flow&lt;SyncProgress&gt;Syncs the expenses from the SMS. updateExpense [androidJvm]abstract suspend fun updateExpense(expense: UiExpense): Result&lt;Unit&gt;Inserts the expense."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/delete-expense/","title":"Delete expense","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/deleteExpense</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/delete-expense/#deleteexpense","title":"deleteExpense","text":"<p>[androidJvm]\\ abstract suspend fun deleteExpense(expense: UiExpense): Result&lt;Unit&gt;</p> <p>Deletes the expense.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/delete-expense/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/delete-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The expense to be deleted."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-all-expenses/","title":"Get all expenses","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/getAllExpenses</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-all-expenses/#getallexpenses","title":"getAllExpenses","text":"<p>[androidJvm]\\ abstract fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiExpense&gt;&gt;</p> <p>Gets all the expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-all-expenses/#return","title":"Return","text":"<p>A Flow of List of UiExpense representing the expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-all-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the expenses. endDate The end date of the expenses."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-expense-by-id/","title":"Get expense by id","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/getExpenseById</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-expense-by-id/#getexpensebyid","title":"getExpenseById","text":"<p>[androidJvm]\\ abstract fun getExpenseById(id: Long): Flow&lt;UiExpense&gt;</p> <p>Gets the expense by ID.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-expense-by-id/#return","title":"Return","text":"<p>A Flow of UiExpense representing the expense.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/get-expense-by-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the expense."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/is-syncing/","title":"Is syncing","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/isSyncing</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/is-syncing/#issyncing","title":"isSyncing","text":"<p>[androidJvm]\\ abstract val isSyncing: Flow&lt;Boolean&gt;</p> <p>A Flow that emits a Boolean indicating whether the expenses are syncing.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/request-sync/","title":"Request sync","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/requestSync</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/request-sync/#requestsync","title":"requestSync","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>abstract fun requestSync(): Result&lt;Unit&gt;</p> <p>Requests a sync of the expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/request-sync/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/set-recurring-type/","title":"Set recurring type","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/setRecurringType</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/set-recurring-type/#setrecurringtype","title":"setRecurringType","text":"<p>[androidJvm]\\ abstract suspend fun setRecurringType(merchant: String, recurringType: UiRecurringType): Result&lt;Unit&gt;</p> <p>Sets the recurring type for the merchant.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/set-recurring-type/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/set-recurring-type/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the recurring type is to be set. recurringType The recurring type to be set."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/sync-expenses-from-sms/","title":"Sync expenses from sms","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/syncExpensesFromSms</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/sync-expenses-from-sms/#syncexpensesfromsms","title":"syncExpensesFromSms","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>abstract fun syncExpensesFromSms(): Flow&lt;SyncProgress&gt;</p> <p>Syncs the expenses from the SMS.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/sync-expenses-from-sms/#return","title":"Return","text":"<p>A Flow of SyncProgress representing the progress of the sync.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/update-expense/","title":"Update expense","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/updateExpense</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/update-expense/#updateexpense","title":"updateExpense","text":"<p>[androidJvm]\\ abstract suspend fun updateExpense(expense: UiExpense): Result&lt;Unit&gt;</p> <p>Inserts the expense.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/update-expense/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/update-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The expense to be inserted."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/#properties","title":"Properties","text":"Name Summary BANK_NAMES [androidJvm]val BANK_NAMES: List&lt;String&gt;The list of bank names. IGNORE_WORDS [androidJvm]val IGNORE_WORDS: List&lt;String&gt;The list of words to ignore in the SMS. KEYWORDS [androidJvm]val KEYWORDS: List&lt;String&gt;The list of keywords to search for in the SMS. RECURRING_DAILY [androidJvm]const val RECURRING_DAILY: LongThe recurring duration for daily expenses. RECURRING_MONTHLY [androidJvm]const val RECURRING_MONTHLY: LongThe recurring duration for monthly expenses. RECURRING_WEEKLY [androidJvm]const val RECURRING_WEEKLY: LongThe recurring duration for weekly expenses. RECURRING_YEARLY [androidJvm]const val RECURRING_YEARLY: LongThe recurring duration for yearly expenses. REMINDER_TIME_BEFORE_PAYMENT [androidJvm]const val REMINDER_TIME_BEFORE_PAYMENT: LongThe reminder time before payment. SYNC_SMS_DURATION [androidJvm]const val SYNC_SMS_DURATION: LongThe duration for which the SMS should be synced."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-b-a-n-k_-n-a-m-e-s/","title":"b a n k  n a m e s","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/BANK_NAMES</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-b-a-n-k_-n-a-m-e-s/#bank_names","title":"BANK_NAMES","text":"<p>[androidJvm]\\ val BANK_NAMES: List&lt;String&gt;</p> <p>The list of bank names.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-i-g-n-o-r-e_-w-o-r-d-s/","title":"i g n o r e  w o r d s","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/IGNORE_WORDS</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-i-g-n-o-r-e_-w-o-r-d-s/#ignore_words","title":"IGNORE_WORDS","text":"<p>[androidJvm]\\ val IGNORE_WORDS: List&lt;String&gt;</p> <p>The list of words to ignore in the SMS.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-k-e-y-w-o-r-d-s/","title":"k e y w o r d s","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/KEYWORDS</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-k-e-y-w-o-r-d-s/#keywords","title":"KEYWORDS","text":"<p>[androidJvm]\\ val KEYWORDS: List&lt;String&gt;</p> <p>The list of keywords to search for in the SMS.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-d-a-i-l-y/","title":"r e c u r r i n g  d a i l y","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/RECURRING_DAILY</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-d-a-i-l-y/#recurring_daily","title":"RECURRING_DAILY","text":"<p>[androidJvm]\\ const val RECURRING_DAILY: Long</p> <p>The recurring duration for daily expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-m-o-n-t-h-l-y/","title":"r e c u r r i n g  m o n t h l y","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/RECURRING_MONTHLY</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-m-o-n-t-h-l-y/#recurring_monthly","title":"RECURRING_MONTHLY","text":"<p>[androidJvm]\\ const val RECURRING_MONTHLY: Long</p> <p>The recurring duration for monthly expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-w-e-e-k-l-y/","title":"r e c u r r i n g  w e e k l y","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/RECURRING_WEEKLY</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-w-e-e-k-l-y/#recurring_weekly","title":"RECURRING_WEEKLY","text":"<p>[androidJvm]\\ const val RECURRING_WEEKLY: Long</p> <p>The recurring duration for weekly expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-y-e-a-r-l-y/","title":"r e c u r r i n g  y e a r l y","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/RECURRING_YEARLY</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-c-u-r-r-i-n-g_-y-e-a-r-l-y/#recurring_yearly","title":"RECURRING_YEARLY","text":"<p>[androidJvm]\\ const val RECURRING_YEARLY: Long</p> <p>The recurring duration for yearly expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-m-i-n-d-e-r_-t-i-m-e_-b-e-f-o-r-e_-p-a-y-m-e-n-t/","title":"r e m i n d e r  t i m e  b e f o r e  p a y m e n t","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/REMINDER_TIME_BEFORE_PAYMENT</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-r-e-m-i-n-d-e-r_-t-i-m-e_-b-e-f-o-r-e_-p-a-y-m-e-n-t/#reminder_time_before_payment","title":"REMINDER_TIME_BEFORE_PAYMENT","text":"<p>[androidJvm]\\ const val REMINDER_TIME_BEFORE_PAYMENT: Long</p> <p>The reminder time before payment.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-s-y-n-c_-s-m-s_-d-u-r-a-t-i-o-n/","title":"s y n c  s m s  d u r a t i o n","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepository/Companion/SYNC_SMS_DURATION</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository/-companion/-s-y-n-c_-s-m-s_-d-u-r-a-t-i-o-n/#sync_sms_duration","title":"SYNC_SMS_DURATION","text":"<p>[androidJvm]\\ const val SYNC_SMS_DURATION: Long</p> <p>The duration for which the SMS should be synced.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/#expensesrepositoryimpl","title":"ExpensesRepositoryImpl","text":"<p>class ExpensesRepositoryImpl@Injectconstructor(geminiDataSource: GeminiDataSource, geminiRateLimiter: GeminiRateLimiter, smsDataSource: SMSDataSource, expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource, taskManager: TaskManager) : ExpensesRepository</p> <p>Implementation of ExpensesRepository that fetches data from the ExpenseDataSource, BudgetDataSource, SMSDataSource, and GeminiDataSource.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> geminiDataSource The data source for Gemini data. geminiRateLimiter The rate limiter for Gemini API requests. smsDataSource The data source for SMS data. expenseDataSource The data source for expense data. budgetDataSource The data source for budget data. taskManager The task manager for syncing and notifications."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/#constructors","title":"Constructors","text":"ExpensesRepositoryImpl [androidJvm]@Injectconstructor(geminiDataSource: GeminiDataSource, geminiRateLimiter: GeminiRateLimiter, smsDataSource: SMSDataSource, expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource, taskManager: TaskManager)"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/#properties","title":"Properties","text":"Name Summary isSyncing [androidJvm]open override val isSyncing: Flow&lt;Boolean&gt;Flow of Boolean that indicates whether the repository is syncing."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/#functions","title":"Functions","text":"Name Summary deleteExpense [androidJvm]open suspend override fun deleteExpense(expense: UiExpense): Result&lt;Unit&gt;Deletes the expense. getAllExpenses [androidJvm]open override fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiExpense&gt;&gt;Gets all the expenses. getExpenseById [androidJvm]open override fun getExpenseById(id: Long): Flow&lt;UiExpense&gt;Gets the expense by ID. requestSync [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")open override fun requestSync(): Result&lt;Unit&gt;Requests a sync of the expenses. setRecurringType [androidJvm]open suspend override fun setRecurringType(merchant: String, recurringType: UiRecurringType): Result&lt;Unit&gt;Sets the recurring type for the merchant. syncExpensesFromSms [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")open override fun syncExpensesFromSms(): Flow&lt;SyncProgress&gt;Syncs the expenses from the SMS. updateExpense [androidJvm]open suspend override fun updateExpense(expense: UiExpense): Result&lt;Unit&gt;Updates the expense."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/-expenses-repository-impl/","title":"expenses repository impl","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/ExpensesRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/-expenses-repository-impl/#expensesrepositoryimpl","title":"ExpensesRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(geminiDataSource: GeminiDataSource, geminiRateLimiter: GeminiRateLimiter, smsDataSource: SMSDataSource, expenseDataSource: ExpenseDataSource, budgetDataSource: BudgetDataSource, taskManager: TaskManager)</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/-expenses-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> geminiDataSource The data source for Gemini data. geminiRateLimiter The rate limiter for Gemini API requests. smsDataSource The data source for SMS data. expenseDataSource The data source for expense data. budgetDataSource The data source for budget data. taskManager The task manager for syncing and notifications."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/delete-expense/","title":"Delete expense","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/deleteExpense</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/delete-expense/#deleteexpense","title":"deleteExpense","text":"<p>[androidJvm]\\ open suspend override fun deleteExpense(expense: UiExpense): Result&lt;Unit&gt;</p> <p>Deletes the expense.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/delete-expense/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/delete-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The expense to be deleted."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-all-expenses/","title":"Get all expenses","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/getAllExpenses</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-all-expenses/#getallexpenses","title":"getAllExpenses","text":"<p>[androidJvm]\\ open override fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;UiExpense&gt;&gt;</p> <p>Gets all the expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-all-expenses/#return","title":"Return","text":"<p>A Flow of List of UiExpense representing the expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-all-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the expenses. endDate The end date of the expenses."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-expense-by-id/","title":"Get expense by id","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/getExpenseById</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-expense-by-id/#getexpensebyid","title":"getExpenseById","text":"<p>[androidJvm]\\ open override fun getExpenseById(id: Long): Flow&lt;UiExpense&gt;</p> <p>Gets the expense by ID.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-expense-by-id/#return","title":"Return","text":"<p>A Flow of UiExpense representing the expense.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/get-expense-by-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the expense."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/is-syncing/","title":"Is syncing","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/isSyncing</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/is-syncing/#issyncing","title":"isSyncing","text":"<p>[androidJvm]\\ open override val isSyncing: Flow&lt;Boolean&gt;</p> <p>Flow of Boolean that indicates whether the repository is syncing.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/request-sync/","title":"Request sync","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/requestSync</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/request-sync/#requestsync","title":"requestSync","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>open override fun requestSync(): Result&lt;Unit&gt;</p> <p>Requests a sync of the expenses.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/request-sync/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/set-recurring-type/","title":"Set recurring type","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/setRecurringType</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/set-recurring-type/#setrecurringtype","title":"setRecurringType","text":"<p>[androidJvm]\\ open suspend override fun setRecurringType(merchant: String, recurringType: UiRecurringType): Result&lt;Unit&gt;</p> <p>Sets the recurring type for the merchant.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/set-recurring-type/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/set-recurring-type/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the recurring type is to be set. recurringType The recurring type to be set."},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/sync-expenses-from-sms/","title":"Sync expenses from sms","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/syncExpensesFromSms</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/sync-expenses-from-sms/#syncexpensesfromsms","title":"syncExpensesFromSms","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>open override fun syncExpensesFromSms(): Flow&lt;SyncProgress&gt;</p> <p>Syncs the expenses from the SMS.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/sync-expenses-from-sms/#return","title":"Return","text":"<p>A Flow of SyncProgress representing the progress of the sync.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/update-expense/","title":"Update expense","text":"<p>//app/dev.atick.compose.repository.expenses/ExpensesRepositoryImpl/updateExpense</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/update-expense/#updateexpense","title":"updateExpense","text":"<p>[androidJvm]\\ open suspend override fun updateExpense(expense: UiExpense): Result&lt;Unit&gt;</p> <p>Updates the expense.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/update-expense/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.expenses/-expenses-repository-impl/update-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The expense to be updated."},{"location":"app/app/dev.atick.compose.repository.subscriptions/","title":"Index","text":"<p>//app/dev.atick.compose.repository.subscriptions</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.subscriptions/#types","title":"Types","text":"Name Summary SubscriptionsRepository [androidJvm]interface SubscriptionsRepositoryRepository for fetching subscription data. SubscriptionsRepositoryImpl [androidJvm]class SubscriptionsRepositoryImpl@Injectconstructor(expenseDataSource: ExpenseDataSource, taskManager: TaskManager) : SubscriptionsRepositoryImplementation of SubscriptionsRepository that fetches data from the ExpenseDataSource."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepository</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/#subscriptionsrepository","title":"SubscriptionsRepository","text":"<p>interface SubscriptionsRepository</p> <p>Repository for fetching subscription data.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/#inheritors","title":"Inheritors","text":"SubscriptionsRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/#functions","title":"Functions","text":"Name Summary getSubscriptions [androidJvm]abstract fun getSubscriptions(): Flow&lt;List&lt;UiExpense&gt;&gt;Gets the subscriptions. setCancellation [androidJvm]abstract suspend fun setCancellation(merchant: String, toBeCancelled: Boolean): Result&lt;Unit&gt;Sets the subscription to be cancelled."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/get-subscriptions/","title":"Get subscriptions","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepository/getSubscriptions</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/get-subscriptions/#getsubscriptions","title":"getSubscriptions","text":"<p>[androidJvm]\\ abstract fun getSubscriptions(): Flow&lt;List&lt;UiExpense&gt;&gt;</p> <p>Gets the subscriptions.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/get-subscriptions/#return","title":"Return","text":"<p>A Flow of List of UiExpense representing the subscriptions.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/set-cancellation/","title":"Set cancellation","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepository/setCancellation</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/set-cancellation/#setcancellation","title":"setCancellation","text":"<p>[androidJvm]\\ abstract suspend fun setCancellation(merchant: String, toBeCancelled: Boolean): Result&lt;Unit&gt;</p> <p>Sets the subscription to be cancelled.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/set-cancellation/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/set-cancellation/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the subscription is to be cancelled. toBeCancelled The flag indicating if the subscription is to be cancelled."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepository/Companion</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/-companion/#properties","title":"Properties","text":"Name Summary CANCELLATION_REMINDER_TIME [androidJvm]const val CANCELLATION_REMINDER_TIME: LongThe time before reminding user for cancellation."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/-companion/-c-a-n-c-e-l-l-a-t-i-o-n_-r-e-m-i-n-d-e-r_-t-i-m-e/","title":"c a n c e l l a t i o n  r e m i n d e r  t i m e","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepository/Companion/CANCELLATION_REMINDER_TIME</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository/-companion/-c-a-n-c-e-l-l-a-t-i-o-n_-r-e-m-i-n-d-e-r_-t-i-m-e/#cancellation_reminder_time","title":"CANCELLATION_REMINDER_TIME","text":"<p>[androidJvm]\\ const val CANCELLATION_REMINDER_TIME: Long</p> <p>The time before reminding user for cancellation.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/#subscriptionsrepositoryimpl","title":"SubscriptionsRepositoryImpl","text":"<p>class SubscriptionsRepositoryImpl@Injectconstructor(expenseDataSource: ExpenseDataSource, taskManager: TaskManager) : SubscriptionsRepository</p> <p>Implementation of SubscriptionsRepository that fetches data from the ExpenseDataSource.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSource The data source for expense data. taskManager The task manager for scheduling tasks."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/#constructors","title":"Constructors","text":"SubscriptionsRepositoryImpl [androidJvm]@Injectconstructor(expenseDataSource: ExpenseDataSource, taskManager: TaskManager)"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/#functions","title":"Functions","text":"Name Summary getSubscriptions [androidJvm]open override fun getSubscriptions(): Flow&lt;List&lt;UiExpense&gt;&gt;Gets the subscriptions. setCancellation [androidJvm]open suspend override fun setCancellation(merchant: String, toBeCancelled: Boolean): Result&lt;Unit&gt;Sets the subscription to be cancelled."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/-subscriptions-repository-impl/","title":"subscriptions repository impl","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepositoryImpl/SubscriptionsRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/-subscriptions-repository-impl/#subscriptionsrepositoryimpl","title":"SubscriptionsRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(expenseDataSource: ExpenseDataSource, taskManager: TaskManager)</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/-subscriptions-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSource The data source for expense data. taskManager The task manager for scheduling tasks."},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/get-subscriptions/","title":"Get subscriptions","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepositoryImpl/getSubscriptions</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/get-subscriptions/#getsubscriptions","title":"getSubscriptions","text":"<p>[androidJvm]\\ open override fun getSubscriptions(): Flow&lt;List&lt;UiExpense&gt;&gt;</p> <p>Gets the subscriptions.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/get-subscriptions/#return","title":"Return","text":"<p>A Flow of List of UiExpense representing the subscriptions.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/set-cancellation/","title":"Set cancellation","text":"<p>//app/dev.atick.compose.repository.subscriptions/SubscriptionsRepositoryImpl/setCancellation</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/set-cancellation/#setcancellation","title":"setCancellation","text":"<p>[androidJvm]\\ open suspend override fun setCancellation(merchant: String, toBeCancelled: Boolean): Result&lt;Unit&gt;</p> <p>Sets the subscription to be cancelled.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/set-cancellation/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.subscriptions/-subscriptions-repository-impl/set-cancellation/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the subscription is to be cancelled. toBeCancelled The flag indicating if the subscription is to be cancelled."},{"location":"app/app/dev.atick.compose.repository.user/","title":"Index","text":"<p>//app/dev.atick.compose.repository.user</p>"},{"location":"app/app/dev.atick.compose.repository.user/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.user/#types","title":"Types","text":"Name Summary UserDataRepository [androidJvm]interface UserDataRepositoryInterface defining methods to interact with user data and preferences. UserDataRepositoryImpl [androidJvm]class UserDataRepositoryImpl@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource) : UserDataRepositoryImplementation of UserDataRepository that utilizes UserPreferencesDataSource to manage user data and preferences."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/#userdatarepository","title":"UserDataRepository","text":"<p>interface UserDataRepository</p> <p>Interface defining methods to interact with user data and preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/#inheritors","title":"Inheritors","text":"UserDataRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/#properties","title":"Properties","text":"Name Summary userData [androidJvm]abstract val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;Sets the dynamic color preferences in the user preferences. setLanguage [androidJvm]abstract suspend fun setLanguage(language: String): Result&lt;Unit&gt;Sets the language in the user preferences. setThemeBrand [androidJvm]abstract suspend fun setThemeBrand(themeBrand: ThemeBrand): Result&lt;Unit&gt;Sets the theme brand in the user preferences. setUserProfile [androidJvm]abstract suspend fun setUserProfile(profile: Profile): Result&lt;Unit&gt;Sets the user ID in the user preferences. userFinishedOnboarding [androidJvm]abstract suspend fun userFinishedOnboarding(): Result&lt;Unit&gt;Sets the user has finished onboarding in the user preferences."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/setDarkThemeConfig</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dark-theme-config/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/setDynamicColorPreference</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dynamic-color-preference/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-language/","title":"Set language","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/setLanguage</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-language/#setlanguage","title":"setLanguage","text":"<p>[androidJvm]\\ abstract suspend fun setLanguage(language: String): Result&lt;Unit&gt;</p> <p>Sets the language in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-language/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-language/#parameters","title":"Parameters","text":"<p>androidJvm</p> language The language to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-theme-brand/","title":"Set theme brand","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/setThemeBrand</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-theme-brand/#setthemebrand","title":"setThemeBrand","text":"<p>[androidJvm]\\ abstract suspend fun setThemeBrand(themeBrand: ThemeBrand): Result&lt;Unit&gt;</p> <p>Sets the theme brand in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-theme-brand/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-theme-brand/#parameters","title":"Parameters","text":"<p>androidJvm</p> themeBrand The theme brand to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-user-profile/","title":"Set user profile","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/setUserProfile</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-user-profile/#setuserprofile","title":"setUserProfile","text":"<p>[androidJvm]\\ abstract suspend fun setUserProfile(profile: Profile): Result&lt;Unit&gt;</p> <p>Sets the user ID in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-user-profile/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/set-user-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user ID to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/user-data/","title":"User data","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/userData</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ abstract val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/user-finished-onboarding/","title":"User finished onboarding","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepository/userFinishedOnboarding</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/user-finished-onboarding/#userfinishedonboarding","title":"userFinishedOnboarding","text":"<p>[androidJvm]\\ abstract suspend fun userFinishedOnboarding(): Result&lt;Unit&gt;</p> <p>Sets the user has finished onboarding in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository/user-finished-onboarding/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/#userdatarepositoryimpl","title":"UserDataRepositoryImpl","text":"<p>[androidJvm]\\ class UserDataRepositoryImpl@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource) : UserDataRepository</p> <p>Implementation of UserDataRepository that utilizes UserPreferencesDataSource to manage user data and preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/#constructors","title":"Constructors","text":"UserDataRepositoryImpl [androidJvm]@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource)"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/#properties","title":"Properties","text":"Name Summary userData [androidJvm]open override val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;Sets the dynamic color preferences in the user preferences. setLanguage [androidJvm]open suspend override fun setLanguage(language: String): Result&lt;Unit&gt;Sets the language in the user preferences. setThemeBrand [androidJvm]open suspend override fun setThemeBrand(themeBrand: ThemeBrand): Result&lt;Unit&gt;Sets the theme brand in the user preferences. setUserProfile [androidJvm]open suspend override fun setUserProfile(profile: Profile): Result&lt;Unit&gt;Sets the user Profile in the user preferences. userFinishedOnboarding [androidJvm]open suspend override fun userFinishedOnboarding(): Result&lt;Unit&gt;Sets the user has finished onboarding in the user preferences."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/-user-data-repository-impl/","title":"user data repository impl","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/UserDataRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/-user-data-repository-impl/#userdatarepositoryimpl","title":"UserDataRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userPreferencesDataSource: UserPreferencesDataSource)</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/setDarkThemeConfig</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dark-theme-config/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/setDynamicColorPreference</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dynamic-color-preference/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-language/","title":"Set language","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/setLanguage</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-language/#setlanguage","title":"setLanguage","text":"<p>[androidJvm]\\ open suspend override fun setLanguage(language: String): Result&lt;Unit&gt;</p> <p>Sets the language in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-language/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-language/#parameters","title":"Parameters","text":"<p>androidJvm</p> language The language to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-theme-brand/","title":"Set theme brand","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/setThemeBrand</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-theme-brand/#setthemebrand","title":"setThemeBrand","text":"<p>[androidJvm]\\ open suspend override fun setThemeBrand(themeBrand: ThemeBrand): Result&lt;Unit&gt;</p> <p>Sets the theme brand in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-theme-brand/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-theme-brand/#parameters","title":"Parameters","text":"<p>androidJvm</p> themeBrand The theme brand to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-user-profile/","title":"Set user profile","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/setUserProfile</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-user-profile/#setuserprofile","title":"setUserProfile","text":"<p>[androidJvm]\\ open suspend override fun setUserProfile(profile: Profile): Result&lt;Unit&gt;</p> <p>Sets the user Profile in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-user-profile/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/set-user-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user Profile to be set."},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/user-data/","title":"User data","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/userData</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ open override val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/user-finished-onboarding/","title":"User finished onboarding","text":"<p>//app/dev.atick.compose.repository.user/UserDataRepositoryImpl/userFinishedOnboarding</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/user-finished-onboarding/#userfinishedonboarding","title":"userFinishedOnboarding","text":"<p>[androidJvm]\\ open suspend override fun userFinishedOnboarding(): Result&lt;Unit&gt;</p> <p>Sets the user has finished onboarding in the user preferences.</p>"},{"location":"app/app/dev.atick.compose.repository.user/-user-data-repository-impl/user-finished-onboarding/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"app/app/dev.atick.compose.ui/","title":"Index","text":"<p>//app/dev.atick.compose.ui</p>"},{"location":"app/app/dev.atick.compose.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui/#types","title":"Types","text":"Name Summary JetpackAppState [androidJvm]@Stableclass JetpackAppState(val userOnboarded: Boolean, val navController: NavHostController, val windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)"},{"location":"app/app/dev.atick.compose.ui/#functions","title":"Functions","text":"Name Summary JetpackApp [androidJvm]@Composablefun JetpackApp(userOnboarded: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, appState: JetpackAppState = rememberJetpackAppState(         userOnboarded = userOnboarded,         windowSizeClass = windowSizeClass,         networkUtils = networkUtils,     )) JetpackBottomBar [androidJvm]@Composablefun JetpackBottomBar(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier) JetpackFloatingActionButton [androidJvm]@Composablefun JetpackFloatingActionButton(icon: ImageVector, @StringRestext: Int, onClick: () -&gt; Unit) JetpackNavRail [androidJvm]@Composablefun JetpackNavRail(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier) MonthSelector [androidJvm]@Composablefun MonthSelector(displayMonthYear: String, onNextMonthClick: () -&gt; Unit, onPreviousMonthClick: () -&gt; Unit) rememberJetpackAppState [androidJvm]@Composablefun rememberJetpackAppState(userOnboarded: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppState"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/","title":"jetpack app","text":"<p>//app/dev.atick.compose.ui/JetpackApp</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/#jetpackapp","title":"JetpackApp","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackApp(userOnboarded: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, appState: JetpackAppState = rememberJetpackAppState(         userOnboarded = userOnboarded,         windowSizeClass = windowSizeClass,         networkUtils = networkUtils,     ))</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-bottom-bar/","title":"jetpack bottom bar","text":"<p>//app/dev.atick.compose.ui/JetpackBottomBar</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-bottom-bar/#jetpackbottombar","title":"JetpackBottomBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackBottomBar(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-floating-action-button/","title":"jetpack floating action button","text":"<p>//app/dev.atick.compose.ui/JetpackFloatingActionButton</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-floating-action-button/#jetpackfloatingactionbutton","title":"JetpackFloatingActionButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackFloatingActionButton(icon: ImageVector, @StringRestext: Int, onClick: () -&gt; Unit)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-nav-rail/","title":"jetpack nav rail","text":"<p>//app/dev.atick.compose.ui/JetpackNavRail</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-nav-rail/#jetpacknavrail","title":"JetpackNavRail","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavRail(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui/-month-selector/","title":"month selector","text":"<p>//app/dev.atick.compose.ui/MonthSelector</p>"},{"location":"app/app/dev.atick.compose.ui/-month-selector/#monthselector","title":"MonthSelector","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun MonthSelector(displayMonthYear: String, onNextMonthClick: () -&gt; Unit, onPreviousMonthClick: () -&gt; Unit)</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/","title":"Remember jetpack app state","text":"<p>//app/dev.atick.compose.ui/rememberJetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#rememberjetpackappstate","title":"rememberJetpackAppState","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun rememberJetpackAppState(userOnboarded: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/","title":"Index","text":"<p>//app/dev.atick.compose.ui/JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ @Stable</p> <p>class JetpackAppState(val userOnboarded: Boolean, val navController: NavHostController, val windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#constructors","title":"Constructors","text":"JetpackAppState [androidJvm]constructor(userOnboarded: Boolean, navController: NavHostController, windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#properties","title":"Properties","text":"Name Summary currentDestination [androidJvm]@get:Composableval currentDestination: NavDestination? currentTopLevelDestination [androidJvm]@get:Composableval currentTopLevelDestination: TopLevelDestination? isOffline [androidJvm]val isOffline: StateFlow&lt;Boolean&gt; navController [androidJvm]val navController: NavHostController shouldShowBottomBar [androidJvm]@get:Composableval shouldShowBottomBar: Boolean shouldShowFab [androidJvm]@get:Composableval shouldShowFab: Boolean shouldShowMonthSelector [androidJvm]@get:Composableval shouldShowMonthSelector: Boolean shouldShowNavRail [androidJvm]@get:Composableval shouldShowNavRail: Boolean topLevelDestinations [androidJvm]val topLevelDestinations: List&lt;TopLevelDestination&gt; topLevelDestinationsWithUnreadResources [androidJvm]val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt; userOnboarded [androidJvm]val userOnboarded: Boolean windowSizeClass [androidJvm]val windowSizeClass: WindowSizeClass"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#functions","title":"Functions","text":"Name Summary navigateToEditBudgetScreen [androidJvm]fun navigateToEditBudgetScreen() navigateToEditExpenseScreen [androidJvm]fun navigateToEditExpenseScreen() navigateToTopLevelDestination [androidJvm]fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/","title":"jetpack app state","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ constructor(userOnboarded: Boolean, navController: NavHostController, windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-destination/","title":"Current destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/currentDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-destination/#currentdestination","title":"currentDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentDestination: NavDestination?</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/","title":"Current top level destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/currentTopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/#currenttopleveldestination","title":"currentTopLevelDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentTopLevelDestination: TopLevelDestination?</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-offline/","title":"Is offline","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/isOffline</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-offline/#isoffline","title":"isOffline","text":"<p>[androidJvm]\\ val isOffline: StateFlow&lt;Boolean&gt;</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/nav-controller/","title":"Nav controller","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navController</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/nav-controller/#navcontroller","title":"navController","text":"<p>[androidJvm]\\ val navController: NavHostController</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-edit-budget-screen/","title":"Navigate to edit budget screen","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navigateToEditBudgetScreen</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-edit-budget-screen/#navigatetoeditbudgetscreen","title":"navigateToEditBudgetScreen","text":"<p>[androidJvm]\\ fun navigateToEditBudgetScreen()</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-edit-expense-screen/","title":"Navigate to edit expense screen","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navigateToEditExpenseScreen</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-edit-expense-screen/#navigatetoeditexpensescreen","title":"navigateToEditExpenseScreen","text":"<p>[androidJvm]\\ fun navigateToEditExpenseScreen()</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/","title":"Navigate to top level destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navigateToTopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/#navigatetotopleveldestination","title":"navigateToTopLevelDestination","text":"<p>[androidJvm]\\ fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-bottom-bar/","title":"Should show bottom bar","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowBottomBar</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-bottom-bar/#shouldshowbottombar","title":"shouldShowBottomBar","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowBottomBar: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-fab/","title":"Should show fab","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowFab</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-fab/#shouldshowfab","title":"shouldShowFab","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowFab: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-month-selector/","title":"Should show month selector","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowMonthSelector</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-month-selector/#shouldshowmonthselector","title":"shouldShowMonthSelector","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowMonthSelector: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-nav-rail/","title":"Should show nav rail","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowNavRail</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-nav-rail/#shouldshownavrail","title":"shouldShowNavRail","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowNavRail: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/","title":"Top level destinations with unread resources","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/topLevelDestinationsWithUnreadResources</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/#topleveldestinationswithunreadresources","title":"topLevelDestinationsWithUnreadResources","text":"<p>[androidJvm]\\ val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/","title":"Top level destinations","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/topLevelDestinations</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/#topleveldestinations","title":"topLevelDestinations","text":"<p>[androidJvm]\\ val topLevelDestinations: List&lt;TopLevelDestination&gt;</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/user-onboarded/","title":"User onboarded","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/userOnboarded</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/user-onboarded/#useronboarded","title":"userOnboarded","text":"<p>[androidJvm]\\ val userOnboarded: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/window-size-class/","title":"Window size class","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/windowSizeClass</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/window-size-class/#windowsizeclass","title":"windowSizeClass","text":"<p>[androidJvm]\\ val windowSizeClass: WindowSizeClass</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/","title":"Index","text":"<p>//app/dev.atick.compose.ui.analysis</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.analysis/#types","title":"Types","text":"Name Summary AnalysisViewModel [androidJvm]class AnalysisViewModel@Injectconstructor(analysisRepository: AnalysisRepository) : ViewModel"},{"location":"app/app/dev.atick.compose.ui.analysis/#functions","title":"Functions","text":"Name Summary ExpenseDistributionChart [androidJvm]@Composablefun ExpenseDistributionChart(analyses: List&lt;UiAnalysis&gt;, modifier: Modifier = Modifier) ExpenseDistributionChartPreview [androidJvm]@Preview@Composablefun ExpenseDistributionChartPreview()"},{"location":"app/app/dev.atick.compose.ui.analysis/-expense-distribution-chart-preview/","title":"expense distribution chart preview","text":"<p>//app/dev.atick.compose.ui.analysis/ExpenseDistributionChartPreview</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-expense-distribution-chart-preview/#expensedistributionchartpreview","title":"ExpenseDistributionChartPreview","text":"<p>[androidJvm]\\</p> <p>@Preview</p> <p>@Composable</p> <p>fun ExpenseDistributionChartPreview()</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-expense-distribution-chart/","title":"expense distribution chart","text":"<p>//app/dev.atick.compose.ui.analysis/ExpenseDistributionChart</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-expense-distribution-chart/#expensedistributionchart","title":"ExpenseDistributionChart","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun ExpenseDistributionChart(analyses: List&lt;UiAnalysis&gt;, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.analysis/AnalysisViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/#analysisviewmodel","title":"AnalysisViewModel","text":"<p>[androidJvm]\\ class AnalysisViewModel@Injectconstructor(analysisRepository: AnalysisRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/#constructors","title":"Constructors","text":"AnalysisViewModel [androidJvm]@Injectconstructor(analysisRepository: AnalysisRepository)"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/#properties","title":"Properties","text":"Name Summary analysisUiState [androidJvm]val analysisUiState: StateFlow&lt;UiState&lt;AnalysisScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? refreshAnalysis [androidJvm]fun refreshAnalysis(monthInfo: MonthInfo)"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/-analysis-view-model/","title":"analysis view model","text":"<p>//app/dev.atick.compose.ui.analysis/AnalysisViewModel/AnalysisViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/-analysis-view-model/#analysisviewmodel","title":"AnalysisViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(analysisRepository: AnalysisRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/analysis-ui-state/","title":"Analysis ui state","text":"<p>//app/dev.atick.compose.ui.analysis/AnalysisViewModel/analysisUiState</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/analysis-ui-state/#analysisuistate","title":"analysisUiState","text":"<p>[androidJvm]\\ val analysisUiState: StateFlow&lt;UiState&lt;AnalysisScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/refresh-analysis/","title":"Refresh analysis","text":"<p>//app/dev.atick.compose.ui.analysis/AnalysisViewModel/refreshAnalysis</p>"},{"location":"app/app/dev.atick.compose.ui.analysis/-analysis-view-model/refresh-analysis/#refreshanalysis","title":"refreshAnalysis","text":"<p>[androidJvm]\\ fun refreshAnalysis(monthInfo: MonthInfo)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/","title":"Index","text":"<p>//app/dev.atick.compose.ui.budgets</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.budgets/#types","title":"Types","text":"Name Summary BudgetsViewModel [androidJvm]class BudgetsViewModel@Injectconstructor(budgetsRepository: BudgetsRepository) : ViewModel EditBudgetViewModel [androidJvm]class EditBudgetViewModel@Injectconstructor(budgetsRepository: BudgetsRepository) : ViewModel"},{"location":"app/app/dev.atick.compose.ui.budgets/#functions","title":"Functions","text":"Name Summary BudgetChart [androidJvm]@Composablefun BudgetChart(data: BudgetsScreenData, modifier: Modifier = Modifier) BudgetNotSetCard [androidJvm]@Composablefun BudgetNotSetCard(modifier: Modifier = Modifier) BudgetStatusCard [androidJvm]@Composablefun BudgetStatusCard(screenData: BudgetsScreenData, currencyFormatter: NumberFormat, modifier: Modifier = Modifier)"},{"location":"app/app/dev.atick.compose.ui.budgets/-budget-chart/","title":"budget chart","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetChart</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budget-chart/#budgetchart","title":"BudgetChart","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun BudgetChart(data: BudgetsScreenData, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budget-not-set-card/","title":"budget not set card","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetNotSetCard</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budget-not-set-card/#budgetnotsetcard","title":"BudgetNotSetCard","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun BudgetNotSetCard(modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budget-status-card/","title":"budget status card","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetStatusCard</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budget-status-card/#budgetstatuscard","title":"BudgetStatusCard","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun BudgetStatusCard(screenData: BudgetsScreenData, currencyFormatter: NumberFormat, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetsViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/#budgetsviewmodel","title":"BudgetsViewModel","text":"<p>[androidJvm]\\ class BudgetsViewModel@Injectconstructor(budgetsRepository: BudgetsRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/#constructors","title":"Constructors","text":"BudgetsViewModel [androidJvm]@Injectconstructor(budgetsRepository: BudgetsRepository)"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/#properties","title":"Properties","text":"Name Summary budgetsUiState [androidJvm]val budgetsUiState: StateFlow&lt;UiState&lt;BudgetsScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? refreshBudgets [androidJvm]fun refreshBudgets(monthInfo: MonthInfo)"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/-budgets-view-model/","title":"budgets view model","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetsViewModel/BudgetsViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/-budgets-view-model/#budgetsviewmodel","title":"BudgetsViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(budgetsRepository: BudgetsRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/budgets-ui-state/","title":"Budgets ui state","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetsViewModel/budgetsUiState</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/budgets-ui-state/#budgetsuistate","title":"budgetsUiState","text":"<p>[androidJvm]\\ val budgetsUiState: StateFlow&lt;UiState&lt;BudgetsScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/refresh-budgets/","title":"Refresh budgets","text":"<p>//app/dev.atick.compose.ui.budgets/BudgetsViewModel/refreshBudgets</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-budgets-view-model/refresh-budgets/#refreshbudgets","title":"refreshBudgets","text":"<p>[androidJvm]\\ fun refreshBudgets(monthInfo: MonthInfo)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.budgets/EditBudgetViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/#editbudgetviewmodel","title":"EditBudgetViewModel","text":"<p>[androidJvm]\\ class EditBudgetViewModel@Injectconstructor(budgetsRepository: BudgetsRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/#constructors","title":"Constructors","text":"EditBudgetViewModel [androidJvm]@Injectconstructor(budgetsRepository: BudgetsRepository)"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/#properties","title":"Properties","text":"Name Summary editBudgetUiState [androidJvm]val editBudgetUiState: StateFlow&lt;UiState&lt;EditBudgetScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? refreshBudget [androidJvm]fun refreshBudget(monthInfo: MonthInfo) saveBudget [androidJvm]fun saveBudget(monthInfo: MonthInfo) updateAmount [androidJvm]fun updateAmount(amount: String)"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/-edit-budget-view-model/","title":"edit budget view model","text":"<p>//app/dev.atick.compose.ui.budgets/EditBudgetViewModel/EditBudgetViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/-edit-budget-view-model/#editbudgetviewmodel","title":"EditBudgetViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(budgetsRepository: BudgetsRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/edit-budget-ui-state/","title":"Edit budget ui state","text":"<p>//app/dev.atick.compose.ui.budgets/EditBudgetViewModel/editBudgetUiState</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/edit-budget-ui-state/#editbudgetuistate","title":"editBudgetUiState","text":"<p>[androidJvm]\\ val editBudgetUiState: StateFlow&lt;UiState&lt;EditBudgetScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/refresh-budget/","title":"Refresh budget","text":"<p>//app/dev.atick.compose.ui.budgets/EditBudgetViewModel/refreshBudget</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/refresh-budget/#refreshbudget","title":"refreshBudget","text":"<p>[androidJvm]\\ fun refreshBudget(monthInfo: MonthInfo)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/save-budget/","title":"Save budget","text":"<p>//app/dev.atick.compose.ui.budgets/EditBudgetViewModel/saveBudget</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/save-budget/#savebudget","title":"saveBudget","text":"<p>[androidJvm]\\ fun saveBudget(monthInfo: MonthInfo)</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/update-amount/","title":"Update amount","text":"<p>//app/dev.atick.compose.ui.budgets/EditBudgetViewModel/updateAmount</p>"},{"location":"app/app/dev.atick.compose.ui.budgets/-edit-budget-view-model/update-amount/#updateamount","title":"updateAmount","text":"<p>[androidJvm]\\ fun updateAmount(amount: String)</p>"},{"location":"app/app/dev.atick.compose.ui.chat/","title":"Index","text":"<p>//app/dev.atick.compose.ui.chat</p>"},{"location":"app/app/dev.atick.compose.ui.chat/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.chat/#types","title":"Types","text":"Name Summary ChatViewModel [androidJvm]class ChatViewModel@Injectconstructor(chatRepository: ChatRepository) : ViewModel"},{"location":"app/app/dev.atick.compose.ui.chat/#functions","title":"Functions","text":"Name Summary ChatMessageItem [androidJvm]@Composablefun ChatMessageItem(message: UiMessage, modifier: Modifier = Modifier)"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-message-item/","title":"chat message item","text":"<p>//app/dev.atick.compose.ui.chat/ChatMessageItem</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-message-item/#chatmessageitem","title":"ChatMessageItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun ChatMessageItem(message: UiMessage, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.chat/ChatViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/#chatviewmodel","title":"ChatViewModel","text":"<p>[androidJvm]\\ class ChatViewModel@Injectconstructor(chatRepository: ChatRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/#constructors","title":"Constructors","text":"ChatViewModel [androidJvm]@Injectconstructor(chatRepository: ChatRepository)"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/#properties","title":"Properties","text":"Name Summary chatUiState [androidJvm]val chatUiState: StateFlow&lt;UiState&lt;ChatScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? initializeChat [androidJvm]fun initializeChat(monthInfo: MonthInfo, historyDepth: Int) onNewMessageUpdate [androidJvm]fun onNewMessageUpdate(newMessage: String) onSendMessage [androidJvm]fun onSendMessage()"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/-chat-view-model/","title":"chat view model","text":"<p>//app/dev.atick.compose.ui.chat/ChatViewModel/ChatViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/-chat-view-model/#chatviewmodel","title":"ChatViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(chatRepository: ChatRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/chat-ui-state/","title":"Chat ui state","text":"<p>//app/dev.atick.compose.ui.chat/ChatViewModel/chatUiState</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/chat-ui-state/#chatuistate","title":"chatUiState","text":"<p>[androidJvm]\\ val chatUiState: StateFlow&lt;UiState&lt;ChatScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/initialize-chat/","title":"Initialize chat","text":"<p>//app/dev.atick.compose.ui.chat/ChatViewModel/initializeChat</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/initialize-chat/#initializechat","title":"initializeChat","text":"<p>[androidJvm]\\ fun initializeChat(monthInfo: MonthInfo, historyDepth: Int)</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/on-new-message-update/","title":"On new message update","text":"<p>//app/dev.atick.compose.ui.chat/ChatViewModel/onNewMessageUpdate</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/on-new-message-update/#onnewmessageupdate","title":"onNewMessageUpdate","text":"<p>[androidJvm]\\ fun onNewMessageUpdate(newMessage: String)</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/on-send-message/","title":"On send message","text":"<p>//app/dev.atick.compose.ui.chat/ChatViewModel/onSendMessage</p>"},{"location":"app/app/dev.atick.compose.ui.chat/-chat-view-model/on-send-message/#onsendmessage","title":"onSendMessage","text":"<p>[androidJvm]\\ fun onSendMessage()</p>"},{"location":"app/app/dev.atick.compose.ui.common/","title":"Index","text":"<p>//app/dev.atick.compose.ui.common</p>"},{"location":"app/app/dev.atick.compose.ui.common/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.common/#functions","title":"Functions","text":"Name Summary ExpenseCard [androidJvm]@Composablefun ExpenseCard(expense: UiExpense, onExpenseClick: (Long) -&gt; Unit? = null, onRecurringTypeClick: (String, UiRecurringType) -&gt; Unit? = null, onCancellationClick: (String, Boolean) -&gt; Unit? = null, modifier: Modifier = Modifier) Placeholder [androidJvm]@Composablefun Placeholder(@DrawableResillustration: Int = R.drawable.empty_placeholder, @StringRestitle: Int = R.string.placeholder_title, @StringResdescription: Int = R.string.placeholder_default_description, modifier: Modifier = Modifier.fillMaxSize().padding(horizontal = 48.dp))"},{"location":"app/app/dev.atick.compose.ui.common/-expense-card/","title":"expense card","text":"<p>//app/dev.atick.compose.ui.common/ExpenseCard</p>"},{"location":"app/app/dev.atick.compose.ui.common/-expense-card/#expensecard","title":"ExpenseCard","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun ExpenseCard(expense: UiExpense, onExpenseClick: (Long) -&gt; Unit? = null, onRecurringTypeClick: (String, UiRecurringType) -&gt; Unit? = null, onCancellationClick: (String, Boolean) -&gt; Unit? = null, modifier: Modifier = Modifier)</p>"},{"location":"app/app/dev.atick.compose.ui.common/-placeholder/","title":"placeholder","text":"<p>//app/dev.atick.compose.ui.common/Placeholder</p>"},{"location":"app/app/dev.atick.compose.ui.common/-placeholder/#placeholder","title":"Placeholder","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun Placeholder(@DrawableResillustration: Int = R.drawable.empty_placeholder, @StringRestitle: Int = R.string.placeholder_title, @StringResdescription: Int = R.string.placeholder_default_description, modifier: Modifier = Modifier.fillMaxSize().padding(horizontal = 48.dp))</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/","title":"Index","text":"<p>//app/dev.atick.compose.ui.expenses</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.expenses/#types","title":"Types","text":"Name Summary EditExpenseViewModel [androidJvm]class EditExpenseViewModel@Injectconstructor(savedStateHandle: SavedStateHandle, expenseRepository: ExpensesRepository) : ViewModel ExpensesViewModel [androidJvm]class ExpensesViewModel@Injectconstructor(expensesRepository: ExpensesRepository) : ViewModel"},{"location":"app/app/dev.atick.compose.ui.expenses/#functions","title":"Functions","text":"Name Summary EditExpenseScreen [androidJvm]@Composablefun EditExpenseScreen(expense: EditExpenseScreenData, onAmountChange: (String) -&gt; Unit, onCategoryChange: (UiCategoryType) -&gt; Unit, onPaymentStatusChange: (UiPaymentStatus) -&gt; Unit, onRecurringTypeChange: (UiRecurringType) -&gt; Unit, onDescriptionChange: (String) -&gt; Unit, onToBeCancelledChange: (Boolean) -&gt; Unit, onSave: () -&gt; Unit, onCancel: () -&gt; Unit) SwipeableItem [androidJvm]@Composablefun SwipeableItem(onDelete: () -&gt; Unit, content: @Composable() -&gt; Unit)"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-screen/","title":"edit expense screen","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseScreen</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-screen/#editexpensescreen","title":"EditExpenseScreen","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun EditExpenseScreen(expense: EditExpenseScreenData, onAmountChange: (String) -&gt; Unit, onCategoryChange: (UiCategoryType) -&gt; Unit, onPaymentStatusChange: (UiPaymentStatus) -&gt; Unit, onRecurringTypeChange: (UiRecurringType) -&gt; Unit, onDescriptionChange: (String) -&gt; Unit, onToBeCancelledChange: (Boolean) -&gt; Unit, onSave: () -&gt; Unit, onCancel: () -&gt; Unit)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-swipeable-item/","title":"swipeable item","text":"<p>//app/dev.atick.compose.ui.expenses/SwipeableItem</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-swipeable-item/#swipeableitem","title":"SwipeableItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SwipeableItem(onDelete: () -&gt; Unit, content: @Composable() -&gt; Unit)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/#editexpenseviewmodel","title":"EditExpenseViewModel","text":"<p>[androidJvm]\\ class EditExpenseViewModel@Injectconstructor(savedStateHandle: SavedStateHandle, expenseRepository: ExpensesRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/#constructors","title":"Constructors","text":"EditExpenseViewModel [androidJvm]@Injectconstructor(savedStateHandle: SavedStateHandle, expenseRepository: ExpensesRepository)"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/#properties","title":"Properties","text":"Name Summary expenseUiState [androidJvm]val expenseUiState: StateFlow&lt;UiState&lt;EditExpenseScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? getExpense [androidJvm]fun getExpense() saveExpense [androidJvm]fun saveExpense() setAmount [androidJvm]fun setAmount(amount: String) setCategory [androidJvm]fun setCategory(category: UiCategoryType) setDescription [androidJvm]fun setDescription(description: String) setDueDate [androidJvm]fun setDueDate(dueDate: Long) setPaymentDate [androidJvm]fun setPaymentDate(paymentDate: Long) setPaymentStatus [androidJvm]fun setPaymentStatus(paymentStatus: UiPaymentStatus) setRecurringType [androidJvm]fun setRecurringType(recurringType: UiRecurringType) setToBeCancelled [androidJvm]fun setToBeCancelled(toBeCancelled: Boolean)"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/-edit-expense-view-model/","title":"edit expense view model","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/EditExpenseViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/-edit-expense-view-model/#editexpenseviewmodel","title":"EditExpenseViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(savedStateHandle: SavedStateHandle, expenseRepository: ExpensesRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/expense-ui-state/","title":"Expense ui state","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/expenseUiState</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/expense-ui-state/#expenseuistate","title":"expenseUiState","text":"<p>[androidJvm]\\ val expenseUiState: StateFlow&lt;UiState&lt;EditExpenseScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/get-expense/","title":"Get expense","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/getExpense</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/get-expense/#getexpense","title":"getExpense","text":"<p>[androidJvm]\\ fun getExpense()</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/save-expense/","title":"Save expense","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/saveExpense</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/save-expense/#saveexpense","title":"saveExpense","text":"<p>[androidJvm]\\ fun saveExpense()</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-amount/","title":"Set amount","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setAmount</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-amount/#setamount","title":"setAmount","text":"<p>[androidJvm]\\ fun setAmount(amount: String)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-category/","title":"Set category","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setCategory</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-category/#setcategory","title":"setCategory","text":"<p>[androidJvm]\\ fun setCategory(category: UiCategoryType)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-description/","title":"Set description","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setDescription</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-description/#setdescription","title":"setDescription","text":"<p>[androidJvm]\\ fun setDescription(description: String)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-due-date/","title":"Set due date","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setDueDate</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-due-date/#setduedate","title":"setDueDate","text":"<p>[androidJvm]\\ fun setDueDate(dueDate: Long)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-payment-date/","title":"Set payment date","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setPaymentDate</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-payment-date/#setpaymentdate","title":"setPaymentDate","text":"<p>[androidJvm]\\ fun setPaymentDate(paymentDate: Long)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-payment-status/","title":"Set payment status","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setPaymentStatus</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-payment-status/#setpaymentstatus","title":"setPaymentStatus","text":"<p>[androidJvm]\\ fun setPaymentStatus(paymentStatus: UiPaymentStatus)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-recurring-type/","title":"Set recurring type","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setRecurringType</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-recurring-type/#setrecurringtype","title":"setRecurringType","text":"<p>[androidJvm]\\ fun setRecurringType(recurringType: UiRecurringType)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-to-be-cancelled/","title":"Set to be cancelled","text":"<p>//app/dev.atick.compose.ui.expenses/EditExpenseViewModel/setToBeCancelled</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-edit-expense-view-model/set-to-be-cancelled/#settobecancelled","title":"setToBeCancelled","text":"<p>[androidJvm]\\ fun setToBeCancelled(toBeCancelled: Boolean)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/#expensesviewmodel","title":"ExpensesViewModel","text":"<p>[androidJvm]\\ class ExpensesViewModel@Injectconstructor(expensesRepository: ExpensesRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/#constructors","title":"Constructors","text":"ExpensesViewModel [androidJvm]@Injectconstructor(expensesRepository: ExpensesRepository)"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/#properties","title":"Properties","text":"Name Summary expensesUiState [androidJvm]val expensesUiState: StateFlow&lt;UiState&lt;ExpensesScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) deleteExpense [androidJvm]fun deleteExpense(expense: UiExpense) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? refreshExpenses [androidJvm]fun refreshExpenses(monthInfo: MonthInfo) requestSmsSync [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")fun requestSmsSync() setRecurringType [androidJvm]fun setRecurringType(merchant: String, recurringType: UiRecurringType)"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/-expenses-view-model/","title":"expenses view model","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel/ExpensesViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/-expenses-view-model/#expensesviewmodel","title":"ExpensesViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(expensesRepository: ExpensesRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/delete-expense/","title":"Delete expense","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel/deleteExpense</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/delete-expense/#deleteexpense","title":"deleteExpense","text":"<p>[androidJvm]\\ fun deleteExpense(expense: UiExpense)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/expenses-ui-state/","title":"Expenses ui state","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel/expensesUiState</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/expenses-ui-state/#expensesuistate","title":"expensesUiState","text":"<p>[androidJvm]\\ val expensesUiState: StateFlow&lt;UiState&lt;ExpensesScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/refresh-expenses/","title":"Refresh expenses","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel/refreshExpenses</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/refresh-expenses/#refreshexpenses","title":"refreshExpenses","text":"<p>[androidJvm]\\ fun refreshExpenses(monthInfo: MonthInfo)</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/request-sms-sync/","title":"Request sms sync","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel/requestSmsSync</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/request-sms-sync/#requestsmssync","title":"requestSmsSync","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>fun requestSmsSync()</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/set-recurring-type/","title":"Set recurring type","text":"<p>//app/dev.atick.compose.ui.expenses/ExpensesViewModel/setRecurringType</p>"},{"location":"app/app/dev.atick.compose.ui.expenses/-expenses-view-model/set-recurring-type/#setrecurringtype","title":"setRecurringType","text":"<p>[androidJvm]\\ fun setRecurringType(merchant: String, recurringType: UiRecurringType)</p>"},{"location":"app/app/dev.atick.compose.ui.intro/","title":"Index","text":"<p>//app/dev.atick.compose.ui.intro</p>"},{"location":"app/app/dev.atick.compose.ui.intro/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.intro/#types","title":"Types","text":"Name Summary IntroViewModel [androidJvm]class IntroViewModel@Injectconstructor(userDataRepository: UserDataRepository) : ViewModel OnboardingPage [androidJvm]data class OnboardingPage(@DrawableResval imageRes: Int, @StringResval title: Int, @StringResval description: Int)"},{"location":"app/app/dev.atick.compose.ui.intro/#properties","title":"Properties","text":"Name Summary onboardingPages [androidJvm]val onboardingPages: List&lt;OnboardingPage&gt;"},{"location":"app/app/dev.atick.compose.ui.intro/#functions","title":"Functions","text":"Name Summary OnboardingScreenPreview [androidJvm]@Preview@Composablefun OnboardingScreenPreview()"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-screen-preview/","title":"onboarding screen preview","text":"<p>//app/dev.atick.compose.ui.intro/OnboardingScreenPreview</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-screen-preview/#onboardingscreenpreview","title":"OnboardingScreenPreview","text":"<p>[androidJvm]\\</p> <p>@Preview</p> <p>@Composable</p> <p>fun OnboardingScreenPreview()</p>"},{"location":"app/app/dev.atick.compose.ui.intro/onboarding-pages/","title":"Onboarding pages","text":"<p>//app/dev.atick.compose.ui.intro/onboardingPages</p>"},{"location":"app/app/dev.atick.compose.ui.intro/onboarding-pages/#onboardingpages","title":"onboardingPages","text":"<p>[androidJvm]\\ val onboardingPages: List&lt;OnboardingPage&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.intro/IntroViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/#introviewmodel","title":"IntroViewModel","text":"<p>[androidJvm]\\ class IntroViewModel@Injectconstructor(userDataRepository: UserDataRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/#constructors","title":"Constructors","text":"IntroViewModel [androidJvm]@Injectconstructor(userDataRepository: UserDataRepository)"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/#properties","title":"Properties","text":"Name Summary introUiState [androidJvm]val introUiState: StateFlow&lt;UiState&lt;Unit&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? userFinishedIntro [androidJvm]fun userFinishedIntro()"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/-intro-view-model/","title":"intro view model","text":"<p>//app/dev.atick.compose.ui.intro/IntroViewModel/IntroViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/-intro-view-model/#introviewmodel","title":"IntroViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userDataRepository: UserDataRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/intro-ui-state/","title":"Intro ui state","text":"<p>//app/dev.atick.compose.ui.intro/IntroViewModel/introUiState</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/intro-ui-state/#introuistate","title":"introUiState","text":"<p>[androidJvm]\\ val introUiState: StateFlow&lt;UiState&lt;Unit&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/user-finished-intro/","title":"User finished intro","text":"<p>//app/dev.atick.compose.ui.intro/IntroViewModel/userFinishedIntro</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-intro-view-model/user-finished-intro/#userfinishedintro","title":"userFinishedIntro","text":"<p>[androidJvm]\\ fun userFinishedIntro()</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/","title":"Index","text":"<p>//app/dev.atick.compose.ui.intro/OnboardingPage</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/#onboardingpage","title":"OnboardingPage","text":"<p>[androidJvm]\\ data class OnboardingPage(@DrawableResval imageRes: Int, @StringResval title: Int, @StringResval description: Int)</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/#constructors","title":"Constructors","text":"OnboardingPage [androidJvm]constructor(@DrawableResimageRes: Int, @StringRestitle: Int, @StringResdescription: Int)"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int imageRes [androidJvm]val imageRes: Int title [androidJvm]val title: Int"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/-onboarding-page/","title":"onboarding page","text":"<p>//app/dev.atick.compose.ui.intro/OnboardingPage/OnboardingPage</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/-onboarding-page/#onboardingpage","title":"OnboardingPage","text":"<p>[androidJvm]\\ constructor(@DrawableResimageRes: Int, @StringRestitle: Int, @StringResdescription: Int)</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/description/","title":"Description","text":"<p>//app/dev.atick.compose.ui.intro/OnboardingPage/description</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/description/#description","title":"description","text":"<p>[androidJvm]\\ val description: Int</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/image-res/","title":"Image res","text":"<p>//app/dev.atick.compose.ui.intro/OnboardingPage/imageRes</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/image-res/#imageres","title":"imageRes","text":"<p>[androidJvm]\\ val imageRes: Int</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/title/","title":"Title","text":"<p>//app/dev.atick.compose.ui.intro/OnboardingPage/title</p>"},{"location":"app/app/dev.atick.compose.ui.intro/-onboarding-page/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: Int</p>"},{"location":"app/app/dev.atick.compose.ui.settings/","title":"Index","text":"<p>//app/dev.atick.compose.ui.settings</p>"},{"location":"app/app/dev.atick.compose.ui.settings/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.settings/#types","title":"Types","text":"Name Summary SettingsViewModel [androidJvm]class SettingsViewModel@Injectconstructor(userDataRepository: UserDataRepository) : ViewModel"},{"location":"app/app/dev.atick.compose.ui.settings/#functions","title":"Functions","text":"Name Summary SettingsDialog [androidJvm]@Composablefun SettingsDialog(onDismiss: () -&gt; Unit, viewModel: SettingsViewModel = hiltViewModel())@Composablefun SettingsDialog(settingsUiState: UiState&lt;UserEditableSettings&gt;, supportDynamicColor: Boolean = supportsDynamicTheming(), onDismiss: () -&gt; Unit, onChangeLanguage: (String) -&gt; Unit, onChangeThemeBrand: (themeBrand: ThemeBrand) -&gt; Unit, onChangeDynamicColorPreference: (useDynamicColor: Boolean) -&gt; Unit, onChangeDarkThemeConfig: (darkThemeConfig: DarkThemeConfig) -&gt; Unit) SettingsDialogThemeChooserRow [androidJvm]@Composablefun SettingsDialogThemeChooserRow(text: String, selected: Boolean, onClick: () -&gt; Unit)"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-dialog-theme-chooser-row/","title":"settings dialog theme chooser row","text":"<p>//app/dev.atick.compose.ui.settings/SettingsDialogThemeChooserRow</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-dialog-theme-chooser-row/#settingsdialogthemechooserrow","title":"SettingsDialogThemeChooserRow","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SettingsDialogThemeChooserRow(text: String, selected: Boolean, onClick: () -&gt; Unit)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-dialog/","title":"settings dialog","text":"<p>//app/dev.atick.compose.ui.settings/SettingsDialog</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-dialog/#settingsdialog","title":"SettingsDialog","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SettingsDialog(onDismiss: () -&gt; Unit, viewModel: SettingsViewModel = hiltViewModel())</p> <p>@Composable</p> <p>fun SettingsDialog(settingsUiState: UiState&lt;UserEditableSettings&gt;, supportDynamicColor: Boolean = supportsDynamicTheming(), onDismiss: () -&gt; Unit, onChangeLanguage: (String) -&gt; Unit, onChangeThemeBrand: (themeBrand: ThemeBrand) -&gt; Unit, onChangeDynamicColorPreference: (useDynamicColor: Boolean) -&gt; Unit, onChangeDarkThemeConfig: (darkThemeConfig: DarkThemeConfig) -&gt; Unit)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/#settingsviewmodel","title":"SettingsViewModel","text":"<p>[androidJvm]\\ class SettingsViewModel@Injectconstructor(userDataRepository: UserDataRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/#constructors","title":"Constructors","text":"SettingsViewModel [androidJvm]@Injectconstructor(userDataRepository: UserDataRepository)"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/#properties","title":"Properties","text":"Name Summary settingsUiState [androidJvm]val settingsUiState: StateFlow&lt;UiState&lt;UserEditableSettings&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? updateDarkThemeConfig [androidJvm]fun updateDarkThemeConfig(darkThemeConfig: DarkThemeConfig) updateDynamicColorPreference [androidJvm]fun updateDynamicColorPreference(useDynamicColor: Boolean) updateLanguage [androidJvm]fun updateLanguage(language: String) updateThemeBrand [androidJvm]fun updateThemeBrand(themeBrand: ThemeBrand) updateUserData [androidJvm]fun updateUserData()"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/-settings-view-model/","title":"settings view model","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/SettingsViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/-settings-view-model/#settingsviewmodel","title":"SettingsViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userDataRepository: UserDataRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/settings-ui-state/","title":"Settings ui state","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/settingsUiState</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/settings-ui-state/#settingsuistate","title":"settingsUiState","text":"<p>[androidJvm]\\ val settingsUiState: StateFlow&lt;UiState&lt;UserEditableSettings&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-dark-theme-config/","title":"Update dark theme config","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/updateDarkThemeConfig</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-dark-theme-config/#updatedarkthemeconfig","title":"updateDarkThemeConfig","text":"<p>[androidJvm]\\ fun updateDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-dynamic-color-preference/","title":"Update dynamic color preference","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/updateDynamicColorPreference</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-dynamic-color-preference/#updatedynamiccolorpreference","title":"updateDynamicColorPreference","text":"<p>[androidJvm]\\ fun updateDynamicColorPreference(useDynamicColor: Boolean)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-language/","title":"Update language","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/updateLanguage</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-language/#updatelanguage","title":"updateLanguage","text":"<p>[androidJvm]\\ fun updateLanguage(language: String)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-theme-brand/","title":"Update theme brand","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/updateThemeBrand</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-theme-brand/#updatethemebrand","title":"updateThemeBrand","text":"<p>[androidJvm]\\ fun updateThemeBrand(themeBrand: ThemeBrand)</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-user-data/","title":"Update user data","text":"<p>//app/dev.atick.compose.ui.settings/SettingsViewModel/updateUserData</p>"},{"location":"app/app/dev.atick.compose.ui.settings/-settings-view-model/update-user-data/#updateuserdata","title":"updateUserData","text":"<p>[androidJvm]\\ fun updateUserData()</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/","title":"Index","text":"<p>//app/dev.atick.compose.ui.subscriptions</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.subscriptions/#types","title":"Types","text":"Name Summary SubscriptionsViewModel [androidJvm]class SubscriptionsViewModel@Injectconstructor(subscriptionsRepository: SubscriptionsRepository, expensesRepository: ExpensesRepository) : ViewModel"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.subscriptions/SubscriptionsViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/#subscriptionsviewmodel","title":"SubscriptionsViewModel","text":"<p>[androidJvm]\\ class SubscriptionsViewModel@Injectconstructor(subscriptionsRepository: SubscriptionsRepository, expensesRepository: ExpensesRepository) : ViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/#constructors","title":"Constructors","text":"SubscriptionsViewModel [androidJvm]@Injectconstructor(subscriptionsRepository: SubscriptionsRepository, expensesRepository: ExpensesRepository)"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/#properties","title":"Properties","text":"Name Summary subscriptionsUiState [androidJvm]val subscriptionsUiState: StateFlow&lt;UiState&lt;SubscriptionsScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? refreshSubscriptions [androidJvm]fun refreshSubscriptions() setCancellation [androidJvm]fun setCancellation(merchant: String, toBeCancelled: Boolean) setRecurringType [androidJvm]fun setRecurringType(merchant: String, recurringType: UiRecurringType)"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/-subscriptions-view-model/","title":"subscriptions view model","text":"<p>//app/dev.atick.compose.ui.subscriptions/SubscriptionsViewModel/SubscriptionsViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/-subscriptions-view-model/#subscriptionsviewmodel","title":"SubscriptionsViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(subscriptionsRepository: SubscriptionsRepository, expensesRepository: ExpensesRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/refresh-subscriptions/","title":"Refresh subscriptions","text":"<p>//app/dev.atick.compose.ui.subscriptions/SubscriptionsViewModel/refreshSubscriptions</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/refresh-subscriptions/#refreshsubscriptions","title":"refreshSubscriptions","text":"<p>[androidJvm]\\ fun refreshSubscriptions()</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/set-cancellation/","title":"Set cancellation","text":"<p>//app/dev.atick.compose.ui.subscriptions/SubscriptionsViewModel/setCancellation</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/set-cancellation/#setcancellation","title":"setCancellation","text":"<p>[androidJvm]\\ fun setCancellation(merchant: String, toBeCancelled: Boolean)</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/set-recurring-type/","title":"Set recurring type","text":"<p>//app/dev.atick.compose.ui.subscriptions/SubscriptionsViewModel/setRecurringType</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/set-recurring-type/#setrecurringtype","title":"setRecurringType","text":"<p>[androidJvm]\\ fun setRecurringType(merchant: String, recurringType: UiRecurringType)</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/subscriptions-ui-state/","title":"Subscriptions ui state","text":"<p>//app/dev.atick.compose.ui.subscriptions/SubscriptionsViewModel/subscriptionsUiState</p>"},{"location":"app/app/dev.atick.compose.ui.subscriptions/-subscriptions-view-model/subscriptions-ui-state/#subscriptionsuistate","title":"subscriptionsUiState","text":"<p>[androidJvm]\\ val subscriptionsUiState: StateFlow&lt;UiState&lt;SubscriptionsScreenData&gt;&gt;</p>"},{"location":"app/app/dev.atick.compose.worker/","title":"Index","text":"<p>//app/dev.atick.compose.worker</p>"},{"location":"app/app/dev.atick.compose.worker/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.worker/#types","title":"Types","text":"Name Summary BudgetReminderWorker [androidJvm]class BudgetReminderWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters) : CoroutineWorkerWorker that shows a notification when the budget amount is exceeded. CancellationReminderWorker [androidJvm]class CancellationReminderWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters) : CoroutineWorkerWorker that shows a notification when the cancellation reminder is due. DelegatingWorker [androidJvm]class DelegatingWorker(appContext: Context, workerParams: WorkerParameters) : CoroutineWorkerA worker that delegates sync to another CoroutineWorker constructed with a HiltWorkerFactory. HiltWorkerFactoryEntryPoint [androidJvm]interface HiltWorkerFactoryEntryPointAn entry point to retrieve the HiltWorkerFactory at runtime PaymentReminderWorker [androidJvm]class PaymentReminderWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters) : CoroutineWorkerWorker that shows a notification when the payment reminder is due. Reminders [androidJvm]object RemindersObject that schedules reminders for payment, cancellation, and budget exceed warnings. Sync [androidJvm]object Sync SyncProgress [androidJvm]data class SyncProgress(val total: Int = 0, val current: Int = 0, val message: String? = null)Data class that represents the progress of a sync operation. SyncWorker [androidJvm]class SyncWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters, ioDispatcher: CoroutineDispatcher, expensesRepository: ExpensesRepository) : CoroutineWorkerWorker that syncs expenses from SMS. TaskManager [androidJvm]interface TaskManagerInterface that provides methods to manage tasks. TaskManagerImpl [androidJvm]class TaskManagerImpl@Injectconstructor(context: Context) : TaskManagerTaskManager backed by WorkInfo from WorkManager"},{"location":"app/app/dev.atick.compose.worker/#properties","title":"Properties","text":"Name Summary BUDGET_AMOUNT_KEY [androidJvm]const val BUDGET_AMOUNT_KEY: String BUDGET_EXCEED_NOTIFICATION_ID [androidJvm]const val BUDGET_EXCEED_NOTIFICATION_ID: Int = 3 CANCELLATION_REMINDER_NOTIFICATION_ID [androidJvm]const val CANCELLATION_REMINDER_NOTIFICATION_ID: Int = 2 CURRENT_AMOUNT_KEY [androidJvm]const val CURRENT_AMOUNT_KEY: String MERCHANT_NAME_KEY [androidJvm]const val MERCHANT_NAME_KEY: String NOTIFICATION_TIME_KEY [androidJvm]const val NOTIFICATION_TIME_KEY: String PAYMENT_REMINDER_NOTIFICATION_ID [androidJvm]const val PAYMENT_REMINDER_NOTIFICATION_ID: Int = 1 SyncConstraints [androidJvm]val SyncConstraints: ConstraintsConstraints for sync work"},{"location":"app/app/dev.atick.compose.worker/#functions","title":"Functions","text":"Name Summary budgetExceedNotification [androidJvm]fun Context.budgetExceedNotification(budgetAmount: Double, currentAmount: Double): NotificationNotification for budget exceed cancellationReminderNotification [androidJvm]fun Context.cancellationReminderNotification(merchantName: String, nextPaymentDate: Long): NotificationNotification for cancellation reminder paymentReminderNotification [androidJvm]fun Context.paymentReminderNotification(merchantName: String, nextPaymentDate: Long): NotificationNotification for payment reminder syncForegroundInfo [androidJvm]fun Context.syncForegroundInfo(total: Int, current: Int): ForegroundInfoForeground information for sync on lower API levels when sync workers are being run with a foreground service"},{"location":"app/app/dev.atick.compose.worker/-b-u-d-g-e-t_-a-m-o-u-n-t_-k-e-y/","title":"b u d g e t  a m o u n t  k e y","text":"<p>//app/dev.atick.compose.worker/BUDGET_AMOUNT_KEY</p>"},{"location":"app/app/dev.atick.compose.worker/-b-u-d-g-e-t_-a-m-o-u-n-t_-k-e-y/#budget_amount_key","title":"BUDGET_AMOUNT_KEY","text":"<p>[androidJvm]\\ const val BUDGET_AMOUNT_KEY: String</p>"},{"location":"app/app/dev.atick.compose.worker/-b-u-d-g-e-t_-e-x-c-e-e-d_-n-o-t-i-f-i-c-a-t-i-o-n_-i-d/","title":"b u d g e t  e x c e e d  n o t i f i c a t i o n  i d","text":"<p>//app/dev.atick.compose.worker/BUDGET_EXCEED_NOTIFICATION_ID</p>"},{"location":"app/app/dev.atick.compose.worker/-b-u-d-g-e-t_-e-x-c-e-e-d_-n-o-t-i-f-i-c-a-t-i-o-n_-i-d/#budget_exceed_notification_id","title":"BUDGET_EXCEED_NOTIFICATION_ID","text":"<p>[androidJvm]\\ const val BUDGET_EXCEED_NOTIFICATION_ID: Int = 3</p>"},{"location":"app/app/dev.atick.compose.worker/-c-a-n-c-e-l-l-a-t-i-o-n_-r-e-m-i-n-d-e-r_-n-o-t-i-f-i-c-a-t-i-o-n_-i-d/","title":"c a n c e l l a t i o n  r e m i n d e r  n o t i f i c a t i o n  i d","text":"<p>//app/dev.atick.compose.worker/CANCELLATION_REMINDER_NOTIFICATION_ID</p>"},{"location":"app/app/dev.atick.compose.worker/-c-a-n-c-e-l-l-a-t-i-o-n_-r-e-m-i-n-d-e-r_-n-o-t-i-f-i-c-a-t-i-o-n_-i-d/#cancellation_reminder_notification_id","title":"CANCELLATION_REMINDER_NOTIFICATION_ID","text":"<p>[androidJvm]\\ const val CANCELLATION_REMINDER_NOTIFICATION_ID: Int = 2</p>"},{"location":"app/app/dev.atick.compose.worker/-c-u-r-r-e-n-t_-a-m-o-u-n-t_-k-e-y/","title":"c u r r e n t  a m o u n t  k e y","text":"<p>//app/dev.atick.compose.worker/CURRENT_AMOUNT_KEY</p>"},{"location":"app/app/dev.atick.compose.worker/-c-u-r-r-e-n-t_-a-m-o-u-n-t_-k-e-y/#current_amount_key","title":"CURRENT_AMOUNT_KEY","text":"<p>[androidJvm]\\ const val CURRENT_AMOUNT_KEY: String</p>"},{"location":"app/app/dev.atick.compose.worker/-m-e-r-c-h-a-n-t_-n-a-m-e_-k-e-y/","title":"m e r c h a n t  n a m e  k e y","text":"<p>//app/dev.atick.compose.worker/MERCHANT_NAME_KEY</p>"},{"location":"app/app/dev.atick.compose.worker/-m-e-r-c-h-a-n-t_-n-a-m-e_-k-e-y/#merchant_name_key","title":"MERCHANT_NAME_KEY","text":"<p>[androidJvm]\\ const val MERCHANT_NAME_KEY: String</p>"},{"location":"app/app/dev.atick.compose.worker/-n-o-t-i-f-i-c-a-t-i-o-n_-t-i-m-e_-k-e-y/","title":"n o t i f i c a t i o n  t i m e  k e y","text":"<p>//app/dev.atick.compose.worker/NOTIFICATION_TIME_KEY</p>"},{"location":"app/app/dev.atick.compose.worker/-n-o-t-i-f-i-c-a-t-i-o-n_-t-i-m-e_-k-e-y/#notification_time_key","title":"NOTIFICATION_TIME_KEY","text":"<p>[androidJvm]\\ const val NOTIFICATION_TIME_KEY: String</p>"},{"location":"app/app/dev.atick.compose.worker/-p-a-y-m-e-n-t_-r-e-m-i-n-d-e-r_-n-o-t-i-f-i-c-a-t-i-o-n_-i-d/","title":"p a y m e n t  r e m i n d e r  n o t i f i c a t i o n  i d","text":"<p>//app/dev.atick.compose.worker/PAYMENT_REMINDER_NOTIFICATION_ID</p>"},{"location":"app/app/dev.atick.compose.worker/-p-a-y-m-e-n-t_-r-e-m-i-n-d-e-r_-n-o-t-i-f-i-c-a-t-i-o-n_-i-d/#payment_reminder_notification_id","title":"PAYMENT_REMINDER_NOTIFICATION_ID","text":"<p>[androidJvm]\\ const val PAYMENT_REMINDER_NOTIFICATION_ID: Int = 1</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-constraints/","title":"sync constraints","text":"<p>//app/dev.atick.compose.worker/SyncConstraints</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-constraints/#syncconstraints","title":"SyncConstraints","text":"<p>[androidJvm]\\ val SyncConstraints: Constraints</p> <p>Constraints for sync work</p>"},{"location":"app/app/dev.atick.compose.worker/budget-exceed-notification/","title":"Budget exceed notification","text":"<p>//app/dev.atick.compose.worker/budgetExceedNotification</p>"},{"location":"app/app/dev.atick.compose.worker/budget-exceed-notification/#budgetexceednotification","title":"budgetExceedNotification","text":"<p>[androidJvm]\\ fun Context.budgetExceedNotification(budgetAmount: Double, currentAmount: Double): Notification</p> <p>Notification for budget exceed</p>"},{"location":"app/app/dev.atick.compose.worker/budget-exceed-notification/#return","title":"Return","text":"<p>The notification for the budget exceed.</p>"},{"location":"app/app/dev.atick.compose.worker/budget-exceed-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetAmount The budget amount. currentAmount The current amount."},{"location":"app/app/dev.atick.compose.worker/cancellation-reminder-notification/","title":"Cancellation reminder notification","text":"<p>//app/dev.atick.compose.worker/cancellationReminderNotification</p>"},{"location":"app/app/dev.atick.compose.worker/cancellation-reminder-notification/#cancellationremindernotification","title":"cancellationReminderNotification","text":"<p>[androidJvm]\\ fun Context.cancellationReminderNotification(merchantName: String, nextPaymentDate: Long): Notification</p> <p>Notification for cancellation reminder</p>"},{"location":"app/app/dev.atick.compose.worker/cancellation-reminder-notification/#return","title":"Return","text":"<p>The notification for the cancellation reminder.</p>"},{"location":"app/app/dev.atick.compose.worker/cancellation-reminder-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date."},{"location":"app/app/dev.atick.compose.worker/payment-reminder-notification/","title":"Payment reminder notification","text":"<p>//app/dev.atick.compose.worker/paymentReminderNotification</p>"},{"location":"app/app/dev.atick.compose.worker/payment-reminder-notification/#paymentremindernotification","title":"paymentReminderNotification","text":"<p>[androidJvm]\\ fun Context.paymentReminderNotification(merchantName: String, nextPaymentDate: Long): Notification</p> <p>Notification for payment reminder</p>"},{"location":"app/app/dev.atick.compose.worker/payment-reminder-notification/#return","title":"Return","text":"<p>The notification for the payment reminder.</p>"},{"location":"app/app/dev.atick.compose.worker/payment-reminder-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date."},{"location":"app/app/dev.atick.compose.worker/sync-foreground-info/","title":"Sync foreground info","text":"<p>//app/dev.atick.compose.worker/syncForegroundInfo</p>"},{"location":"app/app/dev.atick.compose.worker/sync-foreground-info/#syncforegroundinfo","title":"syncForegroundInfo","text":"<p>[androidJvm]\\ fun Context.syncForegroundInfo(total: Int, current: Int): ForegroundInfo</p> <p>Foreground information for sync on lower API levels when sync workers are being run with a foreground service</p>"},{"location":"app/app/dev.atick.compose.worker/sync-foreground-info/#return","title":"Return","text":"<p>The foreground information for the sync work.</p>"},{"location":"app/app/dev.atick.compose.worker/sync-foreground-info/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items. current The current number of items."},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/","title":"Index","text":"<p>//app/dev.atick.compose.worker/BudgetReminderWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#budgetreminderworker","title":"BudgetReminderWorker","text":"<p>class BudgetReminderWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters) : CoroutineWorker</p> <p>Worker that shows a notification when the budget amount is exceeded.</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters."},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#see-also","title":"See also","text":"CoroutineWorker"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#constructors","title":"Constructors","text":"BudgetReminderWorker [androidJvm]@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters)Creates a new BudgetReminderWorker instance."},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]open suspend override fun doWork(): ListenableWorker.ResultExecutes the work to show a notification when the budget amount is exceeded. getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend fun getForegroundInfo(): ForegroundInfo getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture&lt;Void&gt; setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture&lt;Void&gt; setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-budget-reminder-worker/","title":"budget reminder worker","text":"<p>//app/dev.atick.compose.worker/BudgetReminderWorker/BudgetReminderWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-budget-reminder-worker/#budgetreminderworker","title":"BudgetReminderWorker","text":"<p>[androidJvm]\\</p> <p>@AssistedInject</p> <p>constructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters)</p> <p>Creates a new BudgetReminderWorker instance.</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-budget-reminder-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters."},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/do-work/","title":"Do work","text":"<p>//app/dev.atick.compose.worker/BudgetReminderWorker/doWork</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\ open suspend override fun doWork(): ListenableWorker.Result</p> <p>Executes the work to show a notification when the budget amount is exceeded.</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/do-work/#return","title":"Return","text":"<p>The result of the work.</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.worker/BudgetReminderWorker/Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/#functions","title":"Functions","text":"Name Summary showBudgetExceedWarning [androidJvm]fun showBudgetExceedWarning(budgetAmount: Double, currentAmount: Double): OneTimeWorkRequestShows a notification when the budget amount is exceeded."},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/show-budget-exceed-warning/","title":"Show budget exceed warning","text":"<p>//app/dev.atick.compose.worker/BudgetReminderWorker/Companion/showBudgetExceedWarning</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/show-budget-exceed-warning/#showbudgetexceedwarning","title":"showBudgetExceedWarning","text":"<p>[androidJvm]\\ fun showBudgetExceedWarning(budgetAmount: Double, currentAmount: Double): OneTimeWorkRequest</p> <p>Shows a notification when the budget amount is exceeded.</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/show-budget-exceed-warning/#return","title":"Return","text":"<p>A OneTimeWorkRequest to show the notification.</p>"},{"location":"app/app/dev.atick.compose.worker/-budget-reminder-worker/-companion/show-budget-exceed-warning/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetAmount The budget amount. currentAmount The current amount."},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/","title":"Index","text":"<p>//app/dev.atick.compose.worker/CancellationReminderWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#cancellationreminderworker","title":"CancellationReminderWorker","text":"<p>class CancellationReminderWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters) : CoroutineWorker</p> <p>Worker that shows a notification when the cancellation reminder is due.</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters."},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#see-also","title":"See also","text":"CoroutineWorker"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#constructors","title":"Constructors","text":"CancellationReminderWorker [androidJvm]@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters)Creates a new CancellationReminderWorker instance."},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]open suspend override fun doWork(): ListenableWorker.ResultExecutes the work to show a notification when the cancellation reminder is due. getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend fun getForegroundInfo(): ForegroundInfo getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture&lt;Void&gt; setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture&lt;Void&gt; setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-cancellation-reminder-worker/","title":"cancellation reminder worker","text":"<p>//app/dev.atick.compose.worker/CancellationReminderWorker/CancellationReminderWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-cancellation-reminder-worker/#cancellationreminderworker","title":"CancellationReminderWorker","text":"<p>[androidJvm]\\</p> <p>@AssistedInject</p> <p>constructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters)</p> <p>Creates a new CancellationReminderWorker instance.</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-cancellation-reminder-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters."},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/do-work/","title":"Do work","text":"<p>//app/dev.atick.compose.worker/CancellationReminderWorker/doWork</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\ open suspend override fun doWork(): ListenableWorker.Result</p> <p>Executes the work to show a notification when the cancellation reminder is due.</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/do-work/#return","title":"Return","text":"<p>The result of the work.</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.worker/CancellationReminderWorker/Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/#functions","title":"Functions","text":"Name Summary scheduleCancellationReminder [androidJvm]fun scheduleCancellationReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long): OneTimeWorkRequestShows a notification when the cancellation reminder is due."},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/schedule-cancellation-reminder/","title":"Schedule cancellation reminder","text":"<p>//app/dev.atick.compose.worker/CancellationReminderWorker/Companion/scheduleCancellationReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/schedule-cancellation-reminder/#schedulecancellationreminder","title":"scheduleCancellationReminder","text":"<p>[androidJvm]\\ fun scheduleCancellationReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long): OneTimeWorkRequest</p> <p>Shows a notification when the cancellation reminder is due.</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/schedule-cancellation-reminder/#return","title":"Return","text":"<p>The one-time work request to show the notification.</p>"},{"location":"app/app/dev.atick.compose.worker/-cancellation-reminder-worker/-companion/schedule-cancellation-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The time to show the notification."},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/","title":"Index","text":"<p>//app/dev.atick.compose.worker/DelegatingWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/#delegatingworker","title":"DelegatingWorker","text":"<p>[androidJvm]\\ class DelegatingWorker(appContext: Context, workerParams: WorkerParameters) : CoroutineWorker</p> <p>A worker that delegates sync to another CoroutineWorker constructed with a HiltWorkerFactory.</p> <p>This allows for creating and using CoroutineWorker instances with extended arguments without having to provide a custom WorkManager configuration that the app module needs to utilize.</p> <p>In other words, it allows for custom workers in a library module without having to own configuration of the WorkManager singleton.</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/#constructors","title":"Constructors","text":"DelegatingWorker [androidJvm]constructor(appContext: Context, workerParams: WorkerParameters)"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]open suspend override fun doWork(): ListenableWorker.ResultDelegates the work to the delegate worker getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend override fun getForegroundInfo(): ForegroundInfoRetrieves the foreground info from the delegate worker getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture&lt;Void&gt; setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture&lt;Void&gt; setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/-delegating-worker/","title":"delegating worker","text":"<p>//app/dev.atick.compose.worker/DelegatingWorker/DelegatingWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/-delegating-worker/#delegatingworker","title":"DelegatingWorker","text":"<p>[androidJvm]\\ constructor(appContext: Context, workerParams: WorkerParameters)</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/do-work/","title":"Do work","text":"<p>//app/dev.atick.compose.worker/DelegatingWorker/doWork</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\ open suspend override fun doWork(): ListenableWorker.Result</p> <p>Delegates the work to the delegate worker</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/get-foreground-info/","title":"Get foreground info","text":"<p>//app/dev.atick.compose.worker/DelegatingWorker/getForegroundInfo</p>"},{"location":"app/app/dev.atick.compose.worker/-delegating-worker/get-foreground-info/#getforegroundinfo","title":"getForegroundInfo","text":"<p>[androidJvm]\\ open suspend override fun getForegroundInfo(): ForegroundInfo</p> <p>Retrieves the foreground info from the delegate worker</p>"},{"location":"app/app/dev.atick.compose.worker/-hilt-worker-factory-entry-point/","title":"Index","text":"<p>//app/dev.atick.compose.worker/HiltWorkerFactoryEntryPoint</p>"},{"location":"app/app/dev.atick.compose.worker/-hilt-worker-factory-entry-point/#hiltworkerfactoryentrypoint","title":"HiltWorkerFactoryEntryPoint","text":"<p>[androidJvm]\\ interface HiltWorkerFactoryEntryPoint</p> <p>An entry point to retrieve the HiltWorkerFactory at runtime</p>"},{"location":"app/app/dev.atick.compose.worker/-hilt-worker-factory-entry-point/#functions","title":"Functions","text":"Name Summary hiltWorkerFactory [androidJvm]abstract fun hiltWorkerFactory(): HiltWorkerFactory"},{"location":"app/app/dev.atick.compose.worker/-hilt-worker-factory-entry-point/hilt-worker-factory/","title":"Hilt worker factory","text":"<p>//app/dev.atick.compose.worker/HiltWorkerFactoryEntryPoint/hiltWorkerFactory</p>"},{"location":"app/app/dev.atick.compose.worker/-hilt-worker-factory-entry-point/hilt-worker-factory/#hiltworkerfactory","title":"hiltWorkerFactory","text":"<p>[androidJvm]\\ abstract fun hiltWorkerFactory(): HiltWorkerFactory</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/","title":"Index","text":"<p>//app/dev.atick.compose.worker/PaymentReminderWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#paymentreminderworker","title":"PaymentReminderWorker","text":"<p>class PaymentReminderWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters) : CoroutineWorker</p> <p>Worker that shows a notification when the payment reminder is due.</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters."},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#see-also","title":"See also","text":"CoroutineWorker"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#constructors","title":"Constructors","text":"PaymentReminderWorker [androidJvm]@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters)Creates a new PaymentReminderWorker instance."},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]open suspend override fun doWork(): ListenableWorker.ResultExecutes the work to show a notification when the payment reminder is due. getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend fun getForegroundInfo(): ForegroundInfo getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture&lt;Void&gt; setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture&lt;Void&gt; setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-payment-reminder-worker/","title":"payment reminder worker","text":"<p>//app/dev.atick.compose.worker/PaymentReminderWorker/PaymentReminderWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-payment-reminder-worker/#paymentreminderworker","title":"PaymentReminderWorker","text":"<p>[androidJvm]\\</p> <p>@AssistedInject</p> <p>constructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters)</p> <p>Creates a new PaymentReminderWorker instance.</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-payment-reminder-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters."},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/do-work/","title":"Do work","text":"<p>//app/dev.atick.compose.worker/PaymentReminderWorker/doWork</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\ open suspend override fun doWork(): ListenableWorker.Result</p> <p>Executes the work to show a notification when the payment reminder is due.</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/do-work/#return","title":"Return","text":"<p>The result of the work.</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.worker/PaymentReminderWorker/Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/#functions","title":"Functions","text":"Name Summary schedulePaymentReminder [androidJvm]fun schedulePaymentReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long): OneTimeWorkRequestShows a notification when the payment reminder is due."},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/schedule-payment-reminder/","title":"Schedule payment reminder","text":"<p>//app/dev.atick.compose.worker/PaymentReminderWorker/Companion/schedulePaymentReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/schedule-payment-reminder/#schedulepaymentreminder","title":"schedulePaymentReminder","text":"<p>[androidJvm]\\ fun schedulePaymentReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long): OneTimeWorkRequest</p> <p>Shows a notification when the payment reminder is due.</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/schedule-payment-reminder/#return","title":"Return","text":"<p>The one-time work request to show the notification.</p>"},{"location":"app/app/dev.atick.compose.worker/-payment-reminder-worker/-companion/schedule-payment-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The time to show the notification."},{"location":"app/app/dev.atick.compose.worker/-reminders/","title":"Index","text":"<p>//app/dev.atick.compose.worker/Reminders</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/#reminders","title":"Reminders","text":"<p>[androidJvm]\\ object Reminders</p> <p>Object that schedules reminders for payment, cancellation, and budget exceed warnings.</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/#functions","title":"Functions","text":"Name Summary scheduleCancellationReminder [androidJvm]fun scheduleCancellationReminder(context: Context, merchantName: String, nextPaymentDate: Long, reminderTime: Long)Schedules a cancellation reminder for the given merchant name, next payment date, and reminder time. schedulePaymentReminder [androidJvm]fun schedulePaymentReminder(context: Context, merchantName: String, nextPaymentDate: Long, reminderTime: Long)Schedules a payment reminder for the given merchant name, next payment date, and reminder time. showBudgetExceedWarning [androidJvm]fun showBudgetExceedWarning(context: Context, budgetAmount: Double, currentAmount: Double)Shows a budget exceed warning for the given budget amount and current amount."},{"location":"app/app/dev.atick.compose.worker/-reminders/schedule-cancellation-reminder/","title":"Schedule cancellation reminder","text":"<p>//app/dev.atick.compose.worker/Reminders/scheduleCancellationReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/schedule-cancellation-reminder/#schedulecancellationreminder","title":"scheduleCancellationReminder","text":"<p>[androidJvm]\\ fun scheduleCancellationReminder(context: Context, merchantName: String, nextPaymentDate: Long, reminderTime: Long)</p> <p>Schedules a cancellation reminder for the given merchant name, next payment date, and reminder time.</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/schedule-cancellation-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The reminder time."},{"location":"app/app/dev.atick.compose.worker/-reminders/schedule-payment-reminder/","title":"Schedule payment reminder","text":"<p>//app/dev.atick.compose.worker/Reminders/schedulePaymentReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/schedule-payment-reminder/#schedulepaymentreminder","title":"schedulePaymentReminder","text":"<p>[androidJvm]\\ fun schedulePaymentReminder(context: Context, merchantName: String, nextPaymentDate: Long, reminderTime: Long)</p> <p>Schedules a payment reminder for the given merchant name, next payment date, and reminder time.</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/schedule-payment-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The reminder time."},{"location":"app/app/dev.atick.compose.worker/-reminders/show-budget-exceed-warning/","title":"Show budget exceed warning","text":"<p>//app/dev.atick.compose.worker/Reminders/showBudgetExceedWarning</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/show-budget-exceed-warning/#showbudgetexceedwarning","title":"showBudgetExceedWarning","text":"<p>[androidJvm]\\ fun showBudgetExceedWarning(context: Context, budgetAmount: Double, currentAmount: Double)</p> <p>Shows a budget exceed warning for the given budget amount and current amount.</p>"},{"location":"app/app/dev.atick.compose.worker/-reminders/show-budget-exceed-warning/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. budgetAmount The budget amount. currentAmount The current amount."},{"location":"app/app/dev.atick.compose.worker/-sync/","title":"Index","text":"<p>//app/dev.atick.compose.worker/Sync</p>"},{"location":"app/app/dev.atick.compose.worker/-sync/#sync","title":"Sync","text":"<p>[androidJvm]\\ object Sync</p>"},{"location":"app/app/dev.atick.compose.worker/-sync/#functions","title":"Functions","text":"Name Summary initialize [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")fun initialize(context: Context)Initializes the sync process that keeps the app's data current. This method should be called only once from the app module's Application.onCreate()."},{"location":"app/app/dev.atick.compose.worker/-sync/initialize/","title":"Initialize","text":"<p>//app/dev.atick.compose.worker/Sync/initialize</p>"},{"location":"app/app/dev.atick.compose.worker/-sync/initialize/#initialize","title":"initialize","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>fun initialize(context: Context)</p> <p>Initializes the sync process that keeps the app's data current. This method should be called only once from the app module's Application.onCreate().</p>"},{"location":"app/app/dev.atick.compose.worker/-sync/initialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context."},{"location":"app/app/dev.atick.compose.worker/-sync-progress/","title":"Index","text":"<p>//app/dev.atick.compose.worker/SyncProgress</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/#syncprogress","title":"SyncProgress","text":"<p>data class SyncProgress(val total: Int = 0, val current: Int = 0, val message: String? = null)</p> <p>Data class that represents the progress of a sync operation.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items to sync. current The current number of items synced. message The message to display during the sync operation."},{"location":"app/app/dev.atick.compose.worker/-sync-progress/#constructors","title":"Constructors","text":"SyncProgress [androidJvm]constructor(total: Int = 0, current: Int = 0, message: String? = null)"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/#properties","title":"Properties","text":"Name Summary current [androidJvm]val current: Int = 0 message [androidJvm]val message: String? = null total [androidJvm]val total: Int = 0"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/-sync-progress/","title":"sync progress","text":"<p>//app/dev.atick.compose.worker/SyncProgress/SyncProgress</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/-sync-progress/#syncprogress","title":"SyncProgress","text":"<p>[androidJvm]\\ constructor(total: Int = 0, current: Int = 0, message: String? = null)</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/-sync-progress/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items to sync. current The current number of items synced. message The message to display during the sync operation."},{"location":"app/app/dev.atick.compose.worker/-sync-progress/current/","title":"Current","text":"<p>//app/dev.atick.compose.worker/SyncProgress/current</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/current/#current","title":"current","text":"<p>[androidJvm]\\ val current: Int = 0</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/current/#parameters","title":"Parameters","text":"<p>androidJvm</p> current The current number of items synced."},{"location":"app/app/dev.atick.compose.worker/-sync-progress/message/","title":"Message","text":"<p>//app/dev.atick.compose.worker/SyncProgress/message</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/message/#message","title":"message","text":"<p>[androidJvm]\\ val message: String? = null</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/message/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display during the sync operation."},{"location":"app/app/dev.atick.compose.worker/-sync-progress/total/","title":"Total","text":"<p>//app/dev.atick.compose.worker/SyncProgress/total</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/total/#total","title":"total","text":"<p>[androidJvm]\\ val total: Int = 0</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-progress/total/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items to sync."},{"location":"app/app/dev.atick.compose.worker/-sync-worker/","title":"Index","text":"<p>//app/dev.atick.compose.worker/SyncWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#syncworker","title":"SyncWorker","text":"<p>class SyncWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters, ioDispatcher: CoroutineDispatcher, expensesRepository: ExpensesRepository) : CoroutineWorker</p> <p>Worker that syncs expenses from SMS.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters. ioDispatcher The IO dispatcher. expensesRepository The expenses repository."},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#see-also","title":"See also","text":"CoroutineWorker"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#constructors","title":"Constructors","text":"SyncWorker [androidJvm]@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters, ioDispatcher: CoroutineDispatcher, expensesRepository: ExpensesRepository)Creates a new SyncWorker instance."},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")open suspend override fun doWork(): ListenableWorker.ResultExecutes the work to sync expenses from SMS. getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend override fun getForegroundInfo(): ForegroundInfoProvides the foreground information for the worker. getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture&lt;Void&gt; setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture&lt;Void&gt; setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-sync-worker/","title":"sync worker","text":"<p>//app/dev.atick.compose.worker/SyncWorker/SyncWorker</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-sync-worker/#syncworker","title":"SyncWorker","text":"<p>[androidJvm]\\</p> <p>@AssistedInject</p> <p>constructor(@Assistedcontext: Context, @AssistedworkerParams: WorkerParameters, ioDispatcher: CoroutineDispatcher, expensesRepository: ExpensesRepository)</p> <p>Creates a new SyncWorker instance.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-sync-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context. workerParams The worker parameters. ioDispatcher The IO dispatcher. expensesRepository The expenses repository."},{"location":"app/app/dev.atick.compose.worker/-sync-worker/do-work/","title":"Do work","text":"<p>//app/dev.atick.compose.worker/SyncWorker/doWork</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>open suspend override fun doWork(): ListenableWorker.Result</p> <p>Executes the work to sync expenses from SMS.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/do-work/#return","title":"Return","text":"<p>The result of the work.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/get-foreground-info/","title":"Get foreground info","text":"<p>//app/dev.atick.compose.worker/SyncWorker/getForegroundInfo</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/get-foreground-info/#getforegroundinfo","title":"getForegroundInfo","text":"<p>[androidJvm]\\ open suspend override fun getForegroundInfo(): ForegroundInfo</p> <p>Provides the foreground information for the worker.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/get-foreground-info/#return","title":"Return","text":"<p>The foreground information.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-companion/","title":"Index","text":"<p>//app/dev.atick.compose.worker/SyncWorker/Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-companion/#functions","title":"Functions","text":"Name Summary startUpSyncWork [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")fun startUpSyncWork(): OneTimeWorkRequestStarts the work to sync expenses from SMS."},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-companion/start-up-sync-work/","title":"Start up sync work","text":"<p>//app/dev.atick.compose.worker/SyncWorker/Companion/startUpSyncWork</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-companion/start-up-sync-work/#startupsyncwork","title":"startUpSyncWork","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>fun startUpSyncWork(): OneTimeWorkRequest</p> <p>Starts the work to sync expenses from SMS.</p>"},{"location":"app/app/dev.atick.compose.worker/-sync-worker/-companion/start-up-sync-work/#return","title":"Return","text":"<p>The one-time work request to sync expenses from SMS.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/","title":"Index","text":"<p>//app/dev.atick.compose.worker/TaskManager</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/#taskmanager","title":"TaskManager","text":"<p>interface TaskManager</p> <p>Interface that provides methods to manage tasks.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/#inheritors","title":"Inheritors","text":"TaskManagerImpl"},{"location":"app/app/dev.atick.compose.worker/-task-manager/#properties","title":"Properties","text":"Name Summary isSyncing [androidJvm]abstract val isSyncing: Flow&lt;Boolean&gt;Flow that emits a boolean value indicating whether the sync operation is in progress."},{"location":"app/app/dev.atick.compose.worker/-task-manager/#functions","title":"Functions","text":"Name Summary requestSync [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")abstract fun requestSync()Requests a sync operation. scheduleCancellationReminder [androidJvm]abstract fun scheduleCancellationReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)Schedules a cancellation reminder for the specified merchant. schedulePaymentReminder [androidJvm]abstract fun schedulePaymentReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)Schedules a payment reminder for the specified merchant. showBudgetExceedWarning [androidJvm]abstract fun showBudgetExceedWarning(budgetAmount: Double, currentAmount: Double)Shows a warning when the budget exceeds the specified amount."},{"location":"app/app/dev.atick.compose.worker/-task-manager/is-syncing/","title":"Is syncing","text":"<p>//app/dev.atick.compose.worker/TaskManager/isSyncing</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/is-syncing/#issyncing","title":"isSyncing","text":"<p>[androidJvm]\\ abstract val isSyncing: Flow&lt;Boolean&gt;</p> <p>Flow that emits a boolean value indicating whether the sync operation is in progress.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/request-sync/","title":"Request sync","text":"<p>//app/dev.atick.compose.worker/TaskManager/requestSync</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/request-sync/#requestsync","title":"requestSync","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>abstract fun requestSync()</p> <p>Requests a sync operation.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/schedule-cancellation-reminder/","title":"Schedule cancellation reminder","text":"<p>//app/dev.atick.compose.worker/TaskManager/scheduleCancellationReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/schedule-cancellation-reminder/#schedulecancellationreminder","title":"scheduleCancellationReminder","text":"<p>[androidJvm]\\ abstract fun scheduleCancellationReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)</p> <p>Schedules a cancellation reminder for the specified merchant.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/schedule-cancellation-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The reminder time."},{"location":"app/app/dev.atick.compose.worker/-task-manager/schedule-payment-reminder/","title":"Schedule payment reminder","text":"<p>//app/dev.atick.compose.worker/TaskManager/schedulePaymentReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/schedule-payment-reminder/#schedulepaymentreminder","title":"schedulePaymentReminder","text":"<p>[androidJvm]\\ abstract fun schedulePaymentReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)</p> <p>Schedules a payment reminder for the specified merchant.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/schedule-payment-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The reminder time."},{"location":"app/app/dev.atick.compose.worker/-task-manager/show-budget-exceed-warning/","title":"Show budget exceed warning","text":"<p>//app/dev.atick.compose.worker/TaskManager/showBudgetExceedWarning</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/show-budget-exceed-warning/#showbudgetexceedwarning","title":"showBudgetExceedWarning","text":"<p>[androidJvm]\\ abstract fun showBudgetExceedWarning(budgetAmount: Double, currentAmount: Double)</p> <p>Shows a warning when the budget exceeds the specified amount.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager/show-budget-exceed-warning/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetAmount The budget amount. currentAmount The current amount."},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/","title":"Index","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/#taskmanagerimpl","title":"TaskManagerImpl","text":"<p>[androidJvm]\\ class TaskManagerImpl@Injectconstructor(context: Context) : TaskManager</p> <p>TaskManager backed by WorkInfo from WorkManager</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/#constructors","title":"Constructors","text":"TaskManagerImpl [androidJvm]@Injectconstructor(context: Context)"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/#properties","title":"Properties","text":"Name Summary isSyncing [androidJvm]open override val isSyncing: Flow&lt;Boolean&gt;Provides a flow that emits <code>true</code> if a sync operation is in progress, <code>false</code> otherwise."},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/#functions","title":"Functions","text":"Name Summary requestSync [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")open override fun requestSync()Requests a sync operation. scheduleCancellationReminder [androidJvm]open override fun scheduleCancellationReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)Schedules a cancellation reminder for the specified merchant. schedulePaymentReminder [androidJvm]open override fun schedulePaymentReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)Schedules a payment reminder for the specified merchant. showBudgetExceedWarning [androidJvm]open override fun showBudgetExceedWarning(budgetAmount: Double, currentAmount: Double)Shows a warning when the budget exceeds the specified amount."},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/-task-manager-impl/","title":"task manager impl","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl/TaskManagerImpl</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/-task-manager-impl/#taskmanagerimpl","title":"TaskManagerImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(context: Context)</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/is-syncing/","title":"Is syncing","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl/isSyncing</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/is-syncing/#issyncing","title":"isSyncing","text":"<p>[androidJvm]\\ open override val isSyncing: Flow&lt;Boolean&gt;</p> <p>Provides a flow that emits <code>true</code> if a sync operation is in progress, <code>false</code> otherwise.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/request-sync/","title":"Request sync","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl/requestSync</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/request-sync/#requestsync","title":"requestSync","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>open override fun requestSync()</p> <p>Requests a sync operation.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/schedule-cancellation-reminder/","title":"Schedule cancellation reminder","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl/scheduleCancellationReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/schedule-cancellation-reminder/#schedulecancellationreminder","title":"scheduleCancellationReminder","text":"<p>[androidJvm]\\ open override fun scheduleCancellationReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)</p> <p>Schedules a cancellation reminder for the specified merchant.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/schedule-cancellation-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The reminder time."},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/schedule-payment-reminder/","title":"Schedule payment reminder","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl/schedulePaymentReminder</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/schedule-payment-reminder/#schedulepaymentreminder","title":"schedulePaymentReminder","text":"<p>[androidJvm]\\ open override fun schedulePaymentReminder(merchantName: String, nextPaymentDate: Long, reminderTime: Long)</p> <p>Schedules a payment reminder for the specified merchant.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/schedule-payment-reminder/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchantName The name of the merchant. nextPaymentDate The next payment date. reminderTime The reminder time."},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/show-budget-exceed-warning/","title":"Show budget exceed warning","text":"<p>//app/dev.atick.compose.worker/TaskManagerImpl/showBudgetExceedWarning</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/show-budget-exceed-warning/#showbudgetexceedwarning","title":"showBudgetExceedWarning","text":"<p>[androidJvm]\\ open override fun showBudgetExceedWarning(budgetAmount: Double, currentAmount: Double)</p> <p>Shows a warning when the budget exceeds the specified amount.</p>"},{"location":"app/app/dev.atick.compose.worker/-task-manager-impl/show-budget-exceed-warning/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetAmount The budget amount. currentAmount The current amount."},{"location":"core/android/","title":"Index","text":"<p>//android</p>"},{"location":"core/android/#android","title":"android","text":""},{"location":"core/android/#packages","title":"Packages","text":"Name dev.atick.core.di dev.atick.core.extensions dev.atick.core.utils"},{"location":"core/android/android/dev.atick.core.di/","title":"Index","text":"<p>//android/dev.atick.core.di</p>"},{"location":"core/android/android/dev.atick.core.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.di/#types","title":"Types","text":"Name Summary ApplicationScope [androidJvm]@Qualifierannotation class ApplicationScope CoroutineScopeModule [androidJvm]@Module(includes = [DispatcherModule::class])object CoroutineScopeModuleDagger module that provides a coroutine scope for the application. DefaultDispatcher [androidJvm]@Qualifierannotation class DefaultDispatcherAnnotation used to mark the default coroutine dispatcher. DispatcherModule [androidJvm]@Moduleobject DispatcherModuleDagger module that provides coroutine dispatchers for different contexts. IoDispatcher [androidJvm]@Qualifierannotation class IoDispatcherAnnotation used to mark the I/O coroutine dispatcher. MainDispatcher [androidJvm]@Qualifierannotation class MainDispatcherAnnotation used to mark the main coroutine dispatcher. StringDecoderModule [androidJvm]@Moduleabstract class StringDecoderModuleDagger module providing bindings for StringDecoder implementations."},{"location":"core/android/android/dev.atick.core.di/-application-scope/","title":"Index","text":"<p>//android/dev.atick.core.di/ApplicationScope</p>"},{"location":"core/android/android/dev.atick.core.di/-application-scope/#applicationscope","title":"ApplicationScope","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class ApplicationScope</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-scope-module/","title":"Index","text":"<p>//android/dev.atick.core.di/CoroutineScopeModule</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-scope-module/#coroutinescopemodule","title":"CoroutineScopeModule","text":"<p>[androidJvm]\\ @Module(includes = [DispatcherModule::class])</p> <p>object CoroutineScopeModule</p> <p>Dagger module that provides a coroutine scope for the application.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-scope-module/#functions","title":"Functions","text":"Name Summary provideCoroutineScope [androidJvm]@Provides@Singletonfun provideCoroutineScope(dispatcher: CoroutineDispatcher): CoroutineScopeProvides a coroutine scope for the application."},{"location":"core/android/android/dev.atick.core.di/-coroutine-scope-module/provide-coroutine-scope/","title":"Provide coroutine scope","text":"<p>//android/dev.atick.core.di/CoroutineScopeModule/provideCoroutineScope</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-scope-module/provide-coroutine-scope/#providecoroutinescope","title":"provideCoroutineScope","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideCoroutineScope(dispatcher: CoroutineDispatcher): CoroutineScope</p> <p>Provides a coroutine scope for the application.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-scope-module/provide-coroutine-scope/#return","title":"Return","text":"<p>The coroutine scope for the application.</p>"},{"location":"core/android/android/dev.atick.core.di/-default-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/DefaultDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-default-dispatcher/#defaultdispatcher","title":"DefaultDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class DefaultDispatcher</p> <p>Annotation used to mark the default coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/","title":"Index","text":"<p>//android/dev.atick.core.di/DispatcherModule</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/#dispatchermodule","title":"DispatcherModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DispatcherModule</p> <p>Dagger module that provides coroutine dispatchers for different contexts.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/#functions","title":"Functions","text":"Name Summary providesDefaultDispatcher [androidJvm]@Providesfun providesDefaultDispatcher(): CoroutineDispatcherProvides the default coroutine dispatcher, which is used for general-purpose background tasks. providesIoDispatcher [androidJvm]@Providesfun providesIoDispatcher(): CoroutineDispatcherProvides the I/O coroutine dispatcher, which is used for I/O-bound tasks such as disk or network operations. providesMainDispatcher [androidJvm]@Providesfun providesMainDispatcher(): CoroutineDispatcherProvides the main coroutine dispatcher, which is used for executing tasks on the main/UI thread."},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/","title":"Provides default dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesDefaultDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/#providesdefaultdispatcher","title":"providesDefaultDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesDefaultDispatcher(): CoroutineDispatcher</p> <p>Provides the default coroutine dispatcher, which is used for general-purpose background tasks.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/#return","title":"Return","text":"<p>The default coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/","title":"Provides io dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesIoDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/#providesiodispatcher","title":"providesIoDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesIoDispatcher(): CoroutineDispatcher</p> <p>Provides the I/O coroutine dispatcher, which is used for I/O-bound tasks such as disk or network operations.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/#return","title":"Return","text":"<p>The I/O coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/","title":"Provides main dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesMainDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/#providesmaindispatcher","title":"providesMainDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesMainDispatcher(): CoroutineDispatcher</p> <p>Provides the main coroutine dispatcher, which is used for executing tasks on the main/UI thread.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/#return","title":"Return","text":"<p>The main coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-io-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/IoDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-io-dispatcher/#iodispatcher","title":"IoDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class IoDispatcher</p> <p>Annotation used to mark the I/O coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-main-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/MainDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-main-dispatcher/#maindispatcher","title":"MainDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class MainDispatcher</p> <p>Annotation used to mark the main coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/","title":"Index","text":"<p>//android/dev.atick.core.di/StringDecoderModule</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#stringdecodermodule","title":"StringDecoderModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class StringDecoderModule</p> <p>Dagger module providing bindings for StringDecoder implementations.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#constructors","title":"Constructors","text":"StringDecoderModule [androidJvm]constructor()"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#functions","title":"Functions","text":"Name Summary bindStringDecoder [androidJvm]@Bindsabstract fun bindStringDecoder(uriDecoder: UriDecoder): StringDecoderBinds the provided UriDecoder instance as the implementation for StringDecoder."},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/-string-decoder-module/","title":"string decoder module","text":"<p>//android/dev.atick.core.di/StringDecoderModule/StringDecoderModule</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/-string-decoder-module/#stringdecodermodule","title":"StringDecoderModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/","title":"Bind string decoder","text":"<p>//android/dev.atick.core.di/StringDecoderModule/bindStringDecoder</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/#bindstringdecoder","title":"bindStringDecoder","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>abstract fun bindStringDecoder(uriDecoder: UriDecoder): StringDecoder</p> <p>Binds the provided UriDecoder instance as the implementation for StringDecoder.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/#parameters","title":"Parameters","text":"<p>androidJvm</p> uriDecoder The instance of UriDecoder to be bound as StringDecoder."},{"location":"core/android/android/dev.atick.core.extensions/","title":"Index","text":"<p>//android/dev.atick.core.extensions</p>"},{"location":"core/android/android/dev.atick.core.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.extensions/#types","title":"Types","text":"Name Summary Options [androidJvm]annotation class Options"},{"location":"core/android/android/dev.atick.core.extensions/#functions","title":"Functions","text":"Name Summary asFormattedDateTime [androidJvm]fun Long.asFormattedDateTime(): StringFormats a Long timestamp to a human-readable date-time string. Uses the system default time zone. cancelNotification [androidJvm]fun Context.cancelNotification(notificationId: Int)Cancels a previously shown notification. createNotification [androidJvm]fun Context.createNotification(channelId: String, @StringRestitle: Int, @StringRescontent: Int, icon: Int, pendingIntent: PendingIntent? = null): Notificationfun Context.createNotification(channelId: String, title: String, content: String, icon: Int, pendingIntent: PendingIntent? = null): NotificationCreates a notification using the specified channel ID, title, content, and icon. createNotificationChannel [androidJvm]fun Context.createNotificationChannel(channelId: String, @StringReschannelName: Int, @StringReschannelDescription: Int, importance: Int)Creates a notification channel with the specified channel ID, name, description, and importance. createProgressNotification [androidJvm]fun Context.createProgressNotification(channelId: String, @StringRestitle: Int, total: Int, current: Int, @DrawableResicon: Int, pendingIntent: PendingIntent? = null): NotificationCreates a progress notification using the specified channel ID, title, total, current, and icon. format [androidJvm]fun &lt;T : Number, Comparable&lt;T&gt;&gt; T.format(nDecimal: Int = 2): StringFormats a number (Float or Double) to a string with specified number of decimal places. Handles special cases like NaN and Infinity. Uses locale-specific decimal separator. Removes trailing zeros after decimal point. getActivity [androidJvm]fun Context.getActivity(): ComponentActivity?Provides the activity from Context (https://stackoverflow.com/a/68423182/12737399) getFileFromContentUri [androidJvm]fun Context.getFileFromContentUri(contentUri: Uri): File?Retrieves a File object from the given content URI. getTmpFileUri [androidJvm]fun Context.getTmpFileUri(appId: String): UriRetrieves a temporary file URI for the specified app ID. hasPermission [androidJvm]fun Context.hasPermission(permission: String): BooleanChecks if the app has a given permission. isAllPermissionsGranted [androidJvm]fun Context.isAllPermissionsGranted(permissions: List&lt;String&gt;): BooleanChecks if all the given permissions are granted. isEmailValid [androidJvm]fun String?.isEmailValid(): BooleanChecks if the string is a valid email address. isPasswordValid [androidJvm]fun String?.isPasswordValid(): BooleanChecks if the string is a valid password based on the specified criteria. isValidFullName [androidJvm]fun String?.isValidFullName(): BooleanChecks if a given full name is valid. showNotification [androidJvm]fun Context.showNotification(notificationId: Int, notification: Notification)Shows a notification using the specified notification ID and notification object. showToast [androidJvm]fun Context.showToast(message: String)Displays a short toast message. stateInDelayed [androidJvm]fun &lt;T&gt; Flow&lt;T&gt;.stateInDelayed(initialValue: T, scope: CoroutineScope): StateFlow&lt;T&gt;Returns a StateFlow that represents the last value emitted by the Flow"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/","title":"As formatted date time","text":"<p>//android/dev.atick.core.extensions/asFormattedDateTime</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/#asformatteddatetime","title":"asFormattedDateTime","text":"<p>[androidJvm]\\ fun Long.asFormattedDateTime(): String</p> <p>Formats a Long timestamp to a human-readable date-time string. Uses the system default time zone.</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/#return","title":"Return","text":"<p>Formatted date-time string</p> <p>Example: 1640995200000L.asFormattedDateTime() -&gt; \"December 31, 2021 at 11:59 PM\"</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/","title":"Cancel notification","text":"<p>//android/dev.atick.core.extensions/cancelNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/#cancelnotification","title":"cancelNotification","text":"<p>[androidJvm]\\ fun Context.cancelNotification(notificationId: Int)</p> <p>Cancels a previously shown notification.</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> notificationId The ID of the notification to be canceled."},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/","title":"Create notification channel","text":"<p>//android/dev.atick.core.extensions/createNotificationChannel</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/#createnotificationchannel","title":"createNotificationChannel","text":"<p>[androidJvm]\\ fun Context.createNotificationChannel(channelId: String, @StringReschannelName: Int, @StringReschannelDescription: Int, importance: Int)</p> <p>Creates a notification channel with the specified channel ID, name, description, and importance.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. channelName The name of the notification channel. channelDescription The description of the notification channel. importance The importance level of the notification channel."},{"location":"core/android/android/dev.atick.core.extensions/create-notification/","title":"Create notification","text":"<p>//android/dev.atick.core.extensions/createNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#createnotification","title":"createNotification","text":"<p>[androidJvm]\\ fun Context.createNotification(channelId: String, @StringRestitle: Int, @StringRescontent: Int, icon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>fun Context.createNotification(channelId: String, title: String, content: String, icon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>Creates a notification using the specified channel ID, title, content, and icon.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#return","title":"Return","text":"<p>The notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. title The title of the notification. content The content of the notification. icon The icon of the notification."},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/","title":"Create progress notification","text":"<p>//android/dev.atick.core.extensions/createProgressNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#createprogressnotification","title":"createProgressNotification","text":"<p>[androidJvm]\\ fun Context.createProgressNotification(channelId: String, @StringRestitle: Int, total: Int, current: Int, @DrawableResicon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>Creates a progress notification using the specified channel ID, title, total, current, and icon.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#return","title":"Return","text":"<p>The notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. title The title of the notification. total The total progress value. current The current progress value. icon The icon of the notification."},{"location":"core/android/android/dev.atick.core.extensions/format/","title":"Format","text":"<p>//android/dev.atick.core.extensions/format</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#format","title":"format","text":"<p>[androidJvm]\\ fun &lt;T : Number, Comparable&lt;T&gt;&gt; T.format(nDecimal: Int = 2): String</p> <p>Formats a number (Float or Double) to a string with specified number of decimal places. Handles special cases like NaN and Infinity. Uses locale-specific decimal separator. Removes trailing zeros after decimal point.</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#return","title":"Return","text":"<p>Formatted string representation of the number</p> <p>Examples: 123.4567.format() -&gt; \"123.46\" 123.4f.format() -&gt; \"123.40\" 123.0.format() -&gt; \"123\" (-123.45).format() -&gt; \"-123.45\" Double.NaN.format() -&gt; \"NaN\" Float.POSITIVE_INFINITY.format() -&gt; \"\u221e\"</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#parameters","title":"Parameters","text":"<p>androidJvm</p> nDecimal Number of decimal places (default is 2)"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/","title":"Get activity","text":"<p>//android/dev.atick.core.extensions/getActivity</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/#getactivity","title":"getActivity","text":"<p>[androidJvm]\\ fun Context.getActivity(): ComponentActivity?</p> <p>Provides the activity from Context (https://stackoverflow.com/a/68423182/12737399)</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/#return","title":"Return","text":"<p>The activity associated with the context, or <code>null</code> if the context is not an activity.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/","title":"Get file from content uri","text":"<p>//android/dev.atick.core.extensions/getFileFromContentUri</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#getfilefromcontenturi","title":"getFileFromContentUri","text":"<p>[androidJvm]\\ fun Context.getFileFromContentUri(contentUri: Uri): File?</p> <p>Retrieves a File object from the given content URI.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#return","title":"Return","text":"<p>The File object representing the content URI, or <code>null</code> if an error occurred.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#parameters","title":"Parameters","text":"<p>androidJvm</p> contentUri The content URI of the file."},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/","title":"Get tmp file uri","text":"<p>//android/dev.atick.core.extensions/getTmpFileUri</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#gettmpfileuri","title":"getTmpFileUri","text":"<p>[androidJvm]\\ fun Context.getTmpFileUri(appId: String): Uri</p> <p>Retrieves a temporary file URI for the specified app ID.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#return","title":"Return","text":"<p>The URI of the temporary file.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#parameters","title":"Parameters","text":"<p>androidJvm</p> appId The ID of the app."},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#throws","title":"Throws","text":"IllegalAccessException if unable to create or retrieve the temporary file."},{"location":"core/android/android/dev.atick.core.extensions/has-permission/","title":"Has permission","text":"<p>//android/dev.atick.core.extensions/hasPermission</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#haspermission","title":"hasPermission","text":"<p>[androidJvm]\\ fun Context.hasPermission(permission: String): Boolean</p> <p>Checks if the app has a given permission.</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#return","title":"Return","text":"<p><code>true</code> if the permission is granted, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#parameters","title":"Parameters","text":"<p>androidJvm</p> permission The permission to check."},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/","title":"Is all permissions granted","text":"<p>//android/dev.atick.core.extensions/isAllPermissionsGranted</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#isallpermissionsgranted","title":"isAllPermissionsGranted","text":"<p>[androidJvm]\\ fun Context.isAllPermissionsGranted(permissions: List&lt;String&gt;): Boolean</p> <p>Checks if all the given permissions are granted.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#return","title":"Return","text":"<p><code>true</code> if all permissions are granted, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#parameters","title":"Parameters","text":"<p>androidJvm</p> permissions List of permissions to check."},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/","title":"Is email valid","text":"<p>//android/dev.atick.core.extensions/isEmailValid</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/#isemailvalid","title":"isEmailValid","text":"<p>[androidJvm]\\ fun String?.isEmailValid(): Boolean</p> <p>Checks if the string is a valid email address.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/#return","title":"Return","text":"<p><code>true</code> if the string is a valid email address, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/","title":"Is password valid","text":"<p>//android/dev.atick.core.extensions/isPasswordValid</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/#ispasswordvalid","title":"isPasswordValid","text":"<p>[androidJvm]\\ fun String?.isPasswordValid(): Boolean</p> <p>Checks if the string is a valid password based on the specified criteria.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/#return","title":"Return","text":"<p><code>true</code> if the string is a valid password, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/","title":"Is valid full name","text":"<p>//android/dev.atick.core.extensions/isValidFullName</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/#isvalidfullname","title":"isValidFullName","text":"<p>[androidJvm]\\ fun String?.isValidFullName(): Boolean</p> <p>Checks if a given full name is valid.</p> <p>A valid full name consists of at least two parts: a first name and a last name. Each part should contain only letters (assuming names don't contain special characters).</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/#return","title":"Return","text":"<p><code>true</code> if the full name is valid, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/","title":"Show notification","text":"<p>//android/dev.atick.core.extensions/showNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/#shownotification","title":"showNotification","text":"<p>[androidJvm]\\ fun Context.showNotification(notificationId: Int, notification: Notification)</p> <p>Shows a notification using the specified notification ID and notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> notificationId The ID of the notification. notification The notification object to be shown."},{"location":"core/android/android/dev.atick.core.extensions/show-toast/","title":"Show toast","text":"<p>//android/dev.atick.core.extensions/showToast</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-toast/#showtoast","title":"showToast","text":"<p>[androidJvm]\\ fun Context.showToast(message: String)</p> <p>Displays a short toast message.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-toast/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to be displayed in the toast."},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/","title":"State in delayed","text":"<p>//android/dev.atick.core.extensions/stateInDelayed</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#stateindelayed","title":"stateInDelayed","text":"<p>[androidJvm]\\ fun &lt;T&gt; Flow&lt;T&gt;.stateInDelayed(initialValue: T, scope: CoroutineScope): StateFlow&lt;T&gt;</p> <p>Returns a StateFlow that represents the last value emitted by the Flow</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#return","title":"Return","text":"<p>A StateFlow that represents the last value emitted by the Flow</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#parameters","title":"Parameters","text":"<p>androidJvm</p> initialValue The initial value of the StateFlow scope The CoroutineScope to be used for the StateFlow"},{"location":"core/android/android/dev.atick.core.extensions/-options/","title":"Index","text":"<p>//android/dev.atick.core.extensions/Options</p>"},{"location":"core/android/android/dev.atick.core.extensions/-options/#options","title":"Options","text":"<p>[androidJvm]\\ annotation class Options</p>"},{"location":"core/android/android/dev.atick.core.utils/","title":"Index","text":"<p>//android/dev.atick.core.utils</p>"},{"location":"core/android/android/dev.atick.core.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.utils/#types","title":"Types","text":"Name Summary MonthInfo [androidJvm]data class MonthInfo(val monthName: String, val year: Int, val startDate: Long, val endDate: Long)Data class that represents information about a month. Resource [androidJvm]sealed class Resource&lt;T&gt;A sealed class that represents the result of a resource operation. SingleLiveEvent [androidJvm]open class SingleLiveEvent&lt;out T&gt;(content: T)A class that represents a single-use event. StringDecoder [androidJvm]interface StringDecoderInterface representing a string decoder. UriDecoder [androidJvm]class UriDecoder@Injectconstructor : StringDecoderImplementation of StringDecoder that uses Android's Uri.decode method for decoding strings."},{"location":"core/android/android/dev.atick.core.utils/#functions","title":"Functions","text":"Name Summary getMonthInfoAt [androidJvm]fun getMonthInfoAt(monthOffset: Int = 0): MonthInfoReturns information about the month at the specified offset. networkBoundResource [androidJvm]inline fun &lt;ResultType, RequestType&gt; networkBoundResource(crossinline query: () -&gt; Flow&lt;ResultType&gt;, crossinline fetch: suspend () -&gt; RequestType, crossinline saveFetchedResult: suspend (RequestType) -&gt; Unit, crossinline shouldFetch: (ResultType) -&gt; Boolean = { true }): Flow&lt;Resource&lt;ResultType&gt;&gt;Creates a network-bound resource flow that performs a query and fetches new data if necessary. suspendCoroutineWithTimeout [androidJvm]inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeMillis: Long, crossinline block: (CancellableContinuation&lt;T&gt;) -&gt; Unit): Tinline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeout: Duration, crossinline block: (Continuation&lt;T&gt;) -&gt; Unit): TSuspends the current coroutine until the specified block is completed or the timeout is reached. suspendRunCatching [androidJvm]inline suspend fun &lt;T&gt; suspendRunCatching(crossinline block: suspend () -&gt; T): Result&lt;T&gt;Runs the specified block and returns the result as a Result."},{"location":"core/android/android/dev.atick.core.utils/get-month-info-at/","title":"Get month info at","text":"<p>//android/dev.atick.core.utils/getMonthInfoAt</p>"},{"location":"core/android/android/dev.atick.core.utils/get-month-info-at/#getmonthinfoat","title":"getMonthInfoAt","text":"<p>[androidJvm]\\ fun getMonthInfoAt(monthOffset: Int = 0): MonthInfo</p> <p>Returns information about the month at the specified offset.</p>"},{"location":"core/android/android/dev.atick.core.utils/get-month-info-at/#return","title":"Return","text":"<p>Information about the month at the specified offset. Example usage:</p> <pre><code>val monthInfo = getMonthInfoAt(1)\nprintln(\"Month: ${monthInfo.monthName}, Year: ${monthInfo.year}\")\n</code></pre>"},{"location":"core/android/android/dev.atick.core.utils/get-month-info-at/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthOffset The offset of the month to get information about."},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/","title":"Network bound resource","text":"<p>//android/dev.atick.core.utils/networkBoundResource</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#networkboundresource","title":"networkBoundResource","text":"<p>[androidJvm]\\ inline fun &lt;ResultType, RequestType&gt; networkBoundResource(crossinline query: () -&gt; Flow&lt;ResultType&gt;, crossinline fetch: suspend () -&gt; RequestType, crossinline saveFetchedResult: suspend (RequestType) -&gt; Unit, crossinline shouldFetch: (ResultType) -&gt; Boolean = { true }): Flow&lt;Resource&lt;ResultType&gt;&gt;</p> <p>Creates a network-bound resource flow that performs a query and fetches new data if necessary.</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#return","title":"Return","text":"<p>A flow emitting the resource state based on the query and fetch operations.</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> ResultType The type of the query result. RequestType The type of the fetched data. query The query function that returns a flow of the current data. fetch The suspend function that fetches new data. saveFetchedResult The suspend function that saves the fetched result. shouldFetch The predicate function that determines if fetching new data is necessary."},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/","title":"Suspend coroutine with timeout","text":"<p>//android/dev.atick.core.utils/suspendCoroutineWithTimeout</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#suspendcoroutinewithtimeout","title":"suspendCoroutineWithTimeout","text":"<p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeout: Duration, crossinline block: (Continuation&lt;T&gt;) -&gt; Unit): T</p> <p>Suspends the current coroutine until the specified block is completed or the timeout is reached.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#return","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#parameters","title":"Parameters","text":"<p>androidJvm</p> timeout The duration to wait for the block to complete. block The block to execute. <p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeMillis: Long, crossinline block: (CancellableContinuation&lt;T&gt;) -&gt; Unit): T</p> <p>Suspends the current coroutine until the specified block is completed or the timeout is reached.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#return_1","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> timeMillis The time in milliseconds to wait for the block to complete. block The block to execute."},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/","title":"Suspend run catching","text":"<p>//android/dev.atick.core.utils/suspendRunCatching</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#suspendruncatching","title":"suspendRunCatching","text":"<p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendRunCatching(crossinline block: suspend () -&gt; T): Result&lt;T&gt;</p> <p>Runs the specified block and returns the result as a Result.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#return","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#parameters","title":"Parameters","text":"<p>androidJvm</p> block The block to execute."},{"location":"core/android/android/dev.atick.core.utils/-month-info/","title":"Index","text":"<p>//android/dev.atick.core.utils/MonthInfo</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/#monthinfo","title":"MonthInfo","text":"<p>data class MonthInfo(val monthName: String, val year: Int, val startDate: Long, val endDate: Long)</p> <p>Data class that represents information about a month.</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthName The name of the month. year The year of the month. startDate The start date of the month in milliseconds. endDate The end date of the month in milliseconds."},{"location":"core/android/android/dev.atick.core.utils/-month-info/#constructors","title":"Constructors","text":"MonthInfo [androidJvm]constructor(monthName: String, year: Int, startDate: Long, endDate: Long)"},{"location":"core/android/android/dev.atick.core.utils/-month-info/#properties","title":"Properties","text":"Name Summary endDate [androidJvm]val endDate: Long monthName [androidJvm]val monthName: String startDate [androidJvm]val startDate: Long year [androidJvm]val year: Int"},{"location":"core/android/android/dev.atick.core.utils/-month-info/-month-info/","title":"month info","text":"<p>//android/dev.atick.core.utils/MonthInfo/MonthInfo</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/-month-info/#monthinfo","title":"MonthInfo","text":"<p>[androidJvm]\\ constructor(monthName: String, year: Int, startDate: Long, endDate: Long)</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/-month-info/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthName The name of the month. year The year of the month. startDate The start date of the month in milliseconds. endDate The end date of the month in milliseconds."},{"location":"core/android/android/dev.atick.core.utils/-month-info/end-date/","title":"End date","text":"<p>//android/dev.atick.core.utils/MonthInfo/endDate</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/end-date/#enddate","title":"endDate","text":"<p>[androidJvm]\\ val endDate: Long</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/end-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> endDate The end date of the month in milliseconds."},{"location":"core/android/android/dev.atick.core.utils/-month-info/month-name/","title":"Month name","text":"<p>//android/dev.atick.core.utils/MonthInfo/monthName</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/month-name/#monthname","title":"monthName","text":"<p>[androidJvm]\\ val monthName: String</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/month-name/#parameters","title":"Parameters","text":"<p>androidJvm</p> monthName The name of the month."},{"location":"core/android/android/dev.atick.core.utils/-month-info/start-date/","title":"Start date","text":"<p>//android/dev.atick.core.utils/MonthInfo/startDate</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/start-date/#startdate","title":"startDate","text":"<p>[androidJvm]\\ val startDate: Long</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/start-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the month in milliseconds."},{"location":"core/android/android/dev.atick.core.utils/-month-info/year/","title":"Year","text":"<p>//android/dev.atick.core.utils/MonthInfo/year</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/year/#year","title":"year","text":"<p>[androidJvm]\\ val year: Int</p>"},{"location":"core/android/android/dev.atick.core.utils/-month-info/year/#parameters","title":"Parameters","text":"<p>androidJvm</p> year The year of the month."},{"location":"core/android/android/dev.atick.core.utils/-resource/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/#resource","title":"Resource","text":"<p>sealed class Resource&lt;T&gt;</p> <p>A sealed class that represents the result of a resource operation.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation. error The error that occurred during the operation, if any."},{"location":"core/android/android/dev.atick.core.utils/-resource/#inheritors","title":"Inheritors","text":"Success Loading Error"},{"location":"core/android/android/dev.atick.core.utils/-resource/#types","title":"Types","text":"Name Summary Error [androidJvm]class Error&lt;T&gt;(data: T? = null, error: Throwable) : Resource&lt;T&gt; Represents an error state with optional data and an error. Loading [androidJvm]class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt; Represents a loading state with optional data. Success [androidJvm]class Success&lt;T&gt;(data: T) : Resource&lt;T&gt; Represents a successful result with data."},{"location":"core/android/android/dev.atick.core.utils/-resource/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? = null error [androidJvm]val error: Throwable? = null"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/","title":"Data","text":"<p>//android/dev.atick.core.utils/Resource/data</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/#data","title":"data","text":"<p>[androidJvm]\\ val data: T? = null</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/#parameters","title":"Parameters","text":"<p>androidJvm</p> data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/error/","title":"Error","text":"<p>//android/dev.atick.core.utils/Resource/error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/error/#error","title":"error","text":"<p>[androidJvm]\\ val error: Throwable? = null</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/error/#parameters","title":"Parameters","text":"<p>androidJvm</p> error The error that occurred during the operation, if any."},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#error","title":"Error","text":"<p>class Error&lt;T&gt;(data: T? = null, error: Throwable) : Resource&lt;T&gt; </p> <p>Represents an error state with optional data and an error.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation. error The error that occurred during the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#constructors","title":"Constructors","text":"Error [androidJvm]constructor(data: T? = null, error: Throwable)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/","title":"error","text":"<p>//android/dev.atick.core.utils/Resource/Error/Error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/#error","title":"Error","text":"<p>[androidJvm]\\ constructor(data: T? = null, error: Throwable)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation. error The error that occurred during the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Loading</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#loading","title":"Loading","text":"<p>class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt; </p> <p>Represents a loading state with optional data.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#constructors","title":"Constructors","text":"Loading [androidJvm]constructor(data: T? = null)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/","title":"loading","text":"<p>//android/dev.atick.core.utils/Resource/Loading/Loading</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/#loading","title":"Loading","text":"<p>[androidJvm]\\ constructor(data: T? = null)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Success</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#success","title":"Success","text":"<p>class Success&lt;T&gt;(data: T) : Resource&lt;T&gt; </p> <p>Represents a successful result with data.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#constructors","title":"Constructors","text":"Success [androidJvm]constructor(data: T)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/","title":"success","text":"<p>//android/dev.atick.core.utils/Resource/Success/Success</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/#success","title":"Success","text":"<p>[androidJvm]\\ constructor(data: T)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/","title":"Index","text":"<p>//android/dev.atick.core.utils/SingleLiveEvent</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/#singleliveevent","title":"SingleLiveEvent","text":"<p>open class SingleLiveEvent&lt;out T&gt;(content: T)</p> <p>A class that represents a single-use event.</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the event content. content The content of the event."},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/#constructors","title":"Constructors","text":"SingleLiveEvent [androidJvm]constructor(content: T)"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/#properties","title":"Properties","text":"Name Summary hasBeenHandled [androidJvm]var hasBeenHandled: BooleanFlag indicating whether the event has been handled."},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/#functions","title":"Functions","text":"Name Summary getContentIfNotHandled [androidJvm]fun getContentIfNotHandled(): T?Returns the content if it has not been handled yet. peekContent [androidJvm]fun peekContent(): TReturns the content regardless of whether it has been handled."},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/-single-live-event/","title":"single live event","text":"<p>//android/dev.atick.core.utils/SingleLiveEvent/SingleLiveEvent</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/-single-live-event/#singleliveevent","title":"SingleLiveEvent","text":"<p>[androidJvm]\\ constructor(content: T)</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/-single-live-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the event content. content The content of the event."},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/get-content-if-not-handled/","title":"Get content if not handled","text":"<p>//android/dev.atick.core.utils/SingleLiveEvent/getContentIfNotHandled</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/get-content-if-not-handled/#getcontentifnothandled","title":"getContentIfNotHandled","text":"<p>[androidJvm]\\ fun getContentIfNotHandled(): T?</p> <p>Returns the content if it has not been handled yet.</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/get-content-if-not-handled/#return","title":"Return","text":"<p>The content of the event if it has not been handled, or null if it has been handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/has-been-handled/","title":"Has been handled","text":"<p>//android/dev.atick.core.utils/SingleLiveEvent/hasBeenHandled</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/has-been-handled/#hasbeenhandled","title":"hasBeenHandled","text":"<p>[androidJvm]\\ var hasBeenHandled: Boolean</p> <p>Flag indicating whether the event has been handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/peek-content/","title":"Peek content","text":"<p>//android/dev.atick.core.utils/SingleLiveEvent/peekContent</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/peek-content/#peekcontent","title":"peekContent","text":"<p>[androidJvm]\\ fun peekContent(): T</p> <p>Returns the content regardless of whether it has been handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-single-live-event/peek-content/#return","title":"Return","text":"<p>The content of the event.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/","title":"Index","text":"<p>//android/dev.atick.core.utils/StringDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#stringdecoder","title":"StringDecoder","text":"<p>interface StringDecoder</p> <p>Interface representing a string decoder.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#inheritors","title":"Inheritors","text":"UriDecoder"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#functions","title":"Functions","text":"Name Summary decodeString [androidJvm]abstract fun decodeString(encodedString: String): StringDecodes an encoded string."},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/","title":"Decode string","text":"<p>//android/dev.atick.core.utils/StringDecoder/decodeString</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#decodestring","title":"decodeString","text":"<p>[androidJvm]\\ abstract fun decodeString(encodedString: String): String</p> <p>Decodes an encoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#return","title":"Return","text":"<p>The decoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> encodedString The string to be decoded."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/","title":"Index","text":"<p>//android/dev.atick.core.utils/UriDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#uridecoder","title":"UriDecoder","text":"<p>[androidJvm]\\ class UriDecoder@Injectconstructor : StringDecoder</p> <p>Implementation of StringDecoder that uses Android's Uri.decode method for decoding strings.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#constructors","title":"Constructors","text":"UriDecoder [androidJvm]@Injectconstructor()Creates a UriDecoder instance."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#functions","title":"Functions","text":"Name Summary decodeString [androidJvm]open override fun decodeString(encodedString: String): StringDecodes an encoded string using Android's Uri.decode method."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/-uri-decoder/","title":"uri decoder","text":"<p>//android/dev.atick.core.utils/UriDecoder/UriDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/-uri-decoder/#uridecoder","title":"UriDecoder","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor()</p> <p>Creates a UriDecoder instance.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/","title":"Decode string","text":"<p>//android/dev.atick.core.utils/UriDecoder/decodeString</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#decodestring","title":"decodeString","text":"<p>[androidJvm]\\ open override fun decodeString(encodedString: String): String</p> <p>Decodes an encoded string using Android's Uri.decode method.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#return","title":"Return","text":"<p>The decoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> encodedString The string to be decoded."},{"location":"core/ui/","title":"Index","text":"<p>//ui</p>"},{"location":"core/ui/#ui","title":"ui","text":""},{"location":"core/ui/#packages","title":"Packages","text":"Name dev.atick.core.ui.components dev.atick.core.ui.extensions dev.atick.core.ui.theme dev.atick.core.ui.utils"},{"location":"core/ui/ui/dev.atick.core.ui.components/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.components/#types","title":"Types","text":"Name Summary JetpackButtonDefaults [androidJvm]object JetpackButtonDefaultsJetpack button default values. JetpackChipDefaults [androidJvm]object JetpackChipDefaultsJetpack chip default values. JetpackIconButtonDefaults [androidJvm]object JetpackIconButtonDefaultsJetpack icon button default values. JetpackNavigationDefaults [androidJvm]object JetpackNavigationDefaultsJetpack navigation default values. ToggleOption [androidJvm]data class ToggleOption(@StringResval text: Int, val icon: ImageVector)A data class representing a toggle option."},{"location":"core/ui/ui/dev.atick.core.ui.components/#functions","title":"Functions","text":"Name Summary AppBackground [androidJvm]@Composablefun AppBackground(modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)The main background for the app. Uses LocalBackgroundTheme to set the color and tonal elevation of a Surface. AppGradientBackground [androidJvm]@Composablefun AppGradientBackground(modifier: Modifier = Modifier, gradientColors: GradientColors = LocalGradientColors.current, content: @Composable() -&gt; Unit)A gradient background for select screens. Uses LocalBackgroundTheme to set the gradient colors of a Box within a Surface. DynamicAsyncImage [androidJvm]@Composablefun DynamicAsyncImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier, placeholder: Painter? = null)A wrapper around AsyncImage which determines the colorFilter based on the theme JetpackButton [androidJvm]@Composablefun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)Jetpack filled button with generic content slot. Wraps Material 3 Button.[androidJvm]@Composablefun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack filled button with text and icon content slots. JetpackFilterChip [androidJvm]@Composablefun JetpackFilterChip(selected: Boolean, onSelectedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, label: @Composable() -&gt; Unit)Jetpack filter chip with included leading checked icon as well as text content slot. JetpackIconToggleButton [androidJvm]@Composablefun JetpackIconToggleButton(checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, icon: @Composable() -&gt; Unit, checkedIcon: @Composable() -&gt; Unit = icon)Jetpack toggle button with icon and checked icon content slots. Wraps Material 3 IconButton. JetpackLoadingWheel [androidJvm]@Composablefun JetpackLoadingWheel(contentDesc: String, modifier: Modifier = Modifier) JetpackMultilineTextField [androidJvm]@Composablefun JetpackMultilineTextField(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, visualTransformation: VisualTransformation = VisualTransformation.None, shape: Shape = RoundedCornerShape(16.dp), minLines: Int = 1, maxLines: Int = 5)A Jetpack Compose internal component for rendering a multiline text field with optional error message display. JetpackNavigationBar [androidJvm]@Composablefun JetpackNavigationBar(modifier: Modifier = Modifier, content: @ComposableRowScope.() -&gt; Unit)Jetpack navigation bar with content slot. Wraps Material 3 NavigationBar. JetpackNavigationBarItem [androidJvm]@Composablefun RowScope.JetpackNavigationBarItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)Jetpack navigation bar item with icon and label content slots. Wraps Material 3 NavigationBarItem. JetpackNavigationRail [androidJvm]@Composablefun JetpackNavigationRail(modifier: Modifier = Modifier, header: @ComposableColumnScope.() -&gt; Unit? = null, content: @ComposableColumnScope.() -&gt; Unit)Jetpack navigation rail with header and content slots. Wraps Material 3 NavigationRail. JetpackNavigationRailItem [androidJvm]@Composablefun JetpackNavigationRailItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)Jetpack navigation rail item with icon and label content slots. Wraps Material 3 NavigationRailItem. JetpackOutlinedButton [androidJvm]@Composablefun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)Jetpack outlined button with generic content slot. Wraps Material 3 OutlinedButton.[androidJvm]@Composablefun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack outlined button with text and icon content slots. JetpackOverlayLoadingWheel [androidJvm]@Composablefun JetpackOverlayLoadingWheel(contentDesc: String, modifier: Modifier = Modifier) JetpackPasswordFiled [androidJvm]@Composablefun JetpackPasswordFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, errorMessage: String? = null)A Jetpack Compose password field with customizable appearance and optional error message display. JetpackTextButton [androidJvm]@Composablefun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @ComposableRowScope.() -&gt; Unit)Jetpack text button with generic content slot. Wraps Material 3 TextButton.[androidJvm]@Composablefun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack text button with text and icon content slots. JetpackTextField [androidJvm]@Composablefun JetpackTextField(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null, readOnly: Boolean = false)A Jetpack Compose text field with customizable appearance and optional error message display. JetpackToggleOptions [androidJvm]@Composablefun JetpackToggleOptions(options: List&lt;ToggleOption&gt;, selectedIndex: Int, onSelectionChanged: (Int) -&gt; Unit, modifier: Modifier = Modifier)A row of toggle options that can be selected. JetpackTopAppBar [androidJvm]@Composablefun JetpackTopAppBar(@StringRestitleRes: Int, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onActionClick: () -&gt; Unit = {})@Composablefun JetpackTopAppBar(@StringRestitleRes: Int, navigationIcon: ImageVector, navigationIconContentDescription: String?, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onNavigationClick: () -&gt; Unit = {}, onActionClick: () -&gt; Unit = {})"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/","title":"app background","text":"<p>//ui/dev.atick.core.ui.components/AppBackground</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/#appbackground","title":"AppBackground","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun AppBackground(modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)</p> <p>The main background for the app. Uses LocalBackgroundTheme to set the color and tonal elevation of a Surface.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the background. content The background content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/","title":"app gradient background","text":"<p>//ui/dev.atick.core.ui.components/AppGradientBackground</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/#appgradientbackground","title":"AppGradientBackground","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun AppGradientBackground(modifier: Modifier = Modifier, gradientColors: GradientColors = LocalGradientColors.current, content: @Composable() -&gt; Unit)</p> <p>A gradient background for select screens. Uses LocalBackgroundTheme to set the gradient colors of a Box within a Surface.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the background. gradientColors The gradient colors to be rendered. content The background content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-dynamic-async-image/","title":"dynamic async image","text":"<p>//ui/dev.atick.core.ui.components/DynamicAsyncImage</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-dynamic-async-image/#dynamicasyncimage","title":"DynamicAsyncImage","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun DynamicAsyncImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier, placeholder: Painter? = null)</p> <p>A wrapper around AsyncImage which determines the colorFilter based on the theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/","title":"jetpack button","text":"<p>//ui/dev.atick.core.ui.components/JetpackButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#jetpackbutton","title":"JetpackButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack filled button with generic content slot. Wraps Material 3 Button.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. contentPadding The spacing values to apply internally between the container and the content. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack filled button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/","title":"jetpack filter chip","text":"<p>//ui/dev.atick.core.ui.components/JetpackFilterChip</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/#jetpackfilterchip","title":"JetpackFilterChip","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackFilterChip(selected: Boolean, onSelectedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, label: @Composable() -&gt; Unit)</p> <p>Jetpack filter chip with included leading checked icon as well as text content slot.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether the chip is currently checked. onSelectedChange Called when the user clicks the chip and toggles checked. modifier Modifier to be applied to the chip. enabled Controls the enabled state of the chip. When <code>false</code>, this chip will not be clickable and will appear disabled to accessibility services. label The text label content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/","title":"jetpack icon toggle button","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconToggleButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/#jetpackicontogglebutton","title":"JetpackIconToggleButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackIconToggleButton(checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, icon: @Composable() -&gt; Unit, checkedIcon: @Composable() -&gt; Unit = icon)</p> <p>Jetpack toggle button with icon and checked icon content slots. Wraps Material 3 IconButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> checked Whether the toggle button is currently checked. onCheckedChange Called when the user clicks the toggle button and toggles checked. modifier Modifier to be applied to the toggle button. enabled Controls the enabled state of the toggle button. When <code>false</code>, this toggle button will not be clickable and will appear disabled to accessibility services. icon The icon content to show when unchecked. checkedIcon The icon content to show when checked."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/","title":"jetpack loading wheel","text":"<p>//ui/dev.atick.core.ui.components/JetpackLoadingWheel</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/#jetpackloadingwheel","title":"JetpackLoadingWheel","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-multiline-text-field/","title":"jetpack multiline text field","text":"<p>//ui/dev.atick.core.ui.components/JetpackMultilineTextField</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-multiline-text-field/#jetpackmultilinetextfield","title":"JetpackMultilineTextField","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackMultilineTextField(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, visualTransformation: VisualTransformation = VisualTransformation.None, shape: Shape = RoundedCornerShape(16.dp), minLines: Int = 1, maxLines: Int = 5)</p> <p>A Jetpack Compose internal component for rendering a multiline text field with optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-multiline-text-field/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the text field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the text field. leadingIcon A composable function that represents the leading icon of the text field. modifier The modifier for this text field. trailingIcon A composable function that represents the trailing icon of the text field. errorMessage The error message to display below the text field, if any. keyboardOptions The keyboard options for the text field. visualTransformation The visual transformation to apply to the text. shape The shape of the text field. minLines The minimum number of lines to display. maxLines The maximum number of lines to display before scrolling."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/","title":"jetpack navigation bar item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationBarItem</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/#jetpacknavigationbaritem","title":"JetpackNavigationBarItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun RowScope.JetpackNavigationBarItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)</p> <p>Jetpack navigation bar item with icon and label content slots. Wraps Material 3 NavigationBarItem.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this item is selected. onClick The callback to be invoked when this item is selected. icon The item icon content. modifier Modifier to be applied to this item. selectedIcon The item icon content when selected. enabled controls the enabled state of this item. When <code>false</code>, this item will not be clickable and will appear disabled to accessibility services. label The item text label content. alwaysShowLabel Whether to always show the label for this item. If false, the label will only be shown when this item is selected."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/","title":"jetpack navigation bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/#jetpacknavigationbar","title":"JetpackNavigationBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationBar(modifier: Modifier = Modifier, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack navigation bar with content slot. Wraps Material 3 NavigationBar.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation bar. content Destinations inside the navigation bar. This should contain multiple NavigationBarItems."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/","title":"jetpack navigation rail item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationRailItem</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/#jetpacknavigationrailitem","title":"JetpackNavigationRailItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationRailItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)</p> <p>Jetpack navigation rail item with icon and label content slots. Wraps Material 3 NavigationRailItem.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this item is selected. onClick The callback to be invoked when this item is selected. icon The item icon content. modifier Modifier to be applied to this item. selectedIcon The item icon content when selected. enabled controls the enabled state of this item. When <code>false</code>, this item will not be clickable and will appear disabled to accessibility services. label The item text label content. alwaysShowLabel Whether to always show the label for this item. If false, the label will only be shown when this item is selected."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/","title":"jetpack navigation rail","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationRail</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/#jetpacknavigationrail","title":"JetpackNavigationRail","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationRail(modifier: Modifier = Modifier, header: @ComposableColumnScope.() -&gt; Unit? = null, content: @ComposableColumnScope.() -&gt; Unit)</p> <p>Jetpack navigation rail with header and content slots. Wraps Material 3 NavigationRail.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation rail. header Optional header that may hold a floating action button or a logo. content Destinations inside the navigation rail. This should contain multiple NavigationRailItems."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/","title":"jetpack outlined button","text":"<p>//ui/dev.atick.core.ui.components/JetpackOutlinedButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#jetpackoutlinedbutton","title":"JetpackOutlinedButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack outlined button with generic content slot. Wraps Material 3 OutlinedButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. contentPadding The spacing values to apply internally between the container and the content. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack outlined button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/","title":"jetpack overlay loading wheel","text":"<p>//ui/dev.atick.core.ui.components/JetpackOverlayLoadingWheel</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/#jetpackoverlayloadingwheel","title":"JetpackOverlayLoadingWheel","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOverlayLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/","title":"jetpack password filed","text":"<p>//ui/dev.atick.core.ui.components/JetpackPasswordFiled</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/#jetpackpasswordfiled","title":"JetpackPasswordFiled","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackPasswordFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, errorMessage: String? = null)</p> <p>A Jetpack Compose password field with customizable appearance and optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the password field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the password field. leadingIcon A composable function that represents the leading icon of the password field. modifier The modifier for this password field. errorMessage The error message to display below the password field, if any."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/","title":"jetpack text button","text":"<p>//ui/dev.atick.core.ui.components/JetpackTextButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#jetpacktextbutton","title":"JetpackTextButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack text button with generic content slot. Wraps Material 3 TextButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack text button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-field/","title":"jetpack text field","text":"<p>//ui/dev.atick.core.ui.components/JetpackTextField</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-field/#jetpacktextfield","title":"JetpackTextField","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextField(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null, readOnly: Boolean = false)</p> <p>A Jetpack Compose text field with customizable appearance and optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-field/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the text field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the text field. leadingIcon A composable function that represents the leading icon of the text field. modifier The modifier for this text field. keyboardOptions The keyboard options for the text field. trailingIcon A composable function that represents the trailing icon of the text field. errorMessage The error message to display below the text field, if any."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-toggle-options/","title":"jetpack toggle options","text":"<p>//ui/dev.atick.core.ui.components/JetpackToggleOptions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-toggle-options/#jetpacktoggleoptions","title":"JetpackToggleOptions","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackToggleOptions(options: List&lt;ToggleOption&gt;, selectedIndex: Int, onSelectionChanged: (Int) -&gt; Unit, modifier: Modifier = Modifier)</p> <p>A row of toggle options that can be selected.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-toggle-options/#parameters","title":"Parameters","text":"<p>androidJvm</p> options The list of options to display. selectedIndex The index of the selected option. onSelectionChanged The callback to invoke when the selected option changes. modifier The modifier to apply to the row."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/","title":"jetpack top app bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackTopAppBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/#jetpacktopappbar","title":"JetpackTopAppBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTopAppBar(@StringRestitleRes: Int, navigationIcon: ImageVector, navigationIconContentDescription: String?, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onNavigationClick: () -&gt; Unit = {}, onActionClick: () -&gt; Unit = {})</p> <p>@Composable</p> <p>fun JetpackTopAppBar(@StringRestitleRes: Int, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onActionClick: () -&gt; Unit = {})</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/#jetpackbuttondefaults","title":"JetpackButtonDefaults","text":"<p>[androidJvm]\\ object JetpackButtonDefaults</p> <p>Jetpack button default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/#properties","title":"Properties","text":"Name Summary DisabledOutlinedButtonBorderAlpha [androidJvm]const val DisabledOutlinedButtonBorderAlpha: Float = 0.12f OutlinedButtonBorderWidth [androidJvm]val OutlinedButtonBorderWidth: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-disabled-outlined-button-border-alpha/","title":"disabled outlined button border alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults/DisabledOutlinedButtonBorderAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-disabled-outlined-button-border-alpha/#disabledoutlinedbuttonborderalpha","title":"DisabledOutlinedButtonBorderAlpha","text":"<p>[androidJvm]\\ const val DisabledOutlinedButtonBorderAlpha: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-outlined-button-border-width/","title":"outlined button border width","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults/OutlinedButtonBorderWidth</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-outlined-button-border-width/#outlinedbuttonborderwidth","title":"OutlinedButtonBorderWidth","text":"<p>[androidJvm]\\ val OutlinedButtonBorderWidth: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/#jetpackchipdefaults","title":"JetpackChipDefaults","text":"<p>[androidJvm]\\ object JetpackChipDefaults</p> <p>Jetpack chip default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/#properties","title":"Properties","text":"Name Summary ChipBorderWidth [androidJvm]val ChipBorderWidth: Dp DisabledChipContainerAlpha [androidJvm]const val DisabledChipContainerAlpha: Float = 0.12f DisabledChipContentAlpha [androidJvm]const val DisabledChipContentAlpha: Float = 0.38f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-chip-border-width/","title":"chip border width","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/ChipBorderWidth</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-chip-border-width/#chipborderwidth","title":"ChipBorderWidth","text":"<p>[androidJvm]\\ val ChipBorderWidth: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-container-alpha/","title":"disabled chip container alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/DisabledChipContainerAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-container-alpha/#disabledchipcontaineralpha","title":"DisabledChipContainerAlpha","text":"<p>[androidJvm]\\ const val DisabledChipContainerAlpha: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-content-alpha/","title":"disabled chip content alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/DisabledChipContentAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-content-alpha/#disabledchipcontentalpha","title":"DisabledChipContentAlpha","text":"<p>[androidJvm]\\ const val DisabledChipContentAlpha: Float = 0.38f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconButtonDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/#jetpackiconbuttondefaults","title":"JetpackIconButtonDefaults","text":"<p>[androidJvm]\\ object JetpackIconButtonDefaults</p> <p>Jetpack icon button default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/#properties","title":"Properties","text":"Name Summary DisabledIconButtonContainerAlpha [androidJvm]const val DisabledIconButtonContainerAlpha: Float = 0.12f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/-disabled-icon-button-container-alpha/","title":"disabled icon button container alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconButtonDefaults/DisabledIconButtonContainerAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/-disabled-icon-button-container-alpha/#disablediconbuttoncontaineralpha","title":"DisabledIconButtonContainerAlpha","text":"<p>[androidJvm]\\ const val DisabledIconButtonContainerAlpha: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/#jetpacknavigationdefaults","title":"JetpackNavigationDefaults","text":"<p>[androidJvm]\\ object JetpackNavigationDefaults</p> <p>Jetpack navigation default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/#functions","title":"Functions","text":"Name Summary navigationContentColor [androidJvm]@Composablefun navigationContentColor(): Color navigationIndicatorColor [androidJvm]@Composablefun navigationIndicatorColor(): Color navigationSelectedItemColor [androidJvm]@Composablefun navigationSelectedItemColor(): Color"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-content-color/","title":"Navigation content color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationContentColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-content-color/#navigationcontentcolor","title":"navigationContentColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationContentColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-indicator-color/","title":"Navigation indicator color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationIndicatorColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-indicator-color/#navigationindicatorcolor","title":"navigationIndicatorColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationIndicatorColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-selected-item-color/","title":"Navigation selected item color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationSelectedItemColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-selected-item-color/#navigationselecteditemcolor","title":"navigationSelectedItemColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationSelectedItemColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/ToggleOption</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/#toggleoption","title":"ToggleOption","text":"<p>data class ToggleOption(@StringResval text: Int, val icon: ImageVector)</p> <p>A data class representing a toggle option.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The text to display for the option. icon The icon to display for the option."},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/#constructors","title":"Constructors","text":"ToggleOption [androidJvm]constructor(@StringRestext: Int, icon: ImageVector)"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/#properties","title":"Properties","text":"Name Summary icon [androidJvm]val icon: ImageVector text [androidJvm]val text: Int"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/-toggle-option/","title":"toggle option","text":"<p>//ui/dev.atick.core.ui.components/ToggleOption/ToggleOption</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/-toggle-option/#toggleoption","title":"ToggleOption","text":"<p>[androidJvm]\\ constructor(@StringRestext: Int, icon: ImageVector)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/-toggle-option/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The text to display for the option. icon The icon to display for the option."},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/icon/","title":"Icon","text":"<p>//ui/dev.atick.core.ui.components/ToggleOption/icon</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/icon/#icon","title":"icon","text":"<p>[androidJvm]\\ val icon: ImageVector</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/icon/#parameters","title":"Parameters","text":"<p>androidJvm</p> icon The icon to display for the option."},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/text/","title":"Text","text":"<p>//ui/dev.atick.core.ui.components/ToggleOption/text</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/text/#text","title":"text","text":"<p>[androidJvm]\\ val text: Int</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-toggle-option/text/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The text to display for the option."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/","title":"Index","text":"<p>//ui/dev.atick.core.ui.extensions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#functions","title":"Functions","text":"Name Summary checkForPermissions [androidJvm]inline fun ComponentActivity.checkForPermissions(permissions: List&lt;String&gt;, crossinline onSuccess: () -&gt; Unit)Check for permissions. collectWithLifecycle [androidJvm]inline fun &lt;T&gt; LifecycleOwner.collectWithLifecycle(flow: Flow&lt;T&gt;, crossinline action: (T) -&gt; Unit)Observe a Flow and execute an action when the value is changed. observe [androidJvm]inline fun &lt;T&gt; LifecycleOwner.observe(liveData: LiveData&lt;T&gt;, crossinline action: (T) -&gt; Unit)Observe a LiveData and execute an action when the value is changed. observeEvent [androidJvm]inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: LiveData&lt;SingleLiveEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: MutableLiveData&lt;SingleLiveEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)Observe a LiveData and execute an action when the value is changed. openPermissionSettings [androidJvm]fun ComponentActivity.openPermissionSettings()Open app settings. permissionLauncher [androidJvm]inline fun ComponentActivity.permissionLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Array&lt;String&gt;&gt;Launch an activity for permission. rememberToastState [androidJvm]@Composablefun rememberToastState(): (String) -&gt; Unit resultLauncher [androidJvm]inline fun ComponentActivity.resultLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Intent&gt;Launch an activity for result."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/","title":"Check for permissions","text":"<p>//ui/dev.atick.core.ui.extensions/checkForPermissions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/#checkforpermissions","title":"checkForPermissions","text":"<p>[androidJvm]\\ inline fun ComponentActivity.checkForPermissions(permissions: List&lt;String&gt;, crossinline onSuccess: () -&gt; Unit)</p> <p>Check for permissions.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/#parameters","title":"Parameters","text":"<p>androidJvm</p> permissions List of permissions to be checked. onSuccess Callback when the result is successful."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/","title":"Collect with lifecycle","text":"<p>//ui/dev.atick.core.ui.extensions/collectWithLifecycle</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/#collectwithlifecycle","title":"collectWithLifecycle","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.collectWithLifecycle(flow: Flow&lt;T&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a Flow and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/","title":"Observe event","text":"<p>//ui/dev.atick.core.ui.extensions/observeEvent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/#observeevent","title":"observeEvent","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: LiveData&lt;SingleLiveEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)</p> <p>inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: MutableLiveData&lt;SingleLiveEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a LiveData and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/","title":"Observe","text":"<p>//ui/dev.atick.core.ui.extensions/observe</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/#observe","title":"observe","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.observe(liveData: LiveData&lt;T&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a LiveData and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/open-permission-settings/","title":"Open permission settings","text":"<p>//ui/dev.atick.core.ui.extensions/openPermissionSettings</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/open-permission-settings/#openpermissionsettings","title":"openPermissionSettings","text":"<p>[androidJvm]\\ fun ComponentActivity.openPermissionSettings()</p> <p>Open app settings.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/","title":"Permission launcher","text":"<p>//ui/dev.atick.core.ui.extensions/permissionLauncher</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/#permissionlauncher","title":"permissionLauncher","text":"<p>[androidJvm]\\ inline fun ComponentActivity.permissionLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Array&lt;String&gt;&gt;</p> <p>Launch an activity for permission.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSuccess Callback when the result is successful. onFailure Callback when the result is failed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/remember-toast-state/","title":"Remember toast state","text":"<p>//ui/dev.atick.core.ui.extensions/rememberToastState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/remember-toast-state/#remembertoaststate","title":"rememberToastState","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun rememberToastState(): (String) -&gt; Unit</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/","title":"Result launcher","text":"<p>//ui/dev.atick.core.ui.extensions/resultLauncher</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/#resultlauncher","title":"resultLauncher","text":"<p>[androidJvm]\\ inline fun ComponentActivity.resultLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Intent&gt;</p> <p>Launch an activity for result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSuccess Callback when the result is successful. onFailure Callback when the result is failed."},{"location":"core/ui/ui/dev.atick.core.ui.theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.theme/#types","title":"Types","text":"Name Summary BackgroundTheme [androidJvm]@Immutabledata class BackgroundTheme(val color: Color = Color.Unspecified, val tonalElevation: Dp = Dp.Unspecified)A class to model background color and tonal elevation values for Now in Android. GradientColors [androidJvm]@Immutabledata class GradientColors(val top: Color = Color.Unspecified, val bottom: Color = Color.Unspecified, val container: Color = Color.Unspecified)A class to model gradient color values. TintTheme [androidJvm]@Immutabledata class TintTheme(val iconTint: Color? = null)A class to model background color and tonal elevation values."},{"location":"core/ui/ui/dev.atick.core.ui.theme/#properties","title":"Properties","text":"Name Summary backgroundDark [androidJvm]val backgroundDark: Color backgroundDarkHighContrast [androidJvm]val backgroundDarkHighContrast: Color backgroundLight [androidJvm]val backgroundLight: Color backgroundLightHighContrast [androidJvm]val backgroundLightHighContrast: Color DarkAndroidBackgroundTheme [androidJvm]val DarkAndroidBackgroundTheme: BackgroundThemeDark Android background theme DarkAndroidGradientColors [androidJvm]val DarkAndroidGradientColors: GradientColorsDark Android gradient colors errorContainerDark [androidJvm]val errorContainerDark: Color errorContainerDarkHighContrast [androidJvm]val errorContainerDarkHighContrast: Color errorContainerLight [androidJvm]val errorContainerLight: Color errorContainerLightHighContrast [androidJvm]val errorContainerLightHighContrast: Color errorDark [androidJvm]val errorDark: Color errorDarkHighContrast [androidJvm]val errorDarkHighContrast: Color errorLight [androidJvm]val errorLight: Color errorLightHighContrast [androidJvm]val errorLightHighContrast: Color inverseOnSurfaceDark [androidJvm]val inverseOnSurfaceDark: Color inverseOnSurfaceDarkHighContrast [androidJvm]val inverseOnSurfaceDarkHighContrast: Color inverseOnSurfaceLight [androidJvm]val inverseOnSurfaceLight: Color inverseOnSurfaceLightHighContrast [androidJvm]val inverseOnSurfaceLightHighContrast: Color inversePrimaryDark [androidJvm]val inversePrimaryDark: Color inversePrimaryDarkHighContrast [androidJvm]val inversePrimaryDarkHighContrast: Color inversePrimaryLight [androidJvm]val inversePrimaryLight: Color inversePrimaryLightHighContrast [androidJvm]val inversePrimaryLightHighContrast: Color inverseSurfaceDark [androidJvm]val inverseSurfaceDark: Color inverseSurfaceDarkHighContrast [androidJvm]val inverseSurfaceDarkHighContrast: Color inverseSurfaceLight [androidJvm]val inverseSurfaceLight: Color inverseSurfaceLightHighContrast [androidJvm]val inverseSurfaceLightHighContrast: Color LightAndroidBackgroundTheme [androidJvm]val LightAndroidBackgroundTheme: BackgroundThemeLight Android background theme LightAndroidGradientColors [androidJvm]val LightAndroidGradientColors: GradientColorsLight Android gradient colors LocalBackgroundTheme [androidJvm]val LocalBackgroundTheme: ProvidableCompositionLocal&lt;BackgroundTheme&gt;A composition local for BackgroundTheme. LocalGradientColors [androidJvm]val LocalGradientColors: ProvidableCompositionLocal&lt;GradientColors&gt;A composition local for GradientColors. LocalTintTheme [androidJvm]val LocalTintTheme: ProvidableCompositionLocal&lt;TintTheme&gt;A composition local for TintTheme. onBackgroundDark [androidJvm]val onBackgroundDark: Color onBackgroundDarkHighContrast [androidJvm]val onBackgroundDarkHighContrast: Color onBackgroundLight [androidJvm]val onBackgroundLight: Color onBackgroundLightHighContrast [androidJvm]val onBackgroundLightHighContrast: Color onErrorContainerDark [androidJvm]val onErrorContainerDark: Color onErrorContainerDarkHighContrast [androidJvm]val onErrorContainerDarkHighContrast: Color onErrorContainerLight [androidJvm]val onErrorContainerLight: Color onErrorContainerLightHighContrast [androidJvm]val onErrorContainerLightHighContrast: Color onErrorDark [androidJvm]val onErrorDark: Color onErrorDarkHighContrast [androidJvm]val onErrorDarkHighContrast: Color onErrorLight [androidJvm]val onErrorLight: Color onErrorLightHighContrast [androidJvm]val onErrorLightHighContrast: Color onPrimaryContainerDark [androidJvm]val onPrimaryContainerDark: Color onPrimaryContainerDarkHighContrast [androidJvm]val onPrimaryContainerDarkHighContrast: Color onPrimaryContainerLight [androidJvm]val onPrimaryContainerLight: Color onPrimaryContainerLightHighContrast [androidJvm]val onPrimaryContainerLightHighContrast: Color onPrimaryDark [androidJvm]val onPrimaryDark: Color onPrimaryDarkHighContrast [androidJvm]val onPrimaryDarkHighContrast: Color onPrimaryLight [androidJvm]val onPrimaryLight: Color onPrimaryLightHighContrast [androidJvm]val onPrimaryLightHighContrast: Color onSecondaryContainerDark [androidJvm]val onSecondaryContainerDark: Color onSecondaryContainerDarkHighContrast [androidJvm]val onSecondaryContainerDarkHighContrast: Color onSecondaryContainerLight [androidJvm]val onSecondaryContainerLight: Color onSecondaryContainerLightHighContrast [androidJvm]val onSecondaryContainerLightHighContrast: Color onSecondaryDark [androidJvm]val onSecondaryDark: Color onSecondaryDarkHighContrast [androidJvm]val onSecondaryDarkHighContrast: Color onSecondaryLight [androidJvm]val onSecondaryLight: Color onSecondaryLightHighContrast [androidJvm]val onSecondaryLightHighContrast: Color onSurfaceDark [androidJvm]val onSurfaceDark: Color onSurfaceDarkHighContrast [androidJvm]val onSurfaceDarkHighContrast: Color onSurfaceLight [androidJvm]val onSurfaceLight: Color onSurfaceLightHighContrast [androidJvm]val onSurfaceLightHighContrast: Color onSurfaceVariantDark [androidJvm]val onSurfaceVariantDark: Color onSurfaceVariantDarkHighContrast [androidJvm]val onSurfaceVariantDarkHighContrast: Color onSurfaceVariantLight [androidJvm]val onSurfaceVariantLight: Color onSurfaceVariantLightHighContrast [androidJvm]val onSurfaceVariantLightHighContrast: Color onTertiaryContainerDark [androidJvm]val onTertiaryContainerDark: Color onTertiaryContainerDarkHighContrast [androidJvm]val onTertiaryContainerDarkHighContrast: Color onTertiaryContainerLight [androidJvm]val onTertiaryContainerLight: Color onTertiaryContainerLightHighContrast [androidJvm]val onTertiaryContainerLightHighContrast: Color onTertiaryDark [androidJvm]val onTertiaryDark: Color onTertiaryDarkHighContrast [androidJvm]val onTertiaryDarkHighContrast: Color onTertiaryLight [androidJvm]val onTertiaryLight: Color onTertiaryLightHighContrast [androidJvm]val onTertiaryLightHighContrast: Color outlineDark [androidJvm]val outlineDark: Color outlineDarkHighContrast [androidJvm]val outlineDarkHighContrast: Color outlineLight [androidJvm]val outlineLight: Color outlineLightHighContrast [androidJvm]val outlineLightHighContrast: Color outlineVariantDark [androidJvm]val outlineVariantDark: Color outlineVariantDarkHighContrast [androidJvm]val outlineVariantDarkHighContrast: Color outlineVariantLight [androidJvm]val outlineVariantLight: Color outlineVariantLightHighContrast [androidJvm]val outlineVariantLightHighContrast: Color primaryContainerDark [androidJvm]val primaryContainerDark: Color primaryContainerDarkHighContrast [androidJvm]val primaryContainerDarkHighContrast: Color primaryContainerLight [androidJvm]val primaryContainerLight: Color primaryContainerLightHighContrast [androidJvm]val primaryContainerLightHighContrast: Color primaryDark [androidJvm]val primaryDark: Color primaryDarkHighContrast [androidJvm]val primaryDarkHighContrast: Color primaryLight [androidJvm]val primaryLight: Color primaryLightHighContrast [androidJvm]val primaryLightHighContrast: Color scrimDark [androidJvm]val scrimDark: Color scrimDarkHighContrast [androidJvm]val scrimDarkHighContrast: Color scrimLight [androidJvm]val scrimLight: Color scrimLightHighContrast [androidJvm]val scrimLightHighContrast: Color secondaryContainerDark [androidJvm]val secondaryContainerDark: Color secondaryContainerDarkHighContrast [androidJvm]val secondaryContainerDarkHighContrast: Color secondaryContainerLight [androidJvm]val secondaryContainerLight: Color secondaryContainerLightHighContrast [androidJvm]val secondaryContainerLightHighContrast: Color secondaryDark [androidJvm]val secondaryDark: Color secondaryDarkHighContrast [androidJvm]val secondaryDarkHighContrast: Color secondaryLight [androidJvm]val secondaryLight: Color secondaryLightHighContrast [androidJvm]val secondaryLightHighContrast: Color surfaceBrightDark [androidJvm]val surfaceBrightDark: Color surfaceBrightDarkHighContrast [androidJvm]val surfaceBrightDarkHighContrast: Color surfaceBrightLight [androidJvm]val surfaceBrightLight: Color surfaceBrightLightHighContrast [androidJvm]val surfaceBrightLightHighContrast: Color surfaceContainerDark [androidJvm]val surfaceContainerDark: Color surfaceContainerDarkHighContrast [androidJvm]val surfaceContainerDarkHighContrast: Color surfaceContainerHighDark [androidJvm]val surfaceContainerHighDark: Color surfaceContainerHighDarkHighContrast [androidJvm]val surfaceContainerHighDarkHighContrast: Color surfaceContainerHighestDark [androidJvm]val surfaceContainerHighestDark: Color surfaceContainerHighestDarkHighContrast [androidJvm]val surfaceContainerHighestDarkHighContrast: Color surfaceContainerHighestLight [androidJvm]val surfaceContainerHighestLight: Color surfaceContainerHighestLightHighContrast [androidJvm]val surfaceContainerHighestLightHighContrast: Color surfaceContainerHighLight [androidJvm]val surfaceContainerHighLight: Color surfaceContainerHighLightHighContrast [androidJvm]val surfaceContainerHighLightHighContrast: Color surfaceContainerLight [androidJvm]val surfaceContainerLight: Color surfaceContainerLightHighContrast [androidJvm]val surfaceContainerLightHighContrast: Color surfaceContainerLowDark [androidJvm]val surfaceContainerLowDark: Color surfaceContainerLowDarkHighContrast [androidJvm]val surfaceContainerLowDarkHighContrast: Color surfaceContainerLowestDark [androidJvm]val surfaceContainerLowestDark: Color surfaceContainerLowestDarkHighContrast [androidJvm]val surfaceContainerLowestDarkHighContrast: Color surfaceContainerLowestLight [androidJvm]val surfaceContainerLowestLight: Color surfaceContainerLowestLightHighContrast [androidJvm]val surfaceContainerLowestLightHighContrast: Color surfaceContainerLowLight [androidJvm]val surfaceContainerLowLight: Color surfaceContainerLowLightHighContrast [androidJvm]val surfaceContainerLowLightHighContrast: Color surfaceDark [androidJvm]val surfaceDark: Color surfaceDarkHighContrast [androidJvm]val surfaceDarkHighContrast: Color surfaceDimDark [androidJvm]val surfaceDimDark: Color surfaceDimDarkHighContrast [androidJvm]val surfaceDimDarkHighContrast: Color surfaceDimLight [androidJvm]val surfaceDimLight: Color surfaceDimLightHighContrast [androidJvm]val surfaceDimLightHighContrast: Color surfaceLight [androidJvm]val surfaceLight: Color surfaceLightHighContrast [androidJvm]val surfaceLightHighContrast: Color surfaceVariantDark [androidJvm]val surfaceVariantDark: Color surfaceVariantDarkHighContrast [androidJvm]val surfaceVariantDarkHighContrast: Color surfaceVariantLight [androidJvm]val surfaceVariantLight: Color surfaceVariantLightHighContrast [androidJvm]val surfaceVariantLightHighContrast: Color tertiaryContainerDark [androidJvm]val tertiaryContainerDark: Color tertiaryContainerDarkHighContrast [androidJvm]val tertiaryContainerDarkHighContrast: Color tertiaryContainerLight [androidJvm]val tertiaryContainerLight: Color tertiaryContainerLightHighContrast [androidJvm]val tertiaryContainerLightHighContrast: Color tertiaryDark [androidJvm]val tertiaryDark: Color tertiaryDarkHighContrast [androidJvm]val tertiaryDarkHighContrast: Color tertiaryLight [androidJvm]val tertiaryLight: Color tertiaryLightHighContrast [androidJvm]val tertiaryLightHighContrast: Color"},{"location":"core/ui/ui/dev.atick.core.ui.theme/#functions","title":"Functions","text":"Name Summary JetpackTheme [androidJvm]@Composablefun JetpackTheme(darkTheme: Boolean = isSystemInDarkTheme(), androidTheme: Boolean = false, disableDynamicTheming: Boolean = false, content: @Composable() -&gt; Unit)Now in Android theme. supportsDynamicTheming [androidJvm]@ChecksSdkIntAtLeast(api = 31)fun supportsDynamicTheming(): Boolean"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-android-background-theme/","title":"dark android background theme","text":"<p>//ui/dev.atick.core.ui.theme/DarkAndroidBackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-android-background-theme/#darkandroidbackgroundtheme","title":"DarkAndroidBackgroundTheme","text":"<p>[androidJvm]\\ val DarkAndroidBackgroundTheme: BackgroundTheme</p> <p>Dark Android background theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-android-gradient-colors/","title":"dark android gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/DarkAndroidGradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-android-gradient-colors/#darkandroidgradientcolors","title":"DarkAndroidGradientColors","text":"<p>[androidJvm]\\ val DarkAndroidGradientColors: GradientColors</p> <p>Dark Android gradient colors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/","title":"jetpack theme","text":"<p>//ui/dev.atick.core.ui.theme/JetpackTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/#jetpacktheme","title":"JetpackTheme","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTheme(darkTheme: Boolean = isSystemInDarkTheme(), androidTheme: Boolean = false, disableDynamicTheming: Boolean = false, content: @Composable() -&gt; Unit)</p> <p>Now in Android theme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkTheme Whether the theme should use a dark color scheme (follows system by default). androidTheme Whether the theme should use the Android theme color scheme instead of the     default theme. disableDynamicTheming If <code>true</code>, disables the use of dynamic theming, even when it is     supported. This parameter has no effect if androidTheme is <code>true</code>."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-android-background-theme/","title":"light android background theme","text":"<p>//ui/dev.atick.core.ui.theme/LightAndroidBackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-android-background-theme/#lightandroidbackgroundtheme","title":"LightAndroidBackgroundTheme","text":"<p>[androidJvm]\\ val LightAndroidBackgroundTheme: BackgroundTheme</p> <p>Light Android background theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-android-gradient-colors/","title":"light android gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/LightAndroidGradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-android-gradient-colors/#lightandroidgradientcolors","title":"LightAndroidGradientColors","text":"<p>[androidJvm]\\ val LightAndroidGradientColors: GradientColors</p> <p>Light Android gradient colors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-background-theme/","title":"local background theme","text":"<p>//ui/dev.atick.core.ui.theme/LocalBackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-background-theme/#localbackgroundtheme","title":"LocalBackgroundTheme","text":"<p>[androidJvm]\\ val LocalBackgroundTheme: ProvidableCompositionLocal&lt;BackgroundTheme&gt;</p> <p>A composition local for BackgroundTheme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-gradient-colors/","title":"local gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/LocalGradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-gradient-colors/#localgradientcolors","title":"LocalGradientColors","text":"<p>[androidJvm]\\ val LocalGradientColors: ProvidableCompositionLocal&lt;GradientColors&gt;</p> <p>A composition local for GradientColors.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-tint-theme/","title":"local tint theme","text":"<p>//ui/dev.atick.core.ui.theme/LocalTintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-tint-theme/#localtinttheme","title":"LocalTintTheme","text":"<p>[androidJvm]\\ val LocalTintTheme: ProvidableCompositionLocal&lt;TintTheme&gt;</p> <p>A composition local for TintTheme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-dark-high-contrast/","title":"Background dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/backgroundDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-dark-high-contrast/#backgrounddarkhighcontrast","title":"backgroundDarkHighContrast","text":"<p>[androidJvm]\\ val backgroundDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-dark/","title":"Background dark","text":"<p>//ui/dev.atick.core.ui.theme/backgroundDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-dark/#backgrounddark","title":"backgroundDark","text":"<p>[androidJvm]\\ val backgroundDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-light-high-contrast/","title":"Background light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/backgroundLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-light-high-contrast/#backgroundlighthighcontrast","title":"backgroundLightHighContrast","text":"<p>[androidJvm]\\ val backgroundLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-light/","title":"Background light","text":"<p>//ui/dev.atick.core.ui.theme/backgroundLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/background-light/#backgroundlight","title":"backgroundLight","text":"<p>[androidJvm]\\ val backgroundLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-dark-high-contrast/","title":"Error container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/errorContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-dark-high-contrast/#errorcontainerdarkhighcontrast","title":"errorContainerDarkHighContrast","text":"<p>[androidJvm]\\ val errorContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-dark/","title":"Error container dark","text":"<p>//ui/dev.atick.core.ui.theme/errorContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-dark/#errorcontainerdark","title":"errorContainerDark","text":"<p>[androidJvm]\\ val errorContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-light-high-contrast/","title":"Error container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/errorContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-light-high-contrast/#errorcontainerlighthighcontrast","title":"errorContainerLightHighContrast","text":"<p>[androidJvm]\\ val errorContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-light/","title":"Error container light","text":"<p>//ui/dev.atick.core.ui.theme/errorContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-container-light/#errorcontainerlight","title":"errorContainerLight","text":"<p>[androidJvm]\\ val errorContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-dark-high-contrast/","title":"Error dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/errorDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-dark-high-contrast/#errordarkhighcontrast","title":"errorDarkHighContrast","text":"<p>[androidJvm]\\ val errorDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-dark/","title":"Error dark","text":"<p>//ui/dev.atick.core.ui.theme/errorDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-dark/#errordark","title":"errorDark","text":"<p>[androidJvm]\\ val errorDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-light-high-contrast/","title":"Error light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/errorLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-light-high-contrast/#errorlighthighcontrast","title":"errorLightHighContrast","text":"<p>[androidJvm]\\ val errorLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-light/","title":"Error light","text":"<p>//ui/dev.atick.core.ui.theme/errorLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/error-light/#errorlight","title":"errorLight","text":"<p>[androidJvm]\\ val errorLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-dark-high-contrast/","title":"Inverse on surface dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/inverseOnSurfaceDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-dark-high-contrast/#inverseonsurfacedarkhighcontrast","title":"inverseOnSurfaceDarkHighContrast","text":"<p>[androidJvm]\\ val inverseOnSurfaceDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-dark/","title":"Inverse on surface dark","text":"<p>//ui/dev.atick.core.ui.theme/inverseOnSurfaceDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-dark/#inverseonsurfacedark","title":"inverseOnSurfaceDark","text":"<p>[androidJvm]\\ val inverseOnSurfaceDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-light-high-contrast/","title":"Inverse on surface light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/inverseOnSurfaceLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-light-high-contrast/#inverseonsurfacelighthighcontrast","title":"inverseOnSurfaceLightHighContrast","text":"<p>[androidJvm]\\ val inverseOnSurfaceLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-light/","title":"Inverse on surface light","text":"<p>//ui/dev.atick.core.ui.theme/inverseOnSurfaceLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-on-surface-light/#inverseonsurfacelight","title":"inverseOnSurfaceLight","text":"<p>[androidJvm]\\ val inverseOnSurfaceLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-dark-high-contrast/","title":"Inverse primary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/inversePrimaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-dark-high-contrast/#inverseprimarydarkhighcontrast","title":"inversePrimaryDarkHighContrast","text":"<p>[androidJvm]\\ val inversePrimaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-dark/","title":"Inverse primary dark","text":"<p>//ui/dev.atick.core.ui.theme/inversePrimaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-dark/#inverseprimarydark","title":"inversePrimaryDark","text":"<p>[androidJvm]\\ val inversePrimaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-light-high-contrast/","title":"Inverse primary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/inversePrimaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-light-high-contrast/#inverseprimarylighthighcontrast","title":"inversePrimaryLightHighContrast","text":"<p>[androidJvm]\\ val inversePrimaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-light/","title":"Inverse primary light","text":"<p>//ui/dev.atick.core.ui.theme/inversePrimaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-primary-light/#inverseprimarylight","title":"inversePrimaryLight","text":"<p>[androidJvm]\\ val inversePrimaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-dark-high-contrast/","title":"Inverse surface dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/inverseSurfaceDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-dark-high-contrast/#inversesurfacedarkhighcontrast","title":"inverseSurfaceDarkHighContrast","text":"<p>[androidJvm]\\ val inverseSurfaceDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-dark/","title":"Inverse surface dark","text":"<p>//ui/dev.atick.core.ui.theme/inverseSurfaceDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-dark/#inversesurfacedark","title":"inverseSurfaceDark","text":"<p>[androidJvm]\\ val inverseSurfaceDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-light-high-contrast/","title":"Inverse surface light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/inverseSurfaceLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-light-high-contrast/#inversesurfacelighthighcontrast","title":"inverseSurfaceLightHighContrast","text":"<p>[androidJvm]\\ val inverseSurfaceLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-light/","title":"Inverse surface light","text":"<p>//ui/dev.atick.core.ui.theme/inverseSurfaceLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/inverse-surface-light/#inversesurfacelight","title":"inverseSurfaceLight","text":"<p>[androidJvm]\\ val inverseSurfaceLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-dark-high-contrast/","title":"On background dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onBackgroundDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-dark-high-contrast/#onbackgrounddarkhighcontrast","title":"onBackgroundDarkHighContrast","text":"<p>[androidJvm]\\ val onBackgroundDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-dark/","title":"On background dark","text":"<p>//ui/dev.atick.core.ui.theme/onBackgroundDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-dark/#onbackgrounddark","title":"onBackgroundDark","text":"<p>[androidJvm]\\ val onBackgroundDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-light-high-contrast/","title":"On background light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onBackgroundLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-light-high-contrast/#onbackgroundlighthighcontrast","title":"onBackgroundLightHighContrast","text":"<p>[androidJvm]\\ val onBackgroundLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-light/","title":"On background light","text":"<p>//ui/dev.atick.core.ui.theme/onBackgroundLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-background-light/#onbackgroundlight","title":"onBackgroundLight","text":"<p>[androidJvm]\\ val onBackgroundLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-dark-high-contrast/","title":"On error container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onErrorContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-dark-high-contrast/#onerrorcontainerdarkhighcontrast","title":"onErrorContainerDarkHighContrast","text":"<p>[androidJvm]\\ val onErrorContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-dark/","title":"On error container dark","text":"<p>//ui/dev.atick.core.ui.theme/onErrorContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-dark/#onerrorcontainerdark","title":"onErrorContainerDark","text":"<p>[androidJvm]\\ val onErrorContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-light-high-contrast/","title":"On error container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onErrorContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-light-high-contrast/#onerrorcontainerlighthighcontrast","title":"onErrorContainerLightHighContrast","text":"<p>[androidJvm]\\ val onErrorContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-light/","title":"On error container light","text":"<p>//ui/dev.atick.core.ui.theme/onErrorContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-container-light/#onerrorcontainerlight","title":"onErrorContainerLight","text":"<p>[androidJvm]\\ val onErrorContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-dark-high-contrast/","title":"On error dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onErrorDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-dark-high-contrast/#onerrordarkhighcontrast","title":"onErrorDarkHighContrast","text":"<p>[androidJvm]\\ val onErrorDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-dark/","title":"On error dark","text":"<p>//ui/dev.atick.core.ui.theme/onErrorDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-dark/#onerrordark","title":"onErrorDark","text":"<p>[androidJvm]\\ val onErrorDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-light-high-contrast/","title":"On error light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onErrorLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-light-high-contrast/#onerrorlighthighcontrast","title":"onErrorLightHighContrast","text":"<p>[androidJvm]\\ val onErrorLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-light/","title":"On error light","text":"<p>//ui/dev.atick.core.ui.theme/onErrorLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-error-light/#onerrorlight","title":"onErrorLight","text":"<p>[androidJvm]\\ val onErrorLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-dark-high-contrast/","title":"On primary container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-dark-high-contrast/#onprimarycontainerdarkhighcontrast","title":"onPrimaryContainerDarkHighContrast","text":"<p>[androidJvm]\\ val onPrimaryContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-dark/","title":"On primary container dark","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-dark/#onprimarycontainerdark","title":"onPrimaryContainerDark","text":"<p>[androidJvm]\\ val onPrimaryContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-light-high-contrast/","title":"On primary container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-light-high-contrast/#onprimarycontainerlighthighcontrast","title":"onPrimaryContainerLightHighContrast","text":"<p>[androidJvm]\\ val onPrimaryContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-light/","title":"On primary container light","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-container-light/#onprimarycontainerlight","title":"onPrimaryContainerLight","text":"<p>[androidJvm]\\ val onPrimaryContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-dark-high-contrast/","title":"On primary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-dark-high-contrast/#onprimarydarkhighcontrast","title":"onPrimaryDarkHighContrast","text":"<p>[androidJvm]\\ val onPrimaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-dark/","title":"On primary dark","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-dark/#onprimarydark","title":"onPrimaryDark","text":"<p>[androidJvm]\\ val onPrimaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-light-high-contrast/","title":"On primary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-light-high-contrast/#onprimarylighthighcontrast","title":"onPrimaryLightHighContrast","text":"<p>[androidJvm]\\ val onPrimaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-light/","title":"On primary light","text":"<p>//ui/dev.atick.core.ui.theme/onPrimaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-primary-light/#onprimarylight","title":"onPrimaryLight","text":"<p>[androidJvm]\\ val onPrimaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-dark-high-contrast/","title":"On secondary container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-dark-high-contrast/#onsecondarycontainerdarkhighcontrast","title":"onSecondaryContainerDarkHighContrast","text":"<p>[androidJvm]\\ val onSecondaryContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-dark/","title":"On secondary container dark","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-dark/#onsecondarycontainerdark","title":"onSecondaryContainerDark","text":"<p>[androidJvm]\\ val onSecondaryContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-light-high-contrast/","title":"On secondary container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-light-high-contrast/#onsecondarycontainerlighthighcontrast","title":"onSecondaryContainerLightHighContrast","text":"<p>[androidJvm]\\ val onSecondaryContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-light/","title":"On secondary container light","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-container-light/#onsecondarycontainerlight","title":"onSecondaryContainerLight","text":"<p>[androidJvm]\\ val onSecondaryContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-dark-high-contrast/","title":"On secondary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-dark-high-contrast/#onsecondarydarkhighcontrast","title":"onSecondaryDarkHighContrast","text":"<p>[androidJvm]\\ val onSecondaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-dark/","title":"On secondary dark","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-dark/#onsecondarydark","title":"onSecondaryDark","text":"<p>[androidJvm]\\ val onSecondaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-light-high-contrast/","title":"On secondary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-light-high-contrast/#onsecondarylighthighcontrast","title":"onSecondaryLightHighContrast","text":"<p>[androidJvm]\\ val onSecondaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-light/","title":"On secondary light","text":"<p>//ui/dev.atick.core.ui.theme/onSecondaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-secondary-light/#onsecondarylight","title":"onSecondaryLight","text":"<p>[androidJvm]\\ val onSecondaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-dark-high-contrast/","title":"On surface dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-dark-high-contrast/#onsurfacedarkhighcontrast","title":"onSurfaceDarkHighContrast","text":"<p>[androidJvm]\\ val onSurfaceDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-dark/","title":"On surface dark","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-dark/#onsurfacedark","title":"onSurfaceDark","text":"<p>[androidJvm]\\ val onSurfaceDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-light-high-contrast/","title":"On surface light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-light-high-contrast/#onsurfacelighthighcontrast","title":"onSurfaceLightHighContrast","text":"<p>[androidJvm]\\ val onSurfaceLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-light/","title":"On surface light","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-light/#onsurfacelight","title":"onSurfaceLight","text":"<p>[androidJvm]\\ val onSurfaceLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-dark-high-contrast/","title":"On surface variant dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceVariantDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-dark-high-contrast/#onsurfacevariantdarkhighcontrast","title":"onSurfaceVariantDarkHighContrast","text":"<p>[androidJvm]\\ val onSurfaceVariantDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-dark/","title":"On surface variant dark","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceVariantDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-dark/#onsurfacevariantdark","title":"onSurfaceVariantDark","text":"<p>[androidJvm]\\ val onSurfaceVariantDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-light-high-contrast/","title":"On surface variant light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceVariantLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-light-high-contrast/#onsurfacevariantlighthighcontrast","title":"onSurfaceVariantLightHighContrast","text":"<p>[androidJvm]\\ val onSurfaceVariantLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-light/","title":"On surface variant light","text":"<p>//ui/dev.atick.core.ui.theme/onSurfaceVariantLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-surface-variant-light/#onsurfacevariantlight","title":"onSurfaceVariantLight","text":"<p>[androidJvm]\\ val onSurfaceVariantLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-dark-high-contrast/","title":"On tertiary container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-dark-high-contrast/#ontertiarycontainerdarkhighcontrast","title":"onTertiaryContainerDarkHighContrast","text":"<p>[androidJvm]\\ val onTertiaryContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-dark/","title":"On tertiary container dark","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-dark/#ontertiarycontainerdark","title":"onTertiaryContainerDark","text":"<p>[androidJvm]\\ val onTertiaryContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-light-high-contrast/","title":"On tertiary container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-light-high-contrast/#ontertiarycontainerlighthighcontrast","title":"onTertiaryContainerLightHighContrast","text":"<p>[androidJvm]\\ val onTertiaryContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-light/","title":"On tertiary container light","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-container-light/#ontertiarycontainerlight","title":"onTertiaryContainerLight","text":"<p>[androidJvm]\\ val onTertiaryContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-dark-high-contrast/","title":"On tertiary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-dark-high-contrast/#ontertiarydarkhighcontrast","title":"onTertiaryDarkHighContrast","text":"<p>[androidJvm]\\ val onTertiaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-dark/","title":"On tertiary dark","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-dark/#ontertiarydark","title":"onTertiaryDark","text":"<p>[androidJvm]\\ val onTertiaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-light-high-contrast/","title":"On tertiary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-light-high-contrast/#ontertiarylighthighcontrast","title":"onTertiaryLightHighContrast","text":"<p>[androidJvm]\\ val onTertiaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-light/","title":"On tertiary light","text":"<p>//ui/dev.atick.core.ui.theme/onTertiaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/on-tertiary-light/#ontertiarylight","title":"onTertiaryLight","text":"<p>[androidJvm]\\ val onTertiaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-dark-high-contrast/","title":"Outline dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/outlineDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-dark-high-contrast/#outlinedarkhighcontrast","title":"outlineDarkHighContrast","text":"<p>[androidJvm]\\ val outlineDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-dark/","title":"Outline dark","text":"<p>//ui/dev.atick.core.ui.theme/outlineDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-dark/#outlinedark","title":"outlineDark","text":"<p>[androidJvm]\\ val outlineDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-light-high-contrast/","title":"Outline light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/outlineLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-light-high-contrast/#outlinelighthighcontrast","title":"outlineLightHighContrast","text":"<p>[androidJvm]\\ val outlineLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-light/","title":"Outline light","text":"<p>//ui/dev.atick.core.ui.theme/outlineLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-light/#outlinelight","title":"outlineLight","text":"<p>[androidJvm]\\ val outlineLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-dark-high-contrast/","title":"Outline variant dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/outlineVariantDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-dark-high-contrast/#outlinevariantdarkhighcontrast","title":"outlineVariantDarkHighContrast","text":"<p>[androidJvm]\\ val outlineVariantDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-dark/","title":"Outline variant dark","text":"<p>//ui/dev.atick.core.ui.theme/outlineVariantDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-dark/#outlinevariantdark","title":"outlineVariantDark","text":"<p>[androidJvm]\\ val outlineVariantDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-light-high-contrast/","title":"Outline variant light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/outlineVariantLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-light-high-contrast/#outlinevariantlighthighcontrast","title":"outlineVariantLightHighContrast","text":"<p>[androidJvm]\\ val outlineVariantLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-light/","title":"Outline variant light","text":"<p>//ui/dev.atick.core.ui.theme/outlineVariantLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/outline-variant-light/#outlinevariantlight","title":"outlineVariantLight","text":"<p>[androidJvm]\\ val outlineVariantLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-dark-high-contrast/","title":"Primary container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/primaryContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-dark-high-contrast/#primarycontainerdarkhighcontrast","title":"primaryContainerDarkHighContrast","text":"<p>[androidJvm]\\ val primaryContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-dark/","title":"Primary container dark","text":"<p>//ui/dev.atick.core.ui.theme/primaryContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-dark/#primarycontainerdark","title":"primaryContainerDark","text":"<p>[androidJvm]\\ val primaryContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-light-high-contrast/","title":"Primary container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/primaryContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-light-high-contrast/#primarycontainerlighthighcontrast","title":"primaryContainerLightHighContrast","text":"<p>[androidJvm]\\ val primaryContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-light/","title":"Primary container light","text":"<p>//ui/dev.atick.core.ui.theme/primaryContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-container-light/#primarycontainerlight","title":"primaryContainerLight","text":"<p>[androidJvm]\\ val primaryContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-dark-high-contrast/","title":"Primary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/primaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-dark-high-contrast/#primarydarkhighcontrast","title":"primaryDarkHighContrast","text":"<p>[androidJvm]\\ val primaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-dark/","title":"Primary dark","text":"<p>//ui/dev.atick.core.ui.theme/primaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-dark/#primarydark","title":"primaryDark","text":"<p>[androidJvm]\\ val primaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-light-high-contrast/","title":"Primary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/primaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-light-high-contrast/#primarylighthighcontrast","title":"primaryLightHighContrast","text":"<p>[androidJvm]\\ val primaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-light/","title":"Primary light","text":"<p>//ui/dev.atick.core.ui.theme/primaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/primary-light/#primarylight","title":"primaryLight","text":"<p>[androidJvm]\\ val primaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-dark-high-contrast/","title":"Scrim dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/scrimDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-dark-high-contrast/#scrimdarkhighcontrast","title":"scrimDarkHighContrast","text":"<p>[androidJvm]\\ val scrimDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-dark/","title":"Scrim dark","text":"<p>//ui/dev.atick.core.ui.theme/scrimDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-dark/#scrimdark","title":"scrimDark","text":"<p>[androidJvm]\\ val scrimDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-light-high-contrast/","title":"Scrim light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/scrimLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-light-high-contrast/#scrimlighthighcontrast","title":"scrimLightHighContrast","text":"<p>[androidJvm]\\ val scrimLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-light/","title":"Scrim light","text":"<p>//ui/dev.atick.core.ui.theme/scrimLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/scrim-light/#scrimlight","title":"scrimLight","text":"<p>[androidJvm]\\ val scrimLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-dark-high-contrast/","title":"Secondary container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/secondaryContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-dark-high-contrast/#secondarycontainerdarkhighcontrast","title":"secondaryContainerDarkHighContrast","text":"<p>[androidJvm]\\ val secondaryContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-dark/","title":"Secondary container dark","text":"<p>//ui/dev.atick.core.ui.theme/secondaryContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-dark/#secondarycontainerdark","title":"secondaryContainerDark","text":"<p>[androidJvm]\\ val secondaryContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-light-high-contrast/","title":"Secondary container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/secondaryContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-light-high-contrast/#secondarycontainerlighthighcontrast","title":"secondaryContainerLightHighContrast","text":"<p>[androidJvm]\\ val secondaryContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-light/","title":"Secondary container light","text":"<p>//ui/dev.atick.core.ui.theme/secondaryContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-container-light/#secondarycontainerlight","title":"secondaryContainerLight","text":"<p>[androidJvm]\\ val secondaryContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-dark-high-contrast/","title":"Secondary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/secondaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-dark-high-contrast/#secondarydarkhighcontrast","title":"secondaryDarkHighContrast","text":"<p>[androidJvm]\\ val secondaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-dark/","title":"Secondary dark","text":"<p>//ui/dev.atick.core.ui.theme/secondaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-dark/#secondarydark","title":"secondaryDark","text":"<p>[androidJvm]\\ val secondaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-light-high-contrast/","title":"Secondary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/secondaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-light-high-contrast/#secondarylighthighcontrast","title":"secondaryLightHighContrast","text":"<p>[androidJvm]\\ val secondaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-light/","title":"Secondary light","text":"<p>//ui/dev.atick.core.ui.theme/secondaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/secondary-light/#secondarylight","title":"secondaryLight","text":"<p>[androidJvm]\\ val secondaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/supports-dynamic-theming/","title":"Supports dynamic theming","text":"<p>//ui/dev.atick.core.ui.theme/supportsDynamicTheming</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/supports-dynamic-theming/#supportsdynamictheming","title":"supportsDynamicTheming","text":"<p>[androidJvm]\\</p> <p>@ChecksSdkIntAtLeast(api = 31)</p> <p>fun supportsDynamicTheming(): Boolean</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-dark-high-contrast/","title":"Surface bright dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceBrightDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-dark-high-contrast/#surfacebrightdarkhighcontrast","title":"surfaceBrightDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceBrightDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-dark/","title":"Surface bright dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceBrightDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-dark/#surfacebrightdark","title":"surfaceBrightDark","text":"<p>[androidJvm]\\ val surfaceBrightDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-light-high-contrast/","title":"Surface bright light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceBrightLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-light-high-contrast/#surfacebrightlighthighcontrast","title":"surfaceBrightLightHighContrast","text":"<p>[androidJvm]\\ val surfaceBrightLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-light/","title":"Surface bright light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceBrightLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-bright-light/#surfacebrightlight","title":"surfaceBrightLight","text":"<p>[androidJvm]\\ val surfaceBrightLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-dark-high-contrast/","title":"Surface container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-dark-high-contrast/#surfacecontainerdarkhighcontrast","title":"surfaceContainerDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-dark/","title":"Surface container dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-dark/#surfacecontainerdark","title":"surfaceContainerDark","text":"<p>[androidJvm]\\ val surfaceContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-dark-high-contrast/","title":"Surface container high dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-dark-high-contrast/#surfacecontainerhighdarkhighcontrast","title":"surfaceContainerHighDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerHighDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-dark/","title":"Surface container high dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-dark/#surfacecontainerhighdark","title":"surfaceContainerHighDark","text":"<p>[androidJvm]\\ val surfaceContainerHighDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-light-high-contrast/","title":"Surface container high light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-light-high-contrast/#surfacecontainerhighlighthighcontrast","title":"surfaceContainerHighLightHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerHighLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-light/","title":"Surface container high light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-high-light/#surfacecontainerhighlight","title":"surfaceContainerHighLight","text":"<p>[androidJvm]\\ val surfaceContainerHighLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-dark-high-contrast/","title":"Surface container highest dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighestDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-dark-high-contrast/#surfacecontainerhighestdarkhighcontrast","title":"surfaceContainerHighestDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerHighestDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-dark/","title":"Surface container highest dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighestDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-dark/#surfacecontainerhighestdark","title":"surfaceContainerHighestDark","text":"<p>[androidJvm]\\ val surfaceContainerHighestDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-light-high-contrast/","title":"Surface container highest light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighestLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-light-high-contrast/#surfacecontainerhighestlighthighcontrast","title":"surfaceContainerHighestLightHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerHighestLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-light/","title":"Surface container highest light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerHighestLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-highest-light/#surfacecontainerhighestlight","title":"surfaceContainerHighestLight","text":"<p>[androidJvm]\\ val surfaceContainerHighestLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-light-high-contrast/","title":"Surface container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-light-high-contrast/#surfacecontainerlighthighcontrast","title":"surfaceContainerLightHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-light/","title":"Surface container light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-light/#surfacecontainerlight","title":"surfaceContainerLight","text":"<p>[androidJvm]\\ val surfaceContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-dark-high-contrast/","title":"Surface container low dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-dark-high-contrast/#surfacecontainerlowdarkhighcontrast","title":"surfaceContainerLowDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerLowDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-dark/","title":"Surface container low dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-dark/#surfacecontainerlowdark","title":"surfaceContainerLowDark","text":"<p>[androidJvm]\\ val surfaceContainerLowDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-light-high-contrast/","title":"Surface container low light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-light-high-contrast/#surfacecontainerlowlighthighcontrast","title":"surfaceContainerLowLightHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerLowLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-light/","title":"Surface container low light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-low-light/#surfacecontainerlowlight","title":"surfaceContainerLowLight","text":"<p>[androidJvm]\\ val surfaceContainerLowLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-dark-high-contrast/","title":"Surface container lowest dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowestDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-dark-high-contrast/#surfacecontainerlowestdarkhighcontrast","title":"surfaceContainerLowestDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerLowestDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-dark/","title":"Surface container lowest dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowestDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-dark/#surfacecontainerlowestdark","title":"surfaceContainerLowestDark","text":"<p>[androidJvm]\\ val surfaceContainerLowestDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-light-high-contrast/","title":"Surface container lowest light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowestLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-light-high-contrast/#surfacecontainerlowestlighthighcontrast","title":"surfaceContainerLowestLightHighContrast","text":"<p>[androidJvm]\\ val surfaceContainerLowestLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-light/","title":"Surface container lowest light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceContainerLowestLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-container-lowest-light/#surfacecontainerlowestlight","title":"surfaceContainerLowestLight","text":"<p>[androidJvm]\\ val surfaceContainerLowestLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dark-high-contrast/","title":"Surface dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dark-high-contrast/#surfacedarkhighcontrast","title":"surfaceDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dark/","title":"Surface dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dark/#surfacedark","title":"surfaceDark","text":"<p>[androidJvm]\\ val surfaceDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-dark-high-contrast/","title":"Surface dim dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceDimDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-dark-high-contrast/#surfacedimdarkhighcontrast","title":"surfaceDimDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceDimDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-dark/","title":"Surface dim dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceDimDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-dark/#surfacedimdark","title":"surfaceDimDark","text":"<p>[androidJvm]\\ val surfaceDimDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-light-high-contrast/","title":"Surface dim light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceDimLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-light-high-contrast/#surfacedimlighthighcontrast","title":"surfaceDimLightHighContrast","text":"<p>[androidJvm]\\ val surfaceDimLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-light/","title":"Surface dim light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceDimLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-dim-light/#surfacedimlight","title":"surfaceDimLight","text":"<p>[androidJvm]\\ val surfaceDimLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-light-high-contrast/","title":"Surface light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-light-high-contrast/#surfacelighthighcontrast","title":"surfaceLightHighContrast","text":"<p>[androidJvm]\\ val surfaceLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-light/","title":"Surface light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-light/#surfacelight","title":"surfaceLight","text":"<p>[androidJvm]\\ val surfaceLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-dark-high-contrast/","title":"Surface variant dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceVariantDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-dark-high-contrast/#surfacevariantdarkhighcontrast","title":"surfaceVariantDarkHighContrast","text":"<p>[androidJvm]\\ val surfaceVariantDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-dark/","title":"Surface variant dark","text":"<p>//ui/dev.atick.core.ui.theme/surfaceVariantDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-dark/#surfacevariantdark","title":"surfaceVariantDark","text":"<p>[androidJvm]\\ val surfaceVariantDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-light-high-contrast/","title":"Surface variant light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/surfaceVariantLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-light-high-contrast/#surfacevariantlighthighcontrast","title":"surfaceVariantLightHighContrast","text":"<p>[androidJvm]\\ val surfaceVariantLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-light/","title":"Surface variant light","text":"<p>//ui/dev.atick.core.ui.theme/surfaceVariantLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/surface-variant-light/#surfacevariantlight","title":"surfaceVariantLight","text":"<p>[androidJvm]\\ val surfaceVariantLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-dark-high-contrast/","title":"Tertiary container dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryContainerDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-dark-high-contrast/#tertiarycontainerdarkhighcontrast","title":"tertiaryContainerDarkHighContrast","text":"<p>[androidJvm]\\ val tertiaryContainerDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-dark/","title":"Tertiary container dark","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryContainerDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-dark/#tertiarycontainerdark","title":"tertiaryContainerDark","text":"<p>[androidJvm]\\ val tertiaryContainerDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-light-high-contrast/","title":"Tertiary container light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryContainerLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-light-high-contrast/#tertiarycontainerlighthighcontrast","title":"tertiaryContainerLightHighContrast","text":"<p>[androidJvm]\\ val tertiaryContainerLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-light/","title":"Tertiary container light","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryContainerLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-container-light/#tertiarycontainerlight","title":"tertiaryContainerLight","text":"<p>[androidJvm]\\ val tertiaryContainerLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-dark-high-contrast/","title":"Tertiary dark high contrast","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryDarkHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-dark-high-contrast/#tertiarydarkhighcontrast","title":"tertiaryDarkHighContrast","text":"<p>[androidJvm]\\ val tertiaryDarkHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-dark/","title":"Tertiary dark","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryDark</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-dark/#tertiarydark","title":"tertiaryDark","text":"<p>[androidJvm]\\ val tertiaryDark: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-light-high-contrast/","title":"Tertiary light high contrast","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryLightHighContrast</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-light-high-contrast/#tertiarylighthighcontrast","title":"tertiaryLightHighContrast","text":"<p>[androidJvm]\\ val tertiaryLightHighContrast: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-light/","title":"Tertiary light","text":"<p>//ui/dev.atick.core.ui.theme/tertiaryLight</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/tertiary-light/#tertiarylight","title":"tertiaryLight","text":"<p>[androidJvm]\\ val tertiaryLight: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#backgroundtheme","title":"BackgroundTheme","text":"<p>[androidJvm]\\ @Immutable</p> <p>data class BackgroundTheme(val color: Color = Color.Unspecified, val tonalElevation: Dp = Dp.Unspecified)</p> <p>A class to model background color and tonal elevation values for Now in Android.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#constructors","title":"Constructors","text":"BackgroundTheme [androidJvm]constructor(color: Color = Color.Unspecified, tonalElevation: Dp = Dp.Unspecified)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#properties","title":"Properties","text":"Name Summary color [androidJvm]val color: Color tonalElevation [androidJvm]val tonalElevation: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/","title":"background theme","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/BackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/#backgroundtheme","title":"BackgroundTheme","text":"<p>[androidJvm]\\ constructor(color: Color = Color.Unspecified, tonalElevation: Dp = Dp.Unspecified)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/","title":"Color","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/#color","title":"color","text":"<p>[androidJvm]\\ val color: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/","title":"Tonal elevation","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/tonalElevation</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/#tonalelevation","title":"tonalElevation","text":"<p>[androidJvm]\\ val tonalElevation: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#gradientcolors","title":"GradientColors","text":"<p>@Immutable</p> <p>data class GradientColors(val top: Color = Color.Unspecified, val bottom: Color = Color.Unspecified, val container: Color = Color.Unspecified)</p> <p>A class to model gradient color values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered. bottom The bottom gradient color to be rendered. container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#constructors","title":"Constructors","text":"GradientColors [androidJvm]constructor(top: Color = Color.Unspecified, bottom: Color = Color.Unspecified, container: Color = Color.Unspecified)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#properties","title":"Properties","text":"Name Summary bottom [androidJvm]val bottom: Color container [androidJvm]val container: Color top [androidJvm]val top: Color"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/","title":"gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/GradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/#gradientcolors","title":"GradientColors","text":"<p>[androidJvm]\\ constructor(top: Color = Color.Unspecified, bottom: Color = Color.Unspecified, container: Color = Color.Unspecified)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered. bottom The bottom gradient color to be rendered. container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/","title":"Bottom","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/bottom</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/#bottom","title":"bottom","text":"<p>[androidJvm]\\ val bottom: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/#parameters","title":"Parameters","text":"<p>androidJvm</p> bottom The bottom gradient color to be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/","title":"Container","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/container</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/#container","title":"container","text":"<p>[androidJvm]\\ val container: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/#parameters","title":"Parameters","text":"<p>androidJvm</p> container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/","title":"Top","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/top</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/#top","title":"top","text":"<p>[androidJvm]\\ val top: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#tinttheme","title":"TintTheme","text":"<p>[androidJvm]\\ @Immutable</p> <p>data class TintTheme(val iconTint: Color? = null)</p> <p>A class to model background color and tonal elevation values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#constructors","title":"Constructors","text":"TintTheme [androidJvm]constructor(iconTint: Color? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#properties","title":"Properties","text":"Name Summary iconTint [androidJvm]val iconTint: Color? = null"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/","title":"tint theme","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme/TintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/#tinttheme","title":"TintTheme","text":"<p>[androidJvm]\\ constructor(iconTint: Color? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/","title":"Icon tint","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme/iconTint</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/#icontint","title":"iconTint","text":"<p>[androidJvm]\\ val iconTint: Color? = null</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.utils/#types","title":"Types","text":"Name Summary DevicePreviews [androidJvm]@Preview(name = \"phone\", device = \"spec:width=360dp,height=640dp,dpi=480\")@Preview(name = \"landscape\", device = \"spec:width=640dp,height=360dp,dpi=480\")@Preview(name = \"foldable\", device = \"spec:width=673dp,height=841dp,dpi=480\")@Preview(name = \"tablet\", device = \"spec:width=1280dp,height=800dp,dpi=480\")annotation class DevicePreviewsMultipreview annotation that represents various device sizes. Add this annotation to a composable to render various devices. OneTimeEvent [androidJvm]class OneTimeEvent&lt;T&gt;(content: T) TakePictureActivityContract [androidJvm]class TakePictureActivityContract : ActivityResultContract&lt;Uri, Pair&lt;Boolean, Uri&gt;&gt; Contract for taking picture. TextFieldData [androidJvm]data class TextFieldData(val value: String, val errorMessage: String? = null) UiState [androidJvm]data class UiState&lt;T : Any&gt;(val data: T, val loading: Boolean = false, val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null)) UiText [androidJvm]sealed class UiTextA sealed class that represents a string that can be either a string resource or a dynamic string."},{"location":"core/ui/ui/dev.atick.core.ui.utils/#functions","title":"Functions","text":"Name Summary setLanguagePreference [androidJvm]fun setLanguagePreference(languageCode: String)Sets the locale for the application based on the user's preferred language. StatefulComposable [androidJvm]@Composablefun &lt;T : Any&gt; StatefulComposable(state: UiState&lt;T&gt;, onShowSnackbar: suspend (String, String?) -&gt; Boolean, content: @Composable(T) -&gt; Unit) updateState [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateState(update: T.() -&gt; T) updateStateWith [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateStateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;T&gt;) updateWith [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;Unit&gt;)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/","title":"stateful composable","text":"<p>//ui/dev.atick.core.ui.utils/StatefulComposable</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/#statefulcomposable","title":"StatefulComposable","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun &lt;T : Any&gt; StatefulComposable(state: UiState&lt;T&gt;, onShowSnackbar: suspend (String, String?) -&gt; Boolean, content: @Composable(T) -&gt; Unit)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/set-language-preference/","title":"Set language preference","text":"<p>//ui/dev.atick.core.ui.utils/setLanguagePreference</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/set-language-preference/#setlanguagepreference","title":"setLanguagePreference","text":"<p>[androidJvm]\\ fun setLanguagePreference(languageCode: String)</p> <p>Sets the locale for the application based on the user's preferred language.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/set-language-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> languageCode The language code to set the application locale to."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/","title":"Update state with","text":"<p>//ui/dev.atick.core.ui.utils/updateStateWith</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/#updatestatewith","title":"updateStateWith","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateStateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;T&gt;)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/","title":"Update state","text":"<p>//ui/dev.atick.core.ui.utils/updateState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/#updatestate","title":"updateState","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateState(update: T.() -&gt; T)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/","title":"Update with","text":"<p>//ui/dev.atick.core.ui.utils/updateWith</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/#updatewith","title":"updateWith","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;Unit&gt;)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-device-previews/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/DevicePreviews</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-device-previews/#devicepreviews","title":"DevicePreviews","text":"<p>[androidJvm]\\ @Preview(name = \"phone\", device = \"spec:width=360dp,height=640dp,dpi=480\")</p> <p>@Preview(name = \"landscape\", device = \"spec:width=640dp,height=360dp,dpi=480\")</p> <p>@Preview(name = \"foldable\", device = \"spec:width=673dp,height=841dp,dpi=480\")</p> <p>@Preview(name = \"tablet\", device = \"spec:width=1280dp,height=800dp,dpi=480\")</p> <p>annotation class DevicePreviews</p> <p>Multipreview annotation that represents various device sizes. Add this annotation to a composable to render various devices.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/OneTimeEvent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/#onetimeevent","title":"OneTimeEvent","text":"<p>[androidJvm]\\ class OneTimeEvent&lt;T&gt;(content: T)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/#constructors","title":"Constructors","text":"OneTimeEvent [androidJvm]constructor(content: T)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/#functions","title":"Functions","text":"Name Summary getContentIfNotHandled [androidJvm]fun getContentIfNotHandled(): T? peekContent [androidJvm]fun peekContent(): T"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/-one-time-event/","title":"one time event","text":"<p>//ui/dev.atick.core.ui.utils/OneTimeEvent/OneTimeEvent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/-one-time-event/#onetimeevent","title":"OneTimeEvent","text":"<p>[androidJvm]\\ constructor(content: T)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/get-content-if-not-handled/","title":"Get content if not handled","text":"<p>//ui/dev.atick.core.ui.utils/OneTimeEvent/getContentIfNotHandled</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/get-content-if-not-handled/#getcontentifnothandled","title":"getContentIfNotHandled","text":"<p>[androidJvm]\\ fun getContentIfNotHandled(): T?</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/peek-content/","title":"Peek content","text":"<p>//ui/dev.atick.core.ui.utils/OneTimeEvent/peekContent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-one-time-event/peek-content/#peekcontent","title":"peekContent","text":"<p>[androidJvm]\\ fun peekContent(): T</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#takepictureactivitycontract","title":"TakePictureActivityContract","text":"<p>[androidJvm]\\ class TakePictureActivityContract : ActivityResultContract&lt;Uri, Pair&lt;Boolean, Uri&gt;&gt; </p> <p>Contract for taking picture.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#constructors","title":"Constructors","text":"TakePictureActivityContract [androidJvm]constructor()"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#functions","title":"Functions","text":"Name Summary createIntent [androidJvm]@CallSuperopen override fun createIntent(context: Context, input: Uri): IntentCreate an intent for taking picture. getSynchronousResult [androidJvm]open override fun getSynchronousResult(context: Context, input: Uri): ActivityResultContract.SynchronousResult&lt;Pair&lt;Boolean, Uri&gt;&gt;?Get the synchronous result. parseResult [androidJvm]open override fun parseResult(resultCode: Int, intent: Intent?): Pair&lt;Boolean, Uri&gt;Parse the result."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/-take-picture-activity-contract/","title":"take picture activity contract","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/TakePictureActivityContract</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/-take-picture-activity-contract/#takepictureactivitycontract","title":"TakePictureActivityContract","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/","title":"Create intent","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/createIntent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#createintent","title":"createIntent","text":"<p>[androidJvm]\\</p> <p>@CallSuper</p> <p>open override fun createIntent(context: Context, input: Uri): Intent</p> <p>Create an intent for taking picture.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#return","title":"Return","text":"<p>The intent.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The context. input The input."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/","title":"Get synchronous result","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/getSynchronousResult</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#getsynchronousresult","title":"getSynchronousResult","text":"<p>[androidJvm]\\ open override fun getSynchronousResult(context: Context, input: Uri): ActivityResultContract.SynchronousResult&lt;Pair&lt;Boolean, Uri&gt;&gt;?</p> <p>Get the synchronous result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#return","title":"Return","text":"<p>The synchronous result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The context. input The input."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/","title":"Parse result","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/parseResult</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#parseresult","title":"parseResult","text":"<p>[androidJvm]\\ open override fun parseResult(resultCode: Int, intent: Intent?): Pair&lt;Boolean, Uri&gt;</p> <p>Parse the result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#return","title":"Return","text":"<p>The result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#parameters","title":"Parameters","text":"<p>androidJvm</p> resultCode The result code. intent The intent."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/TextFieldData</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/#textfielddata","title":"TextFieldData","text":"<p>[androidJvm]\\ data class TextFieldData(val value: String, val errorMessage: String? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/#constructors","title":"Constructors","text":"TextFieldData [androidJvm]constructor(value: String, errorMessage: String? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/#properties","title":"Properties","text":"Name Summary errorMessage [androidJvm]val errorMessage: String? = null value [androidJvm]val value: String"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/-text-field-data/","title":"text field data","text":"<p>//ui/dev.atick.core.ui.utils/TextFieldData/TextFieldData</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/-text-field-data/#textfielddata","title":"TextFieldData","text":"<p>[androidJvm]\\ constructor(value: String, errorMessage: String? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/error-message/","title":"Error message","text":"<p>//ui/dev.atick.core.ui.utils/TextFieldData/errorMessage</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/error-message/#errormessage","title":"errorMessage","text":"<p>[androidJvm]\\ val errorMessage: String? = null</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/value/","title":"Value","text":"<p>//ui/dev.atick.core.ui.utils/TextFieldData/value</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-field-data/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: String</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#uistate","title":"UiState","text":"<p>[androidJvm]\\ data class UiState&lt;T : Any&gt;(val data: T, val loading: Boolean = false, val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#constructors","title":"Constructors","text":"UiState [androidJvm]constructor(data: T, loading: Boolean = false, error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T error [androidJvm]val error: OneTimeEvent&lt;Throwable?&gt; loading [androidJvm]val loading: Boolean = false"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/","title":"ui state","text":"<p>//ui/dev.atick.core.ui.utils/UiState/UiState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/#uistate","title":"UiState","text":"<p>[androidJvm]\\ constructor(data: T, loading: Boolean = false, error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/data/","title":"Data","text":"<p>//ui/dev.atick.core.ui.utils/UiState/data</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/data/#data","title":"data","text":"<p>[androidJvm]\\ val data: T</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/error/","title":"Error","text":"<p>//ui/dev.atick.core.ui.utils/UiState/error</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/error/#error","title":"error","text":"<p>[androidJvm]\\ val error: OneTimeEvent&lt;Throwable?&gt;</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/loading/","title":"Loading","text":"<p>//ui/dev.atick.core.ui.utils/UiState/loading</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/loading/#loading","title":"loading","text":"<p>[androidJvm]\\ val loading: Boolean = false</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#uitext","title":"UiText","text":"<p>sealed class UiText</p> <p>A sealed class that represents a string that can be either a string resource or a dynamic string.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#inheritors","title":"Inheritors","text":"DynamicString StringResource"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#types","title":"Types","text":"Name Summary DynamicString [androidJvm]data class DynamicString(val value: String) : UiTextA dynamic string that can be used to represent a string that is not known at compile time. StringResource [androidJvm]class StringResource(@StringResval resId: Int, val args: Any) : UiTextA string resource that can be used to represent a string that is known at compile time."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/as-string/","title":"As string","text":"<p>//ui/dev.atick.core.ui.utils/UiText/asString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/as-string/#asstring","title":"asString","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun asString(): String</p> <p>fun asString(context: Context): String</p> <p>Returns the string value of this UiText.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#dynamicstring","title":"DynamicString","text":"<p>data class DynamicString(val value: String) : UiText</p> <p>A dynamic string that can be used to represent a string that is not known at compile time.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#constructors","title":"Constructors","text":"DynamicString [androidJvm]constructor(value: String)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#properties","title":"Properties","text":"Name Summary value [androidJvm]val value: String"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/","title":"dynamic string","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString/DynamicString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/#dynamicstring","title":"DynamicString","text":"<p>[androidJvm]\\ constructor(value: String)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/","title":"Value","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString/value</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: String</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#stringresource","title":"StringResource","text":"<p>class StringResource(@StringResval resId: Int, val args: Any) : UiText</p> <p>A string resource that can be used to represent a string that is known at compile time.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id. args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#constructors","title":"Constructors","text":"StringResource [androidJvm]constructor(@StringResresId: Int, vararg args: Any)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#properties","title":"Properties","text":"Name Summary args [androidJvm]val args: Array&lt;out Any&gt; resId [androidJvm]val resId: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/","title":"string resource","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/StringResource</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/#stringresource","title":"StringResource","text":"<p>[androidJvm]\\ constructor(@StringResresId: Int, vararg args: Any)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id. args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/","title":"Args","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/args</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/#args","title":"args","text":"<p>[androidJvm]\\ val args: Array&lt;out Any&gt;</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/#parameters","title":"Parameters","text":"<p>androidJvm</p> args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/","title":"Res id","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/resId</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/#resid","title":"resId","text":"<p>[androidJvm]\\ val resId: Int</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id."},{"location":"gemini/","title":"Index","text":"<p>//gemini</p>"},{"location":"gemini/#gemini","title":"gemini","text":""},{"location":"gemini/#packages","title":"Packages","text":"Name dev.atick.gemini.data dev.atick.gemini.di dev.atick.gemini.models dev.atick.gemini.utils"},{"location":"gemini/gemini/dev.atick.gemini.data/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"gemini/gemini/dev.atick.gemini.data/#types","title":"Types","text":"Name Summary GeminiDataSource [androidJvm]interface GeminiDataSourceInterface representing a data source for the Gemini AI. GeminiDataSourceImpl [androidJvm]class GeminiDataSourceImpl@Injectconstructor(chatModel: GenerativeModel, expensesModel: GenerativeModel, ioDispatcher: CoroutineDispatcher) : GeminiDataSourceImplementation of GeminiDataSource that uses the provided GenerativeModels to interact with the Gemini AI. GeminiException [androidJvm]sealed class GeminiException : ExceptionA sealed class that represents the exceptions that can occur during a Gemini AI operation. GeminiRateLimiter [androidJvm]interface GeminiRateLimiterInterface representing a rate limiter for the Gemini API. GeminiRateLimiterImpl [androidJvm]class GeminiRateLimiterImpl@Injectconstructor : GeminiRateLimiterImplementation of GeminiRateLimiter that uses a sliding window algorithm to rate limit requests."},{"location":"gemini/gemini/dev.atick.gemini.data/#functions","title":"Functions","text":"Name Summary toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/to-gemini-exception/","title":"To gemini exception","text":"<p>//gemini/dev.atick.gemini.data/toGeminiException</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/to-gemini-exception/#togeminiexception","title":"toGeminiException","text":"<p>[androidJvm]\\ fun Throwable.toGeminiException(): GeminiException</p> <p>Converts a throwable to a Gemini exception.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/to-gemini-exception/#return","title":"Return","text":"<p>The Gemini exception.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSource</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/#geminidatasource","title":"GeminiDataSource","text":"<p>interface GeminiDataSource</p> <p>Interface representing a data source for the Gemini AI.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/#inheritors","title":"Inheritors","text":"GeminiDataSourceImpl"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/#functions","title":"Functions","text":"Name Summary getExpenseFromSMS [androidJvm]abstract suspend fun getExpenseFromSMS(aiSMS: AiSMS): AiExpenseGets an expense from the given SMS. initializeChat [androidJvm]abstract suspend fun initializeChat(messages: List&lt;AiChatMessage&gt;, context: String)Initializes the chat with the given messages and context. sendChatMessage [androidJvm]abstract suspend fun sendChatMessage(message: String): StringSends a chat message to the AI."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/get-expense-from-s-m-s/","title":"Get expense from s m s","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSource/getExpenseFromSMS</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/get-expense-from-s-m-s/#getexpensefromsms","title":"getExpenseFromSMS","text":"<p>[androidJvm]\\ abstract suspend fun getExpenseFromSMS(aiSMS: AiSMS): AiExpense</p> <p>Gets an expense from the given SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/get-expense-from-s-m-s/#return","title":"Return","text":"<p>The expense from the SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/get-expense-from-s-m-s/#parameters","title":"Parameters","text":"<p>androidJvm</p> aiSMS The SMS to get the expense from."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/initialize-chat/","title":"Initialize chat","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSource/initializeChat</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/initialize-chat/#initializechat","title":"initializeChat","text":"<p>[androidJvm]\\ abstract suspend fun initializeChat(messages: List&lt;AiChatMessage&gt;, context: String)</p> <p>Initializes the chat with the given messages and context.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/initialize-chat/#parameters","title":"Parameters","text":"<p>androidJvm</p> messages The list of messages to initialize the chat with. context The context to initialize the chat with."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/send-chat-message/","title":"Send chat message","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSource/sendChatMessage</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/send-chat-message/#sendchatmessage","title":"sendChatMessage","text":"<p>[androidJvm]\\ abstract suspend fun sendChatMessage(message: String): String</p> <p>Sends a chat message to the AI.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/send-chat-message/#return","title":"Return","text":"<p>The response from the AI.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source/send-chat-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to send."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSourceImpl</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/#geminidatasourceimpl","title":"GeminiDataSourceImpl","text":"<p>class GeminiDataSourceImpl@Injectconstructor(chatModel: GenerativeModel, expensesModel: GenerativeModel, ioDispatcher: CoroutineDispatcher) : GeminiDataSource</p> <p>Implementation of GeminiDataSource that uses the provided GenerativeModels to interact with the Gemini AI.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatModel The chat model to use. expensesModel The expenses model to use. ioDispatcher The CoroutineDispatcher to use for IO operations."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/#constructors","title":"Constructors","text":"GeminiDataSourceImpl [androidJvm]@Injectconstructor(chatModel: GenerativeModel, expensesModel: GenerativeModel, ioDispatcher: CoroutineDispatcher)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/#functions","title":"Functions","text":"Name Summary getExpenseFromSMS [androidJvm]open suspend override fun getExpenseFromSMS(aiSMS: AiSMS): AiExpenseGets an expense from the given SMS. initializeChat [androidJvm]open suspend override fun initializeChat(messages: List&lt;AiChatMessage&gt;, context: String)Initializes the chat with the given messages and context. sendChatMessage [androidJvm]open suspend override fun sendChatMessage(message: String): StringSends a chat message to the AI."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/-gemini-data-source-impl/","title":"gemini data source impl","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSourceImpl/GeminiDataSourceImpl</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/-gemini-data-source-impl/#geminidatasourceimpl","title":"GeminiDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(chatModel: GenerativeModel, expensesModel: GenerativeModel, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/-gemini-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatModel The chat model to use. expensesModel The expenses model to use. ioDispatcher The CoroutineDispatcher to use for IO operations."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/get-expense-from-s-m-s/","title":"Get expense from s m s","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSourceImpl/getExpenseFromSMS</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/get-expense-from-s-m-s/#getexpensefromsms","title":"getExpenseFromSMS","text":"<p>[androidJvm]\\ open suspend override fun getExpenseFromSMS(aiSMS: AiSMS): AiExpense</p> <p>Gets an expense from the given SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/get-expense-from-s-m-s/#return","title":"Return","text":"<p>The expense from the SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/get-expense-from-s-m-s/#parameters","title":"Parameters","text":"<p>androidJvm</p> aiSMS The SMS to get the expense from."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/initialize-chat/","title":"Initialize chat","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSourceImpl/initializeChat</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/initialize-chat/#initializechat","title":"initializeChat","text":"<p>[androidJvm]\\ open suspend override fun initializeChat(messages: List&lt;AiChatMessage&gt;, context: String)</p> <p>Initializes the chat with the given messages and context.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/initialize-chat/#parameters","title":"Parameters","text":"<p>androidJvm</p> messages The list of messages to initialize the chat with. context The context to initialize the chat with."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/send-chat-message/","title":"Send chat message","text":"<p>//gemini/dev.atick.gemini.data/GeminiDataSourceImpl/sendChatMessage</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/send-chat-message/#sendchatmessage","title":"sendChatMessage","text":"<p>[androidJvm]\\ open suspend override fun sendChatMessage(message: String): String</p> <p>Sends a chat message to the AI.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/send-chat-message/#return","title":"Return","text":"<p>The response from the AI.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-data-source-impl/send-chat-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to send."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/#geminiexception","title":"GeminiException","text":"<p>sealed class GeminiException : Exception</p> <p>A sealed class that represents the exceptions that can occur during a Gemini AI operation.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/#inheritors","title":"Inheritors","text":"Serialization Server InvalidAPIKey PromptBlocked UnsupportedUserLocation InvalidState ResponseStopped RequestTimeout QuotaExceeded Unknown"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/#types","title":"Types","text":"Name Summary InvalidAPIKey [androidJvm]class InvalidAPIKey(message: String) : GeminiExceptionRepresents an exception that occurs due to an invalid API key. InvalidState [androidJvm]class InvalidState(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs due to an invalid state. PromptBlocked [androidJvm]class PromptBlocked(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs when a prompt is blocked. QuotaExceeded [androidJvm]class QuotaExceeded(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs when the quota is exceeded. RequestTimeout [androidJvm]class RequestTimeout(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs when the request times out. ResponseStopped [androidJvm]class ResponseStopped(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs when the response is stopped. Serialization [androidJvm]class Serialization(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs during serialization. Server [androidJvm]class Server(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs on the server. Unknown [androidJvm]class Unknown(message: String, cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs when the error is unknown. UnsupportedUserLocation [androidJvm]class UnsupportedUserLocation(cause: Throwable? = null) : GeminiExceptionRepresents an exception that occurs when the user location is unsupported."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/InvalidAPIKey</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/#invalidapikey","title":"InvalidAPIKey","text":"<p>class InvalidAPIKey(message: String) : GeminiException</p> <p>Represents an exception that occurs due to an invalid API key.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/#constructors","title":"Constructors","text":"InvalidAPIKey [androidJvm]constructor(message: String)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/-invalid-a-p-i-key/","title":"invalid a p i key","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/InvalidAPIKey/InvalidAPIKey</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/-invalid-a-p-i-key/#invalidapikey","title":"InvalidAPIKey","text":"<p>[androidJvm]\\ constructor(message: String)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-a-p-i-key/-invalid-a-p-i-key/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/InvalidState</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/#invalidstate","title":"InvalidState","text":"<p>class InvalidState(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs due to an invalid state.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/#constructors","title":"Constructors","text":"InvalidState [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/-invalid-state/","title":"invalid state","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/InvalidState/InvalidState</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/-invalid-state/#invalidstate","title":"InvalidState","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-invalid-state/-invalid-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/PromptBlocked</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/#promptblocked","title":"PromptBlocked","text":"<p>class PromptBlocked(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs when a prompt is blocked.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/#constructors","title":"Constructors","text":"PromptBlocked [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/-prompt-blocked/","title":"prompt blocked","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/PromptBlocked/PromptBlocked</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/-prompt-blocked/#promptblocked","title":"PromptBlocked","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-prompt-blocked/-prompt-blocked/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/QuotaExceeded</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/#quotaexceeded","title":"QuotaExceeded","text":"<p>class QuotaExceeded(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs when the quota is exceeded.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/#constructors","title":"Constructors","text":"QuotaExceeded [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/-quota-exceeded/","title":"quota exceeded","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/QuotaExceeded/QuotaExceeded</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/-quota-exceeded/#quotaexceeded","title":"QuotaExceeded","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-quota-exceeded/-quota-exceeded/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/RequestTimeout</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/#requesttimeout","title":"RequestTimeout","text":"<p>class RequestTimeout(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs when the request times out.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/#constructors","title":"Constructors","text":"RequestTimeout [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/-request-timeout/","title":"request timeout","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/RequestTimeout/RequestTimeout</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/-request-timeout/#requesttimeout","title":"RequestTimeout","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-request-timeout/-request-timeout/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/ResponseStopped</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/#responsestopped","title":"ResponseStopped","text":"<p>class ResponseStopped(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs when the response is stopped.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/#constructors","title":"Constructors","text":"ResponseStopped [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/-response-stopped/","title":"response stopped","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/ResponseStopped/ResponseStopped</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/-response-stopped/#responsestopped","title":"ResponseStopped","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-response-stopped/-response-stopped/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/Serialization</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/#serialization","title":"Serialization","text":"<p>class Serialization(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs during serialization.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/#constructors","title":"Constructors","text":"Serialization [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/-serialization/","title":"serialization","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/Serialization/Serialization</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/-serialization/#serialization","title":"Serialization","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-serialization/-serialization/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/Server</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/#server","title":"Server","text":"<p>class Server(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs on the server.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/#constructors","title":"Constructors","text":"Server [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/-server/","title":"server","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/Server/Server</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/-server/#server","title":"Server","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-server/-server/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/Unknown</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/#unknown","title":"Unknown","text":"<p>class Unknown(message: String, cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs when the error is unknown.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/#constructors","title":"Constructors","text":"Unknown [androidJvm]constructor(message: String, cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/-unknown/","title":"unknown","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/Unknown/Unknown</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/-unknown/#unknown","title":"Unknown","text":"<p>[androidJvm]\\ constructor(message: String, cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unknown/-unknown/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display for the exception. cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/UnsupportedUserLocation</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/#unsupporteduserlocation","title":"UnsupportedUserLocation","text":"<p>class UnsupportedUserLocation(cause: Throwable? = null) : GeminiException</p> <p>Represents an exception that occurs when the user location is unsupported.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/#parameters","title":"Parameters","text":"<p>androidJvm</p> cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/#constructors","title":"Constructors","text":"UnsupportedUserLocation [androidJvm]constructor(cause: Throwable? = null)"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/#properties","title":"Properties","text":"Name Summary cause [androidJvm]open val cause: Throwable? message [androidJvm]open val message: String?"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/#functions","title":"Functions","text":"Name Summary addSuppressed [androidJvm]fun addSuppressed(p0: Throwable) fillInStackTrace [androidJvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [androidJvm]open fun getLocalizedMessage(): String getStackTrace [androidJvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [androidJvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [androidJvm]open fun initCause(p0: Throwable): Throwable printStackTrace [androidJvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [androidJvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;) toGeminiException [androidJvm]fun Throwable.toGeminiException(): GeminiExceptionConverts a throwable to a Gemini exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/-unsupported-user-location/","title":"unsupported user location","text":"<p>//gemini/dev.atick.gemini.data/GeminiException/UnsupportedUserLocation/UnsupportedUserLocation</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/-unsupported-user-location/#unsupporteduserlocation","title":"UnsupportedUserLocation","text":"<p>[androidJvm]\\ constructor(cause: Throwable? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-exception/-unsupported-user-location/-unsupported-user-location/#parameters","title":"Parameters","text":"<p>androidJvm</p> cause The cause of the exception."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/#geminiratelimiter","title":"GeminiRateLimiter","text":"<p>interface GeminiRateLimiter</p> <p>Interface representing a rate limiter for the Gemini API.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/#inheritors","title":"Inheritors","text":"GeminiRateLimiterImpl"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/#functions","title":"Functions","text":"Name Summary checkAndDelay [androidJvm]abstract suspend fun checkAndDelay()Checks if the rate limit has been reached and delays the request if necessary."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/check-and-delay/","title":"Check and delay","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter/checkAndDelay</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/check-and-delay/#checkanddelay","title":"checkAndDelay","text":"<p>[androidJvm]\\ abstract suspend fun checkAndDelay()</p> <p>Checks if the rate limit has been reached and delays the request if necessary.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter/Companion</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/#properties","title":"Properties","text":"Name Summary BASE_DELAY_BETWEEN_REQUESTS [androidJvm]const val BASE_DELAY_BETWEEN_REQUESTS: Long = 2500The base delay between requests in milliseconds. MAX_REQUESTS [androidJvm]const val MAX_REQUESTS: Int = 15The maximum number of requests allowed in the window. MAX_RETRIES [androidJvm]const val MAX_RETRIES: Int = 3The maximum number of retries allowed. WINDOW_MS [androidJvm]const val WINDOW_MS: Long = 60000The window in milliseconds."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-b-a-s-e_-d-e-l-a-y_-b-e-t-w-e-e-n_-r-e-q-u-e-s-t-s/","title":"b a s e  d e l a y  b e t w e e n  r e q u e s t s","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter/Companion/BASE_DELAY_BETWEEN_REQUESTS</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-b-a-s-e_-d-e-l-a-y_-b-e-t-w-e-e-n_-r-e-q-u-e-s-t-s/#base_delay_between_requests","title":"BASE_DELAY_BETWEEN_REQUESTS","text":"<p>[androidJvm]\\ const val BASE_DELAY_BETWEEN_REQUESTS: Long = 2500</p> <p>The base delay between requests in milliseconds.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-m-a-x_-r-e-q-u-e-s-t-s/","title":"m a x  r e q u e s t s","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter/Companion/MAX_REQUESTS</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-m-a-x_-r-e-q-u-e-s-t-s/#max_requests","title":"MAX_REQUESTS","text":"<p>[androidJvm]\\ const val MAX_REQUESTS: Int = 15</p> <p>The maximum number of requests allowed in the window.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-m-a-x_-r-e-t-r-i-e-s/","title":"m a x  r e t r i e s","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter/Companion/MAX_RETRIES</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-m-a-x_-r-e-t-r-i-e-s/#max_retries","title":"MAX_RETRIES","text":"<p>[androidJvm]\\ const val MAX_RETRIES: Int = 3</p> <p>The maximum number of retries allowed.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-w-i-n-d-o-w_-m-s/","title":"w i n d o w  m s","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiter/Companion/WINDOW_MS</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter/-companion/-w-i-n-d-o-w_-m-s/#window_ms","title":"WINDOW_MS","text":"<p>[androidJvm]\\ const val WINDOW_MS: Long = 60000</p> <p>The window in milliseconds.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/","title":"Index","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiterImpl</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/#geminiratelimiterimpl","title":"GeminiRateLimiterImpl","text":"<p>[androidJvm]\\ class GeminiRateLimiterImpl@Injectconstructor : GeminiRateLimiter</p> <p>Implementation of GeminiRateLimiter that uses a sliding window algorithm to rate limit requests.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/#constructors","title":"Constructors","text":"GeminiRateLimiterImpl [androidJvm]@Injectconstructor()Creates a GeminiRateLimiterImpl instance."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/#functions","title":"Functions","text":"Name Summary checkAndDelay [androidJvm]open suspend override fun checkAndDelay()Checks if the rate limit has been reached and delays the request if necessary."},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/-gemini-rate-limiter-impl/","title":"gemini rate limiter impl","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiterImpl/GeminiRateLimiterImpl</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/-gemini-rate-limiter-impl/#geminiratelimiterimpl","title":"GeminiRateLimiterImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor()</p> <p>Creates a GeminiRateLimiterImpl instance.</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/check-and-delay/","title":"Check and delay","text":"<p>//gemini/dev.atick.gemini.data/GeminiRateLimiterImpl/checkAndDelay</p>"},{"location":"gemini/gemini/dev.atick.gemini.data/-gemini-rate-limiter-impl/check-and-delay/#checkanddelay","title":"checkAndDelay","text":"<p>[androidJvm]\\ open suspend override fun checkAndDelay()</p> <p>Checks if the rate limit has been reached and delays the request if necessary.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/","title":"Index","text":"<p>//gemini/dev.atick.gemini.di</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"gemini/gemini/dev.atick.gemini.di/#types","title":"Types","text":"Name Summary ChatModel [androidJvm]@Qualifierannotation class ChatModelAnnotation class for the chat model. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger module that provides the binding for the GeminiDataSource interface. ExpensesModel [androidJvm]@Qualifierannotation class ExpensesModelAnnotation class for the expenses model. GeminiModule [androidJvm]@Moduleobject GeminiModuleDagger module that provides the binding for the GenerativeModel interface."},{"location":"gemini/gemini/dev.atick.gemini.di/-chat-model/","title":"Index","text":"<p>//gemini/dev.atick.gemini.di/ChatModel</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-chat-model/#chatmodel","title":"ChatModel","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class ChatModel</p> <p>Annotation class for the chat model.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/","title":"Index","text":"<p>//gemini/dev.atick.gemini.di/DataSourceModule</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger module that provides the binding for the GeminiDataSource interface.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindGeminiDataSource [androidJvm]@Binds@Singletonabstract fun bindGeminiDataSource(dataSource: GeminiDataSourceImpl): GeminiDataSourceBinds the GeminiDataSourceImpl implementation to the GeminiDataSource interface."},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//gemini/dev.atick.gemini.di/DataSourceModule/DataSourceModule</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/bind-gemini-data-source/","title":"Bind gemini data source","text":"<p>//gemini/dev.atick.gemini.di/DataSourceModule/bindGeminiDataSource</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/bind-gemini-data-source/#bindgeminidatasource","title":"bindGeminiDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindGeminiDataSource(dataSource: GeminiDataSourceImpl): GeminiDataSource</p> <p>Binds the GeminiDataSourceImpl implementation to the GeminiDataSource interface.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/bind-gemini-data-source/#return","title":"Return","text":"<p>The GeminiDataSource interface.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-data-source-module/bind-gemini-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> dataSource The implementation of GeminiDataSource to be bound."},{"location":"gemini/gemini/dev.atick.gemini.di/-expenses-model/","title":"Index","text":"<p>//gemini/dev.atick.gemini.di/ExpensesModel</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-expenses-model/#expensesmodel","title":"ExpensesModel","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class ExpensesModel</p> <p>Annotation class for the expenses model.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/","title":"Index","text":"<p>//gemini/dev.atick.gemini.di/GeminiModule</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/#geminimodule","title":"GeminiModule","text":"<p>[androidJvm]\\ @Module</p> <p>object GeminiModule</p> <p>Dagger module that provides the binding for the GenerativeModel interface.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/#functions","title":"Functions","text":"Name Summary provideChatModel [androidJvm]@Provides@Singletonfun provideChatModel(): GenerativeModelProvides the GenerativeModel for the chat model. provideGeminiClient [androidJvm]@Provides@Singletonfun provideGeminiClient(): GenerativeModelProvides the GenerativeModel for the expenses model. provideGeminiRateLimiter [androidJvm]@Provides@Singletonfun provideGeminiRateLimiter(): GeminiRateLimiterProvides the GeminiRateLimiter for the Gemini API."},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-chat-model/","title":"Provide chat model","text":"<p>//gemini/dev.atick.gemini.di/GeminiModule/provideChatModel</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-chat-model/#providechatmodel","title":"provideChatModel","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideChatModel(): GenerativeModel</p> <p>Provides the GenerativeModel for the chat model.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-chat-model/#return","title":"Return","text":"<p>The GenerativeModel for the chat model.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-gemini-client/","title":"Provide gemini client","text":"<p>//gemini/dev.atick.gemini.di/GeminiModule/provideGeminiClient</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-gemini-client/#providegeminiclient","title":"provideGeminiClient","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideGeminiClient(): GenerativeModel</p> <p>Provides the GenerativeModel for the expenses model.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-gemini-client/#return","title":"Return","text":"<p>The GenerativeModel for the expenses model.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-gemini-rate-limiter/","title":"Provide gemini rate limiter","text":"<p>//gemini/dev.atick.gemini.di/GeminiModule/provideGeminiRateLimiter</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-gemini-rate-limiter/#providegeminiratelimiter","title":"provideGeminiRateLimiter","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideGeminiRateLimiter(): GeminiRateLimiter</p> <p>Provides the GeminiRateLimiter for the Gemini API.</p>"},{"location":"gemini/gemini/dev.atick.gemini.di/-gemini-module/provide-gemini-rate-limiter/#return","title":"Return","text":"<p>The GeminiRateLimiter for the Gemini API.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"gemini/gemini/dev.atick.gemini.models/#types","title":"Types","text":"Name Summary AiChatMessage [androidJvm]data class AiChatMessage(val text: String, val sender: AiChatSender)Data class representing a chat message. AiChatSender [androidJvm]enum AiChatSender : Enum&lt;AiChatSender&gt; Enum class representing the sender of a chat message. AiCurrencyType [androidJvm]@Serializableenum AiCurrencyType : Enum&lt;AiCurrencyType&gt; Enum class representing the type of currency. AiExpense [androidJvm]@Serializabledata class AiExpense(val amount: Double, val currency: AiCurrencyType, val merchant: String, val category: AiExpenseCategory, val paymentStatus: AiPaymentStatus = AiPaymentStatus.PENDING, val recurringType: AiRecurringType = AiRecurringType.ONETIME, val paymentDate: String? = null)Represents an expense in the AI system. AiExpenseCategory [androidJvm]@Serializableenum AiExpenseCategory : Enum&lt;AiExpenseCategory&gt; Enum class representing the category of an expense. AiPaymentStatus [androidJvm]@Serializableenum AiPaymentStatus : Enum&lt;AiPaymentStatus&gt; Enum class representing the status of a payment. AiRecurringType [androidJvm]@Serializableenum AiRecurringType : Enum&lt;AiRecurringType&gt; Enum class representing the type of recurring expense. AiSMS [androidJvm]data class AiSMS(val address: String, val body: String, val date: Long)Data class representing an SMS."},{"location":"gemini/gemini/dev.atick.gemini.models/#functions","title":"Functions","text":"Name Summary toGeminiContent [androidJvm]fun AiChatMessage.toGeminiContent(): ContentConverter function to convert an AiChatMessage to a Content. toGeminiContents [androidJvm]fun List&lt;AiChatMessage&gt;.toGeminiContents(): List&lt;Content&gt;Converter function to convert a list of AiChatMessage to a list of Content."},{"location":"gemini/gemini/dev.atick.gemini.models/to-gemini-content/","title":"To gemini content","text":"<p>//gemini/dev.atick.gemini.models/toGeminiContent</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/to-gemini-content/#togeminicontent","title":"toGeminiContent","text":"<p>[androidJvm]\\ fun AiChatMessage.toGeminiContent(): Content</p> <p>Converter function to convert an AiChatMessage to a Content.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/to-gemini-content/#return","title":"Return","text":"<p>The converted Content.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/to-gemini-contents/","title":"To gemini contents","text":"<p>//gemini/dev.atick.gemini.models/toGeminiContents</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/to-gemini-contents/#togeminicontents","title":"toGeminiContents","text":"<p>[androidJvm]\\ fun List&lt;AiChatMessage&gt;.toGeminiContents(): List&lt;Content&gt;</p> <p>Converter function to convert a list of AiChatMessage to a list of Content.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiChatMessage</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/#aichatmessage","title":"AiChatMessage","text":"<p>data class AiChatMessage(val text: String, val sender: AiChatSender)</p> <p>Data class representing a chat message.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The text of the message. sender The sender of the message."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/#constructors","title":"Constructors","text":"AiChatMessage [androidJvm]constructor(text: String, sender: AiChatSender)"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/#properties","title":"Properties","text":"Name Summary sender [androidJvm]val sender: AiChatSender text [androidJvm]val text: String"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/#functions","title":"Functions","text":"Name Summary toGeminiContent [androidJvm]fun AiChatMessage.toGeminiContent(): ContentConverter function to convert an AiChatMessage to a Content."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/-ai-chat-message/","title":"ai chat message","text":"<p>//gemini/dev.atick.gemini.models/AiChatMessage/AiChatMessage</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/-ai-chat-message/#aichatmessage","title":"AiChatMessage","text":"<p>[androidJvm]\\ constructor(text: String, sender: AiChatSender)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/-ai-chat-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The text of the message. sender The sender of the message."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/sender/","title":"Sender","text":"<p>//gemini/dev.atick.gemini.models/AiChatMessage/sender</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/sender/#sender","title":"sender","text":"<p>[androidJvm]\\ val sender: AiChatSender</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/sender/#parameters","title":"Parameters","text":"<p>androidJvm</p> sender The sender of the message."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/text/","title":"Text","text":"<p>//gemini/dev.atick.gemini.models/AiChatMessage/text</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/text/#text","title":"text","text":"<p>[androidJvm]\\ val text: String</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-message/text/#parameters","title":"Parameters","text":"<p>androidJvm</p> text The text of the message."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiChatSender</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/#aichatsender","title":"AiChatSender","text":"<p>[androidJvm]\\ enum AiChatSender : Enum&lt;AiChatSender&gt; </p> <p>Enum class representing the sender of a chat message.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/#entries","title":"Entries","text":"MODEL [androidJvm]MODEL USER [androidJvm]USER"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;AiChatSender&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): AiChatSenderReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;AiChatSender&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/entries/","title":"Entries","text":"<p>//gemini/dev.atick.gemini.models/AiChatSender/entries</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;AiChatSender&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/value-of/","title":"Value of","text":"<p>//gemini/dev.atick.gemini.models/AiChatSender/valueOf</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): AiChatSender</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/values/","title":"Values","text":"<p>//gemini/dev.atick.gemini.models/AiChatSender/values</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;AiChatSender&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/-m-o-d-e-l/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiChatSender/MODEL</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/-m-o-d-e-l/#model","title":"MODEL","text":"<p>[androidJvm]\\ MODEL</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/-m-o-d-e-l/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/-u-s-e-r/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiChatSender/USER</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/-u-s-e-r/#user","title":"USER","text":"<p>[androidJvm]\\ USER</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-chat-sender/-u-s-e-r/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/#aicurrencytype","title":"AiCurrencyType","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum AiCurrencyType : Enum&lt;AiCurrencyType&gt; </p> <p>Enum class representing the type of currency.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/#entries","title":"Entries","text":"QAR [androidJvm]QAR USD [androidJvm]USD EUR [androidJvm]EUR GBP [androidJvm]GBP BDT [androidJvm]BDT"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;AiCurrencyType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): AiCurrencyTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;AiCurrencyType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/entries/","title":"Entries","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/entries</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;AiCurrencyType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/value-of/","title":"Value of","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/valueOf</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): AiCurrencyType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/values/","title":"Values","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/values</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;AiCurrencyType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-b-d-t/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/BDT</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-b-d-t/#bdt","title":"BDT","text":"<p>[androidJvm]\\ BDT</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-b-d-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-e-u-r/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/EUR</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-e-u-r/#eur","title":"EUR","text":"<p>[androidJvm]\\ EUR</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-e-u-r/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-g-b-p/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/GBP</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-g-b-p/#gbp","title":"GBP","text":"<p>[androidJvm]\\ GBP</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-g-b-p/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-q-a-r/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/QAR</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-q-a-r/#qar","title":"QAR","text":"<p>[androidJvm]\\ QAR</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-q-a-r/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-u-s-d/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiCurrencyType/USD</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-u-s-d/#usd","title":"USD","text":"<p>[androidJvm]\\ USD</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-currency-type/-u-s-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpense</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/#aiexpense","title":"AiExpense","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class AiExpense(val amount: Double, val currency: AiCurrencyType, val merchant: String, val category: AiExpenseCategory, val paymentStatus: AiPaymentStatus = AiPaymentStatus.PENDING, val recurringType: AiRecurringType = AiRecurringType.ONETIME, val paymentDate: String? = null)</p> <p>Represents an expense in the AI system.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/#constructors","title":"Constructors","text":"AiExpense [androidJvm]constructor(amount: Double, currency: AiCurrencyType, merchant: String, category: AiExpenseCategory, paymentStatus: AiPaymentStatus = AiPaymentStatus.PENDING, recurringType: AiRecurringType = AiRecurringType.ONETIME, paymentDate: String? = null)"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: DoubleThe amount of the expense. category [androidJvm]val category: AiExpenseCategoryThe category of the expense. currency [androidJvm]val currency: AiCurrencyTypeThe currency of the expense. merchant [androidJvm]val merchant: StringThe merchant of the expense. paymentDate [androidJvm]val paymentDate: String? = nullThe payment date of the expense. paymentStatus [androidJvm]val paymentStatus: AiPaymentStatusThe payment status of the expense. recurringType [androidJvm]val recurringType: AiRecurringTypeThe recurring type of the expense."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/-ai-expense/","title":"ai expense","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/AiExpense</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/-ai-expense/#aiexpense","title":"AiExpense","text":"<p>[androidJvm]\\ constructor(amount: Double, currency: AiCurrencyType, merchant: String, category: AiExpenseCategory, paymentStatus: AiPaymentStatus = AiPaymentStatus.PENDING, recurringType: AiRecurringType = AiRecurringType.ONETIME, paymentDate: String? = null)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/amount/","title":"Amount","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/amount</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/category/","title":"Category","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/category</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/category/#category","title":"category","text":"<p>[androidJvm]\\ val category: AiExpenseCategory</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/currency/","title":"Currency","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/currency</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/currency/#currency","title":"currency","text":"<p>[androidJvm]\\ val currency: AiCurrencyType</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/merchant/","title":"Merchant","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/merchant</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/merchant/#merchant","title":"merchant","text":"<p>[androidJvm]\\ val merchant: String</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/payment-date/","title":"Payment date","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/paymentDate</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/payment-date/#paymentdate","title":"paymentDate","text":"<p>[androidJvm]\\ val paymentDate: String? = null</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/payment-status/","title":"Payment status","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/paymentStatus</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/payment-status/#paymentstatus","title":"paymentStatus","text":"<p>[androidJvm]\\ val paymentStatus: AiPaymentStatus</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/recurring-type/","title":"Recurring type","text":"<p>//gemini/dev.atick.gemini.models/AiExpense/recurringType</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense/recurring-type/#recurringtype","title":"recurringType","text":"<p>[androidJvm]\\ val recurringType: AiRecurringType</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/#aiexpensecategory","title":"AiExpenseCategory","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum AiExpenseCategory : Enum&lt;AiExpenseCategory&gt; </p> <p>Enum class representing the category of an expense.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/#entries","title":"Entries","text":"FOOD [androidJvm]FOOD ESSENTIAL [androidJvm]ESSENTIAL LIFESTYLE [androidJvm]LIFESTYLE TRANSPORTATION [androidJvm]TRANSPORTATION HEALTHCARE [androidJvm]HEALTHCARE SAVINGS [androidJvm]SAVINGS DEBT [androidJvm]DEBT EDUCATION [androidJvm]EDUCATION OTHERS [androidJvm]OTHERS"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;AiExpenseCategory&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): AiExpenseCategoryReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;AiExpenseCategory&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/entries/","title":"Entries","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/entries</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;AiExpenseCategory&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/value-of/","title":"Value of","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/valueOf</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): AiExpenseCategory</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/values/","title":"Values","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/values</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;AiExpenseCategory&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-d-e-b-t/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/DEBT</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-d-e-b-t/#debt","title":"DEBT","text":"<p>[androidJvm]\\ DEBT</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-d-e-b-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-e-d-u-c-a-t-i-o-n/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/EDUCATION</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-e-d-u-c-a-t-i-o-n/#education","title":"EDUCATION","text":"<p>[androidJvm]\\ EDUCATION</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-e-d-u-c-a-t-i-o-n/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-e-s-s-e-n-t-i-a-l/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/ESSENTIAL</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-e-s-s-e-n-t-i-a-l/#essential","title":"ESSENTIAL","text":"<p>[androidJvm]\\ ESSENTIAL</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-e-s-s-e-n-t-i-a-l/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-f-o-o-d/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/FOOD</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-f-o-o-d/#food","title":"FOOD","text":"<p>[androidJvm]\\ FOOD</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-f-o-o-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-h-e-a-l-t-h-c-a-r-e/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/HEALTHCARE</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-h-e-a-l-t-h-c-a-r-e/#healthcare","title":"HEALTHCARE","text":"<p>[androidJvm]\\ HEALTHCARE</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-h-e-a-l-t-h-c-a-r-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-l-i-f-e-s-t-y-l-e/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/LIFESTYLE</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-l-i-f-e-s-t-y-l-e/#lifestyle","title":"LIFESTYLE","text":"<p>[androidJvm]\\ LIFESTYLE</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-l-i-f-e-s-t-y-l-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-o-t-h-e-r-s/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/OTHERS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-o-t-h-e-r-s/#others","title":"OTHERS","text":"<p>[androidJvm]\\ OTHERS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-o-t-h-e-r-s/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-s-a-v-i-n-g-s/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/SAVINGS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-s-a-v-i-n-g-s/#savings","title":"SAVINGS","text":"<p>[androidJvm]\\ SAVINGS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-s-a-v-i-n-g-s/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-t-r-a-n-s-p-o-r-t-a-t-i-o-n/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiExpenseCategory/TRANSPORTATION</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-t-r-a-n-s-p-o-r-t-a-t-i-o-n/#transportation","title":"TRANSPORTATION","text":"<p>[androidJvm]\\ TRANSPORTATION</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-expense-category/-t-r-a-n-s-p-o-r-t-a-t-i-o-n/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/#aipaymentstatus","title":"AiPaymentStatus","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum AiPaymentStatus : Enum&lt;AiPaymentStatus&gt; </p> <p>Enum class representing the status of a payment.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/#entries","title":"Entries","text":"PENDING [androidJvm]PENDING PAID [androidJvm]PAID OVERDUE [androidJvm]OVERDUE CANCELLED [androidJvm]CANCELLED"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;AiPaymentStatus&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): AiPaymentStatusReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;AiPaymentStatus&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/entries/","title":"Entries","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/entries</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;AiPaymentStatus&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/value-of/","title":"Value of","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/valueOf</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): AiPaymentStatus</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/values/","title":"Values","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/values</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;AiPaymentStatus&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-c-a-n-c-e-l-l-e-d/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/CANCELLED</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-c-a-n-c-e-l-l-e-d/#cancelled","title":"CANCELLED","text":"<p>[androidJvm]\\ CANCELLED</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-c-a-n-c-e-l-l-e-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-o-v-e-r-d-u-e/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/OVERDUE</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-o-v-e-r-d-u-e/#overdue","title":"OVERDUE","text":"<p>[androidJvm]\\ OVERDUE</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-o-v-e-r-d-u-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-p-a-i-d/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/PAID</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-p-a-i-d/#paid","title":"PAID","text":"<p>[androidJvm]\\ PAID</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-p-a-i-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-p-e-n-d-i-n-g/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiPaymentStatus/PENDING</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-p-e-n-d-i-n-g/#pending","title":"PENDING","text":"<p>[androidJvm]\\ PENDING</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-payment-status/-p-e-n-d-i-n-g/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/#airecurringtype","title":"AiRecurringType","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum AiRecurringType : Enum&lt;AiRecurringType&gt; </p> <p>Enum class representing the type of recurring expense.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/#entries","title":"Entries","text":"ONETIME [androidJvm]ONETIME DAILY [androidJvm]DAILY WEEKLY [androidJvm]WEEKLY MONTHLY [androidJvm]MONTHLY YEARLY [androidJvm]YEARLY"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;AiRecurringType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): AiRecurringTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;AiRecurringType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/entries/","title":"Entries","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/entries</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;AiRecurringType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/value-of/","title":"Value of","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/valueOf</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): AiRecurringType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/values/","title":"Values","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/values</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;AiRecurringType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-d-a-i-l-y/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/DAILY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-d-a-i-l-y/#daily","title":"DAILY","text":"<p>[androidJvm]\\ DAILY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-d-a-i-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-m-o-n-t-h-l-y/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/MONTHLY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-m-o-n-t-h-l-y/#monthly","title":"MONTHLY","text":"<p>[androidJvm]\\ MONTHLY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-m-o-n-t-h-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-o-n-e-t-i-m-e/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/ONETIME</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-o-n-e-t-i-m-e/#onetime","title":"ONETIME","text":"<p>[androidJvm]\\ ONETIME</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-o-n-e-t-i-m-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-w-e-e-k-l-y/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/WEEKLY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-w-e-e-k-l-y/#weekly","title":"WEEKLY","text":"<p>[androidJvm]\\ WEEKLY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-w-e-e-k-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-y-e-a-r-l-y/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiRecurringType/YEARLY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-y-e-a-r-l-y/#yearly","title":"YEARLY","text":"<p>[androidJvm]\\ YEARLY</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-recurring-type/-y-e-a-r-l-y/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/","title":"Index","text":"<p>//gemini/dev.atick.gemini.models/AiSMS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/#aisms","title":"AiSMS","text":"<p>data class AiSMS(val address: String, val body: String, val date: Long)</p> <p>Data class representing an SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/#parameters","title":"Parameters","text":"<p>androidJvm</p> address The sender's phone number. body The body of the SMS. date The date the SMS was sent."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/#constructors","title":"Constructors","text":"AiSMS [androidJvm]constructor(address: String, body: String, date: Long)"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/#properties","title":"Properties","text":"Name Summary address [androidJvm]val address: String body [androidJvm]val body: String date [androidJvm]val date: Long"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/#functions","title":"Functions","text":"Name Summary getTextSMS [androidJvm]fun getTextSMS(): StringFunction to get the text of the SMS."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/-ai-s-m-s/","title":"ai s m s","text":"<p>//gemini/dev.atick.gemini.models/AiSMS/AiSMS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/-ai-s-m-s/#aisms","title":"AiSMS","text":"<p>[androidJvm]\\ constructor(address: String, body: String, date: Long)</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/-ai-s-m-s/#parameters","title":"Parameters","text":"<p>androidJvm</p> address The sender's phone number. body The body of the SMS. date The date the SMS was sent."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/address/","title":"Address","text":"<p>//gemini/dev.atick.gemini.models/AiSMS/address</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/address/#address","title":"address","text":"<p>[androidJvm]\\ val address: String</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/address/#parameters","title":"Parameters","text":"<p>androidJvm</p> address The sender's phone number."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/body/","title":"Body","text":"<p>//gemini/dev.atick.gemini.models/AiSMS/body</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/body/#body","title":"body","text":"<p>[androidJvm]\\ val body: String</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/body/#parameters","title":"Parameters","text":"<p>androidJvm</p> body The body of the SMS."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/date/","title":"Date","text":"<p>//gemini/dev.atick.gemini.models/AiSMS/date</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/date/#date","title":"date","text":"<p>[androidJvm]\\ val date: Long</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/date/#parameters","title":"Parameters","text":"<p>androidJvm</p> date The date the SMS was sent."},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/get-text-s-m-s/","title":"Get text s m s","text":"<p>//gemini/dev.atick.gemini.models/AiSMS/getTextSMS</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/get-text-s-m-s/#gettextsms","title":"getTextSMS","text":"<p>[androidJvm]\\ fun getTextSMS(): String</p> <p>Function to get the text of the SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.models/-ai-s-m-s/get-text-s-m-s/#return","title":"Return","text":"<p>The text of the SMS.</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/","title":"Index","text":"<p>//gemini/dev.atick.gemini.utils</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"gemini/gemini/dev.atick.gemini.utils/#types","title":"Types","text":"Name Summary ExpenseParser [androidJvm]object ExpenseParserUtility class to parse JSON strings into AiExpense objects."},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/","title":"Index","text":"<p>//gemini/dev.atick.gemini.utils/ExpenseParser</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/#expenseparser","title":"ExpenseParser","text":"<p>[androidJvm]\\ object ExpenseParser</p> <p>Utility class to parse JSON strings into AiExpense objects.</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/#functions","title":"Functions","text":"Name Summary parseExpense [androidJvm]fun parseExpense(jsonString: String): AiExpenseParses a JSON string into an AiExpense object."},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/parse-expense/","title":"Parse expense","text":"<p>//gemini/dev.atick.gemini.utils/ExpenseParser/parseExpense</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/parse-expense/#parseexpense","title":"parseExpense","text":"<p>[androidJvm]\\ fun parseExpense(jsonString: String): AiExpense</p> <p>Parses a JSON string into an AiExpense object.</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/parse-expense/#return","title":"Return","text":"<p>The parsed AiExpense object.</p>"},{"location":"gemini/gemini/dev.atick.gemini.utils/-expense-parser/parse-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> jsonString The JSON string to parse."},{"location":"network/","title":"Index","text":"<p>//network</p>"},{"location":"network/#network","title":"network","text":""},{"location":"network/#packages","title":"Packages","text":"Name dev.atick.network.di dev.atick.network.utils"},{"location":"network/network/dev.atick.network.di/","title":"Index","text":"<p>//network/dev.atick.network.di</p>"},{"location":"network/network/dev.atick.network.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.di/#types","title":"Types","text":"Name Summary ConnectivityManagerModule [androidJvm]@Moduleobject ConnectivityManagerModuleModule for providing ConnectivityManager. NetworkUtilsModule [androidJvm]@Moduleabstract class NetworkUtilsModuleModule for providing NetworkUtils."},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/","title":"Index","text":"<p>//network/dev.atick.network.di/ConnectivityManagerModule</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/#connectivitymanagermodule","title":"ConnectivityManagerModule","text":"<p>[androidJvm]\\ @Module</p> <p>object ConnectivityManagerModule</p> <p>Module for providing ConnectivityManager.</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/#functions","title":"Functions","text":"Name Summary provideConnectivityManager [androidJvm]@Provides@Singletonfun provideConnectivityManager(context: Context): ConnectivityManagerProvides ConnectivityManager."},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/","title":"Provide connectivity manager","text":"<p>//network/dev.atick.network.di/ConnectivityManagerModule/provideConnectivityManager</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/#provideconnectivitymanager","title":"provideConnectivityManager","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideConnectivityManager(context: Context): ConnectivityManager</p> <p>Provides ConnectivityManager.</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/#return","title":"Return","text":"<p>ConnectivityManager.</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/#parameters","title":"Parameters","text":"<p>androidJvm</p> context Context."},{"location":"network/network/dev.atick.network.di/-network-utils-module/","title":"Index","text":"<p>//network/dev.atick.network.di/NetworkUtilsModule</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/#networkutilsmodule","title":"NetworkUtilsModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class NetworkUtilsModule</p> <p>Module for providing NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/#constructors","title":"Constructors","text":"NetworkUtilsModule [androidJvm]constructor()"},{"location":"network/network/dev.atick.network.di/-network-utils-module/#functions","title":"Functions","text":"Name Summary bindNetworkUtils [androidJvm]@Binds@Singletonabstract fun bindNetworkUtils(networkUtilsImpl: NetworkUtilsImpl): NetworkUtilsBinds NetworkUtilsImpl to NetworkUtils."},{"location":"network/network/dev.atick.network.di/-network-utils-module/-network-utils-module/","title":"network utils module","text":"<p>//network/dev.atick.network.di/NetworkUtilsModule/NetworkUtilsModule</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/-network-utils-module/#networkutilsmodule","title":"NetworkUtilsModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/","title":"Bind network utils","text":"<p>//network/dev.atick.network.di/NetworkUtilsModule/bindNetworkUtils</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/#bindnetworkutils","title":"bindNetworkUtils","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindNetworkUtils(networkUtilsImpl: NetworkUtilsImpl): NetworkUtils</p> <p>Binds NetworkUtilsImpl to NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/#return","title":"Return","text":"<p>NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/#parameters","title":"Parameters","text":"<p>androidJvm</p> networkUtilsImpl NetworkUtilsImpl."},{"location":"network/network/dev.atick.network.utils/","title":"Index","text":"<p>//network/dev.atick.network.utils</p>"},{"location":"network/network/dev.atick.network.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.utils/#types","title":"Types","text":"Name Summary NetworkState [androidJvm]enum NetworkState : Enum&lt;NetworkState&gt; Network state. NetworkUtils [androidJvm]interface NetworkUtilsNetwork utils. NetworkUtilsImpl [androidJvm]class NetworkUtilsImpl@Injectconstructor(connectivityManager: ConnectivityManager) : NetworkUtilsImplementation of NetworkUtils."},{"location":"network/network/dev.atick.network.utils/-network-state/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/#networkstate","title":"NetworkState","text":"<p>enum NetworkState : Enum&lt;NetworkState&gt; </p> <p>Network state.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> description StringRes description."},{"location":"network/network/dev.atick.network.utils/-network-state/#entries","title":"Entries","text":"CONNECTED [androidJvm]CONNECTEDNetwork is connected. LOSING [androidJvm]LOSINGNetwork is connecting. LOST [androidJvm]LOSTNetwork is disconnected. UNAVAILABLE [androidJvm]UNAVAILABLENetwork is unavailable."},{"location":"network/network/dev.atick.network.utils/-network-state/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int entries [androidJvm]val entries: EnumEntries&lt;NetworkState&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): NetworkStateReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;NetworkState&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"network/network/dev.atick.network.utils/-network-state/description/","title":"Description","text":"<p>//network/dev.atick.network.utils/NetworkState/description</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/description/#description","title":"description","text":"<p>[androidJvm]\\ val description: Int</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/description/#parameters","title":"Parameters","text":"<p>androidJvm</p> description StringRes description."},{"location":"network/network/dev.atick.network.utils/-network-state/entries/","title":"Entries","text":"<p>//network/dev.atick.network.utils/NetworkState/entries</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;NetworkState&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/value-of/","title":"Value of","text":"<p>//network/dev.atick.network.utils/NetworkState/valueOf</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): NetworkState</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"network/network/dev.atick.network.utils/-network-state/values/","title":"Values","text":"<p>//network/dev.atick.network.utils/NetworkState/values</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;NetworkState&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/CONNECTED</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/#connected","title":"CONNECTED","text":"<p>[androidJvm]\\ CONNECTED</p> <p>Network is connected.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-i-n-g/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/LOSING</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-i-n-g/#losing","title":"LOSING","text":"<p>[androidJvm]\\ LOSING</p> <p>Network is connecting.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-i-n-g/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-t/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/LOST</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-t/#lost","title":"LOST","text":"<p>[androidJvm]\\ LOST</p> <p>Network is disconnected.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-t/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/UNAVAILABLE</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/#unavailable","title":"UNAVAILABLE","text":"<p>[androidJvm]\\ UNAVAILABLE</p> <p>Network is unavailable.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-utils/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkUtils</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils/#networkutils","title":"NetworkUtils","text":"<p>interface NetworkUtils</p> <p>Network utils.</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils/#inheritors","title":"Inheritors","text":"NetworkUtilsImpl"},{"location":"network/network/dev.atick.network.utils/-network-utils/#properties","title":"Properties","text":"Name Summary currentState [androidJvm]abstract val currentState: Flow&lt;NetworkState&gt;Current network state as Flow."},{"location":"network/network/dev.atick.network.utils/-network-utils/current-state/","title":"Current state","text":"<p>//network/dev.atick.network.utils/NetworkUtils/currentState</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils/current-state/#currentstate","title":"currentState","text":"<p>[androidJvm]\\ abstract val currentState: Flow&lt;NetworkState&gt;</p> <p>Current network state as Flow.</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkUtilsImpl</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#networkutilsimpl","title":"NetworkUtilsImpl","text":"<p>class NetworkUtilsImpl@Injectconstructor(connectivityManager: ConnectivityManager) : NetworkUtils</p> <p>Implementation of NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> connectivityManager ConnectivityManager."},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#constructors","title":"Constructors","text":"NetworkUtilsImpl [androidJvm]@Injectconstructor(connectivityManager: ConnectivityManager)"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#properties","title":"Properties","text":"Name Summary currentState [androidJvm]open override val currentState: Flow&lt;NetworkState&gt;Current network state as Flow."},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/-network-utils-impl/","title":"network utils impl","text":"<p>//network/dev.atick.network.utils/NetworkUtilsImpl/NetworkUtilsImpl</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/-network-utils-impl/#networkutilsimpl","title":"NetworkUtilsImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(connectivityManager: ConnectivityManager)</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/-network-utils-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> connectivityManager ConnectivityManager."},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/current-state/","title":"Current state","text":"<p>//network/dev.atick.network.utils/NetworkUtilsImpl/currentState</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/current-state/#currentstate","title":"currentState","text":"<p>[androidJvm]\\ open override val currentState: Flow&lt;NetworkState&gt;</p> <p>Current network state as Flow.</p>"},{"location":"sms/","title":"Index","text":"<p>//sms</p>"},{"location":"sms/#sms","title":"sms","text":""},{"location":"sms/#packages","title":"Packages","text":"Name dev.atick.sms.data dev.atick.sms.di dev.atick.sms.models"},{"location":"sms/sms/dev.atick.sms.data/","title":"Index","text":"<p>//sms/dev.atick.sms.data</p>"},{"location":"sms/sms/dev.atick.sms.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sms/sms/dev.atick.sms.data/#types","title":"Types","text":"Name Summary SMSDataSource [androidJvm]interface SMSDataSourceInterface for a data source that provides SMS messages. SMSDataSourceImpl [androidJvm]class SMSDataSourceImpl@Injectconstructor(contentResolver: ContentResolver, ioDispatcher: CoroutineDispatcher) : SMSDataSourceImplementation of SMSDataSource that queries SMS messages from the device."},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/","title":"Index","text":"<p>//sms/dev.atick.sms.data/SMSDataSource</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/#smsdatasource","title":"SMSDataSource","text":"<p>interface SMSDataSource</p> <p>Interface for a data source that provides SMS messages.</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/#inheritors","title":"Inheritors","text":"SMSDataSourceImpl"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/#functions","title":"Functions","text":"Name Summary querySMS [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")abstract suspend fun querySMS(senderNames: List&lt;String&gt;, keywords: List&lt;String&gt;? = null, ignoreWords: List&lt;String&gt;? = null, startDate: Long? = null, endDate: Long = System.currentTimeMillis()): List&lt;SMSMessage&gt;Queries SMS messages based on the provided parameters."},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/query-s-m-s/","title":"Query s m s","text":"<p>//sms/dev.atick.sms.data/SMSDataSource/querySMS</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/query-s-m-s/#querysms","title":"querySMS","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>abstract suspend fun querySMS(senderNames: List&lt;String&gt;, keywords: List&lt;String&gt;? = null, ignoreWords: List&lt;String&gt;? = null, startDate: Long? = null, endDate: Long = System.currentTimeMillis()): List&lt;SMSMessage&gt;</p> <p>Queries SMS messages based on the provided parameters.</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/query-s-m-s/#return","title":"Return","text":"<p>The list of SMS messages that match the provided parameters.</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source/query-s-m-s/#parameters","title":"Parameters","text":"<p>androidJvm</p> senderNames The names of the senders to filter by. keywords The keywords to filter by. ignoreWords The words to ignore. startDate The start date to filter by. endDate The end date to filter by."},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/","title":"Index","text":"<p>//sms/dev.atick.sms.data/SMSDataSourceImpl</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/#smsdatasourceimpl","title":"SMSDataSourceImpl","text":"<p>[androidJvm]\\ class SMSDataSourceImpl@Injectconstructor(contentResolver: ContentResolver, ioDispatcher: CoroutineDispatcher) : SMSDataSource</p> <p>Implementation of SMSDataSource that queries SMS messages from the device.</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/#constructors","title":"Constructors","text":"SMSDataSourceImpl [androidJvm]@Injectconstructor(contentResolver: ContentResolver, ioDispatcher: CoroutineDispatcher)"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/#functions","title":"Functions","text":"Name Summary querySMS [androidJvm]@RequiresPermission(value = \"android.permission.READ_SMS\")open suspend override fun querySMS(senderNames: List&lt;String&gt;, keywords: List&lt;String&gt;?, ignoreWords: List&lt;String&gt;?, startDate: Long?, endDate: Long): List&lt;SMSMessage&gt;Queries SMS messages based on the provided parameters."},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/-s-m-s-data-source-impl/","title":"s m s data source impl","text":"<p>//sms/dev.atick.sms.data/SMSDataSourceImpl/SMSDataSourceImpl</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/-s-m-s-data-source-impl/#smsdatasourceimpl","title":"SMSDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(contentResolver: ContentResolver, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/query-s-m-s/","title":"Query s m s","text":"<p>//sms/dev.atick.sms.data/SMSDataSourceImpl/querySMS</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/query-s-m-s/#querysms","title":"querySMS","text":"<p>[androidJvm]\\</p> <p>@RequiresPermission(value = \"android.permission.READ_SMS\")</p> <p>open suspend override fun querySMS(senderNames: List&lt;String&gt;, keywords: List&lt;String&gt;?, ignoreWords: List&lt;String&gt;?, startDate: Long?, endDate: Long): List&lt;SMSMessage&gt;</p> <p>Queries SMS messages based on the provided parameters.</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/query-s-m-s/#return","title":"Return","text":"<p>The list of SMS messages that match the provided parameters.</p>"},{"location":"sms/sms/dev.atick.sms.data/-s-m-s-data-source-impl/query-s-m-s/#parameters","title":"Parameters","text":"<p>androidJvm</p> senderNames The names of the senders to filter by. keywords The keywords to filter by. ignoreWords The words to ignore. startDate The start date to filter by. endDate The end date to filter by."},{"location":"sms/sms/dev.atick.sms.di/","title":"Index","text":"<p>//sms/dev.atick.sms.di</p>"},{"location":"sms/sms/dev.atick.sms.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sms/sms/dev.atick.sms.di/#types","title":"Types","text":"Name Summary ContentResolverModule [androidJvm]@Moduleobject ContentResolverModuleDagger module that provides the ContentResolver dependency. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger module that provides the binding for the SMSDataSource interface."},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/","title":"Index","text":"<p>//sms/dev.atick.sms.di/ContentResolverModule</p>"},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/#contentresolvermodule","title":"ContentResolverModule","text":"<p>[androidJvm]\\ @Module</p> <p>object ContentResolverModule</p> <p>Dagger module that provides the ContentResolver dependency.</p>"},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/#functions","title":"Functions","text":"Name Summary provideContentResolver [androidJvm]@Provides@Singletonfun provideContentResolver(context: Context): ContentResolverProvides the ContentResolver dependency."},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/provide-content-resolver/","title":"Provide content resolver","text":"<p>//sms/dev.atick.sms.di/ContentResolverModule/provideContentResolver</p>"},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/provide-content-resolver/#providecontentresolver","title":"provideContentResolver","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideContentResolver(context: Context): ContentResolver</p> <p>Provides the ContentResolver dependency.</p>"},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/provide-content-resolver/#return","title":"Return","text":"<p>The ContentResolver instance.</p>"},{"location":"sms/sms/dev.atick.sms.di/-content-resolver-module/provide-content-resolver/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context."},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/","title":"Index","text":"<p>//sms/dev.atick.sms.di/DataSourceModule</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger module that provides the binding for the SMSDataSource interface.</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindSMSDataSource [androidJvm]@Binds@Singletonabstract fun bindSMSDataSource(smsDataSourceImpl: SMSDataSourceImpl): SMSDataSourceBinds the SMSDataSourceImpl implementation to the SMSDataSource interface."},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//sms/dev.atick.sms.di/DataSourceModule/DataSourceModule</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/bind-s-m-s-data-source/","title":"Bind s m s data source","text":"<p>//sms/dev.atick.sms.di/DataSourceModule/bindSMSDataSource</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/bind-s-m-s-data-source/#bindsmsdatasource","title":"bindSMSDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindSMSDataSource(smsDataSourceImpl: SMSDataSourceImpl): SMSDataSource</p> <p>Binds the SMSDataSourceImpl implementation to the SMSDataSource interface.</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/bind-s-m-s-data-source/#return","title":"Return","text":"<p>The SMSDataSource interface.</p>"},{"location":"sms/sms/dev.atick.sms.di/-data-source-module/bind-s-m-s-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> smsDataSourceImpl The implementation of SMSDataSource to be bound."},{"location":"sms/sms/dev.atick.sms.models/","title":"Index","text":"<p>//sms/dev.atick.sms.models</p>"},{"location":"sms/sms/dev.atick.sms.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sms/sms/dev.atick.sms.models/#types","title":"Types","text":"Name Summary SMSMessage [androidJvm]data class SMSMessage(val id: Long, val address: String, val body: String, val date: Long, val type: Int)Data class that represents an SMS message."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/","title":"Index","text":"<p>//sms/dev.atick.sms.models/SMSMessage</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/#smsmessage","title":"SMSMessage","text":"<p>data class SMSMessage(val id: Long, val address: String, val body: String, val date: Long, val type: Int)</p> <p>Data class that represents an SMS message.</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the SMS message. address The address of the sender or recipient of the SMS message. body The body of the SMS message. date The date and time the SMS message was sent or received. type The type of the SMS message."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/#constructors","title":"Constructors","text":"SMSMessage [androidJvm]constructor(id: Long, address: String, body: String, date: Long, type: Int)"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/#properties","title":"Properties","text":"Name Summary address [androidJvm]val address: String body [androidJvm]val body: String date [androidJvm]val date: Long id [androidJvm]val id: Long type [androidJvm]val type: Int"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/-s-m-s-message/","title":"s m s message","text":"<p>//sms/dev.atick.sms.models/SMSMessage/SMSMessage</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/-s-m-s-message/#smsmessage","title":"SMSMessage","text":"<p>[androidJvm]\\ constructor(id: Long, address: String, body: String, date: Long, type: Int)</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/-s-m-s-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the SMS message. address The address of the sender or recipient of the SMS message. body The body of the SMS message. date The date and time the SMS message was sent or received. type The type of the SMS message."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/address/","title":"Address","text":"<p>//sms/dev.atick.sms.models/SMSMessage/address</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/address/#address","title":"address","text":"<p>[androidJvm]\\ val address: String</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/address/#parameters","title":"Parameters","text":"<p>androidJvm</p> address The address of the sender or recipient of the SMS message."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/body/","title":"Body","text":"<p>//sms/dev.atick.sms.models/SMSMessage/body</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/body/#body","title":"body","text":"<p>[androidJvm]\\ val body: String</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/body/#parameters","title":"Parameters","text":"<p>androidJvm</p> body The body of the SMS message."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/date/","title":"Date","text":"<p>//sms/dev.atick.sms.models/SMSMessage/date</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/date/#date","title":"date","text":"<p>[androidJvm]\\ val date: Long</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/date/#parameters","title":"Parameters","text":"<p>androidJvm</p> date The date and time the SMS message was sent or received."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/id/","title":"Id","text":"<p>//sms/dev.atick.sms.models/SMSMessage/id</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Long</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the SMS message."},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/type/","title":"Type","text":"<p>//sms/dev.atick.sms.models/SMSMessage/type</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/type/#type","title":"type","text":"<p>[androidJvm]\\ val type: Int</p>"},{"location":"sms/sms/dev.atick.sms.models/-s-m-s-message/type/#parameters","title":"Parameters","text":"<p>androidJvm</p> type The type of the SMS message."},{"location":"storage/preferences/","title":"Index","text":"<p>//preferences</p>"},{"location":"storage/preferences/#preferences","title":"preferences","text":""},{"location":"storage/preferences/#packages","title":"Packages","text":"Name dev.atick.storage.preferences.data dev.atick.storage.preferences.di dev.atick.storage.preferences.models dev.atick.storage.preferences.utils"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.data</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/#types","title":"Types","text":"Name Summary UserPreferencesDataSource [androidJvm]interface UserPreferencesDataSourceInterface defining methods to interact with user preferences data source. UserPreferencesDataSourceImpl [androidJvm]class UserPreferencesDataSourceImpl@Injectconstructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher) : UserPreferencesDataSourceImplementation of the UserPreferencesDataSource interface using DataStore to manage user preferences."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#userpreferencesdatasource","title":"UserPreferencesDataSource","text":"<p>interface UserPreferencesDataSource</p> <p>Interface defining methods to interact with user preferences data source.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#inheritors","title":"Inheritors","text":"UserPreferencesDataSourceImpl"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#properties","title":"Properties","text":"Name Summary userData [androidJvm]abstract val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean)Sets the dynamic color preferences in the user preferences. setLanguage [androidJvm]abstract suspend fun setLanguage(language: String)Sets the language in the user preferences. setProfile [androidJvm]abstract suspend fun setProfile(profile: Profile)Sets the user profile in the user preferences. setThemeBrand [androidJvm]abstract suspend fun setThemeBrand(themeBrand: ThemeBrand)Sets the theme brand in the user preferences."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setDarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setDynamicColorPreference</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean)</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-language/","title":"Set language","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setLanguage</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-language/#setlanguage","title":"setLanguage","text":"<p>[androidJvm]\\ abstract suspend fun setLanguage(language: String)</p> <p>Sets the language in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-language/#parameters","title":"Parameters","text":"<p>androidJvm</p> language The language to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-profile/","title":"Set profile","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setProfile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-profile/#setprofile","title":"setProfile","text":"<p>[androidJvm]\\ abstract suspend fun setProfile(profile: Profile)</p> <p>Sets the user profile in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user ID to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-theme-brand/","title":"Set theme brand","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setThemeBrand</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-theme-brand/#setthemebrand","title":"setThemeBrand","text":"<p>[androidJvm]\\ abstract suspend fun setThemeBrand(themeBrand: ThemeBrand)</p> <p>Sets the theme brand in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-theme-brand/#parameters","title":"Parameters","text":"<p>androidJvm</p> themeBrand The theme brand to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/user-data/","title":"User data","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/userData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ abstract val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#userpreferencesdatasourceimpl","title":"UserPreferencesDataSourceImpl","text":"<p>[androidJvm]\\ class UserPreferencesDataSourceImpl@Injectconstructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher) : UserPreferencesDataSource</p> <p>Implementation of the UserPreferencesDataSource interface using DataStore to manage user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#constructors","title":"Constructors","text":"UserPreferencesDataSourceImpl [androidJvm]@Injectconstructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher)"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#properties","title":"Properties","text":"Name Summary userData [androidJvm]open override val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean)Sets the dynamic color preferences in the user preferences. setLanguage [androidJvm]open suspend override fun setLanguage(language: String)Sets the language in the user preferences. setProfile [androidJvm]open suspend override fun setProfile(profile: Profile)Sets the user profile in the user preferences. setThemeBrand [androidJvm]open suspend override fun setThemeBrand(themeBrand: ThemeBrand)Sets the theme brand in the user preferences."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/-user-preferences-data-source-impl/","title":"user preferences data source impl","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/UserPreferencesDataSourceImpl</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/-user-preferences-data-source-impl/#userpreferencesdatasourceimpl","title":"UserPreferencesDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setDarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setDynamicColorPreference</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean)</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-language/","title":"Set language","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setLanguage</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-language/#setlanguage","title":"setLanguage","text":"<p>[androidJvm]\\ open suspend override fun setLanguage(language: String)</p> <p>Sets the language in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-language/#parameters","title":"Parameters","text":"<p>androidJvm</p> language The language to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-profile/","title":"Set profile","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setProfile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-profile/#setprofile","title":"setProfile","text":"<p>[androidJvm]\\ open suspend override fun setProfile(profile: Profile)</p> <p>Sets the user profile in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user Profile to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-theme-brand/","title":"Set theme brand","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setThemeBrand</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-theme-brand/#setthemebrand","title":"setThemeBrand","text":"<p>[androidJvm]\\ open suspend override fun setThemeBrand(themeBrand: ThemeBrand)</p> <p>Sets the theme brand in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-theme-brand/#parameters","title":"Parameters","text":"<p>androidJvm</p> themeBrand The theme brand to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/user-data/","title":"User data","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/userData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ open override val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.di</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/#types","title":"Types","text":"Name Summary DatastoreModule [androidJvm]@Moduleobject DatastoreModuleDatastore module PreferencesDataSourceModule [androidJvm]@Moduleabstract class PreferencesDataSourceModulePreferences DataSource module"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.di/DatastoreModule</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/#datastoremodule","title":"DatastoreModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DatastoreModule</p> <p>Datastore module</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/#functions","title":"Functions","text":"Name Summary providePreferencesDataStore [androidJvm]@Singleton@Providesfun providePreferencesDataStore(appContext: Context, ioDispatcher: CoroutineDispatcher): DataStore&lt;UserData&gt;Provide preferences datastore"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/","title":"Provide preferences data store","text":"<p>//preferences/dev.atick.storage.preferences.di/DatastoreModule/providePreferencesDataStore</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/#providepreferencesdatastore","title":"providePreferencesDataStore","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun providePreferencesDataStore(appContext: Context, ioDispatcher: CoroutineDispatcher): DataStore&lt;UserData&gt;</p> <p>Provide preferences datastore</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/#return","title":"Return","text":"<p>DataStore</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext application context"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.di/PreferencesDataSourceModule</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/#preferencesdatasourcemodule","title":"PreferencesDataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class PreferencesDataSourceModule</p> <p>Preferences DataSource module</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/#constructors","title":"Constructors","text":"PreferencesDataSourceModule [androidJvm]constructor()"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/#functions","title":"Functions","text":"Name Summary bindUserPreferencesDataSource [androidJvm]@Binds@Singletonabstract fun bindUserPreferencesDataSource(userPreferencesDataSourceImpl: UserPreferencesDataSourceImpl): UserPreferencesDataSourceBind preferences datasource"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/-preferences-data-source-module/","title":"preferences data source module","text":"<p>//preferences/dev.atick.storage.preferences.di/PreferencesDataSourceModule/PreferencesDataSourceModule</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/-preferences-data-source-module/#preferencesdatasourcemodule","title":"PreferencesDataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/","title":"Bind user preferences data source","text":"<p>//preferences/dev.atick.storage.preferences.di/PreferencesDataSourceModule/bindUserPreferencesDataSource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#binduserpreferencesdatasource","title":"bindUserPreferencesDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindUserPreferencesDataSource(userPreferencesDataSourceImpl: UserPreferencesDataSourceImpl): UserPreferencesDataSource</p> <p>Bind preferences datasource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#return","title":"Return","text":"<p>UserPreferencesDataSource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSourceImpl PreferencesDatastoreImpl"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/#types","title":"Types","text":"Name Summary DarkThemeConfig [androidJvm]@Serializableenum DarkThemeConfig : Enum&lt;DarkThemeConfig&gt; Enum class representing configuration options for the dark theme. Profile [androidJvm]@Serializabledata class Profile(val id: String = String(), val name: String = String(), val profilePictureUriString: String? = null)Represents a user profile. ThemeBrand [androidJvm]@Serializableenum ThemeBrand : Enum&lt;ThemeBrand&gt; Enum class representing different brand options for the app's theme. UserData [androidJvm]@Serializabledata class UserData(val id: String = String(), val name: String = \"Anonymous\", val profilePictureUriString: String? = null, val language: String = \"en\", val themeBrand: ThemeBrand = ThemeBrand.DEFAULT, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, val useDynamicColor: Boolean = true)Represents user data."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#darkthemeconfig","title":"DarkThemeConfig","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum DarkThemeConfig : Enum&lt;DarkThemeConfig&gt; </p> <p>Enum class representing configuration options for the dark theme.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#entries","title":"Entries","text":"FOLLOW_SYSTEM [androidJvm]FOLLOW_SYSTEM LIGHT [androidJvm]LIGHT DARK [androidJvm]DARK"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;DarkThemeConfig&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): DarkThemeConfigReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;DarkThemeConfig&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/entries/","title":"Entries","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/entries</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;DarkThemeConfig&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/value-of/","title":"Value of","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/valueOf</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): DarkThemeConfig</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/values/","title":"Values","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/values</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;DarkThemeConfig&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-d-a-r-k/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/DARK</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-d-a-r-k/#dark","title":"DARK","text":"<p>[androidJvm]\\ DARK</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-d-a-r-k/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/FOLLOW_SYSTEM</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/#follow_system","title":"FOLLOW_SYSTEM","text":"<p>[androidJvm]\\ FOLLOW_SYSTEM</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-l-i-g-h-t/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/LIGHT</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-l-i-g-h-t/#light","title":"LIGHT","text":"<p>[androidJvm]\\ LIGHT</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-l-i-g-h-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class Profile(val id: String = String(), val name: String = String(), val profilePictureUriString: String? = null)</p> <p>Represents a user profile.</p> <p>This data class is used for storing information about a user's profile.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/#constructors","title":"Constructors","text":"Profile [androidJvm]constructor(id: String = String(), name: String = String(), profilePictureUriString: String? = null)"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: StringThe unique identifier for the profile. Defaults to empty if not provided. name [androidJvm]val name: StringThe name of the user. Defaults to empty if not provided. profilePictureUriString [androidJvm]val profilePictureUriString: String? = nullThe URI string for the user's profile picture, if available. Defaults to <code>null</code> if not provided."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/-profile/","title":"profile","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/Profile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ constructor(id: String = String(), name: String = String(), profilePictureUriString: String? = null)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/id/","title":"Id","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/id</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/name/","title":"Name","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/name</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/profile-picture-uri-string/","title":"Profile picture uri string","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/profilePictureUriString</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/profile-picture-uri-string/#profilepictureuristring","title":"profilePictureUriString","text":"<p>[androidJvm]\\ val profilePictureUriString: String? = null</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/ThemeBrand</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/#themebrand","title":"ThemeBrand","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum ThemeBrand : Enum&lt;ThemeBrand&gt; </p> <p>Enum class representing different brand options for the app's theme.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/#entries","title":"Entries","text":"DEFAULT [androidJvm]DEFAULT ANDROID [androidJvm]ANDROID"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;ThemeBrand&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): ThemeBrandReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;ThemeBrand&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/entries/","title":"Entries","text":"<p>//preferences/dev.atick.storage.preferences.models/ThemeBrand/entries</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;ThemeBrand&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/value-of/","title":"Value of","text":"<p>//preferences/dev.atick.storage.preferences.models/ThemeBrand/valueOf</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): ThemeBrand</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/values/","title":"Values","text":"<p>//preferences/dev.atick.storage.preferences.models/ThemeBrand/values</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;ThemeBrand&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/-a-n-d-r-o-i-d/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/ThemeBrand/ANDROID</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/-a-n-d-r-o-i-d/#android","title":"ANDROID","text":"<p>[androidJvm]\\ ANDROID</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/-a-n-d-r-o-i-d/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/-d-e-f-a-u-l-t/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/ThemeBrand/DEFAULT</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/-d-e-f-a-u-l-t/#default","title":"DEFAULT","text":"<p>[androidJvm]\\ DEFAULT</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-theme-brand/-d-e-f-a-u-l-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/#userdata","title":"UserData","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class UserData(val id: String = String(), val name: String = \"Anonymous\", val profilePictureUriString: String? = null, val language: String = \"en\", val themeBrand: ThemeBrand = ThemeBrand.DEFAULT, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, val useDynamicColor: Boolean = true)</p> <p>Represents user data.</p> <p>This data class is used to store information about a user, including their ID, name, profile picture URI string, preferred theme brand, dark theme configuration, and dynamic color preference.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/#constructors","title":"Constructors","text":"UserData [androidJvm]constructor(id: String = String(), name: String = \"Anonymous\", profilePictureUriString: String? = null, language: String = \"en\", themeBrand: ThemeBrand = ThemeBrand.DEFAULT, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, useDynamicColor: Boolean = true)"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/#properties","title":"Properties","text":"Name Summary darkThemeConfig [androidJvm]val darkThemeConfig: DarkThemeConfigThe user's preferred dark theme configuration. Defaults to DarkThemeConfig.FOLLOW_SYSTEM. id [androidJvm]val id: StringThe unique identifier for the user. Defaults to empty if not provided. language [androidJvm]val language: StringThe preferred language for the user. name [androidJvm]val name: StringThe name of the user. Defaults to \"No Name\" if not provided. profilePictureUriString [androidJvm]val profilePictureUriString: String? = nullThe URI string for the user's profile picture, if available. Defaults to <code>null</code> if not provided. themeBrand [androidJvm]val themeBrand: ThemeBrandThe preferred theme brand for the user. Defaults to ThemeBrand.DEFAULT. useDynamicColor [androidJvm]val useDynamicColor: Boolean = trueA boolean indicating whether the user prefers dynamic colors. Defaults to <code>true</code>."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/-user-data/","title":"user data","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/UserData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/-user-data/#userdata","title":"UserData","text":"<p>[androidJvm]\\ constructor(id: String = String(), name: String = \"Anonymous\", profilePictureUriString: String? = null, language: String = \"en\", themeBrand: ThemeBrand = ThemeBrand.DEFAULT, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, useDynamicColor: Boolean = true)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/dark-theme-config/","title":"Dark theme config","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/darkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/dark-theme-config/#darkthemeconfig","title":"darkThemeConfig","text":"<p>[androidJvm]\\ val darkThemeConfig: DarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/id/","title":"Id","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/id</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/language/","title":"Language","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/language</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/language/#language","title":"language","text":"<p>[androidJvm]\\ val language: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/name/","title":"Name","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/name</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/profile-picture-uri-string/","title":"Profile picture uri string","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/profilePictureUriString</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/profile-picture-uri-string/#profilepictureuristring","title":"profilePictureUriString","text":"<p>[androidJvm]\\ val profilePictureUriString: String? = null</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/theme-brand/","title":"Theme brand","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/themeBrand</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/theme-brand/#themebrand","title":"themeBrand","text":"<p>[androidJvm]\\ val themeBrand: ThemeBrand</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/use-dynamic-color/","title":"Use dynamic color","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/useDynamicColor</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/use-dynamic-color/#usedynamiccolor","title":"useDynamicColor","text":"<p>[androidJvm]\\ val useDynamicColor: Boolean = true</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/#types","title":"Types","text":"Name Summary DarkThemeConfigSerializer [androidJvm]object DarkThemeConfigSerializer : KSerializer&lt;DarkThemeConfig&gt; Custom serializer for serializing and deserializing DarkThemeConfig enums. ThemeBrandSerializer [androidJvm]object ThemeBrandSerializer : KSerializer&lt;ThemeBrand&gt; Custom serializer for serializing and deserializing ThemeBrand enums. UserDataSerializer [androidJvm]object UserDataSerializer : Serializer&lt;UserData&gt; Serializer implementation for serializing and deserializing UserData objects."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/#darkthemeconfigserializer","title":"DarkThemeConfigSerializer","text":"<p>[androidJvm]\\ object DarkThemeConfigSerializer : KSerializer&lt;DarkThemeConfig&gt; </p> <p>Custom serializer for serializing and deserializing DarkThemeConfig enums.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/#properties","title":"Properties","text":"Name Summary descriptor [androidJvm]open override val descriptor: SerialDescriptorThe descriptor for the serialized form of DarkThemeConfig."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/#functions","title":"Functions","text":"Name Summary deserialize [androidJvm]open override fun deserialize(decoder: Decoder): DarkThemeConfigDeserializes the string representation from the provided decoder and converts it to a DarkThemeConfig enum. serialize [androidJvm]open override fun serialize(encoder: Encoder, value: DarkThemeConfig)Serializes the provided value of DarkThemeConfig enum to a string representation."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/descriptor/","title":"Descriptor","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer/descriptor</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>[androidJvm]\\ open override val descriptor: SerialDescriptor</p> <p>The descriptor for the serialized form of DarkThemeConfig.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/","title":"Deserialize","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer/deserialize</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>[androidJvm]\\ open override fun deserialize(decoder: Decoder): DarkThemeConfig</p> <p>Deserializes the string representation from the provided decoder and converts it to a DarkThemeConfig enum.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/#return","title":"Return","text":"<p>The deserialized DarkThemeConfig enum value.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> decoder The decoder to read the serialized data from."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/serialize/","title":"Serialize","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer/serialize</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/serialize/#serialize","title":"serialize","text":"<p>[androidJvm]\\ open override fun serialize(encoder: Encoder, value: DarkThemeConfig)</p> <p>Serializes the provided value of DarkThemeConfig enum to a string representation.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/serialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> encoder The encoder to write the serialized data to. value The DarkThemeConfig value to be serialized."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils/ThemeBrandSerializer</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/#themebrandserializer","title":"ThemeBrandSerializer","text":"<p>[androidJvm]\\ object ThemeBrandSerializer : KSerializer&lt;ThemeBrand&gt; </p> <p>Custom serializer for serializing and deserializing ThemeBrand enums.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/#properties","title":"Properties","text":"Name Summary descriptor [androidJvm]open override val descriptor: SerialDescriptorThe descriptor for the serialized form of ThemeBrand."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/#functions","title":"Functions","text":"Name Summary deserialize [androidJvm]open override fun deserialize(decoder: Decoder): ThemeBrandDeserializes the string representation from the provided decoder and converts it to a ThemeBrand enum. serialize [androidJvm]open override fun serialize(encoder: Encoder, value: ThemeBrand)Serializes the provided value of ThemeBrand enum to a string representation."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/descriptor/","title":"Descriptor","text":"<p>//preferences/dev.atick.storage.preferences.utils/ThemeBrandSerializer/descriptor</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>[androidJvm]\\ open override val descriptor: SerialDescriptor</p> <p>The descriptor for the serialized form of ThemeBrand.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/deserialize/","title":"Deserialize","text":"<p>//preferences/dev.atick.storage.preferences.utils/ThemeBrandSerializer/deserialize</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>[androidJvm]\\ open override fun deserialize(decoder: Decoder): ThemeBrand</p> <p>Deserializes the string representation from the provided decoder and converts it to a ThemeBrand enum.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/deserialize/#return","title":"Return","text":"<p>The deserialized ThemeBrand enum value.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/deserialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> decoder The decoder to read the serialized data from."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/serialize/","title":"Serialize","text":"<p>//preferences/dev.atick.storage.preferences.utils/ThemeBrandSerializer/serialize</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/serialize/#serialize","title":"serialize","text":"<p>[androidJvm]\\ open override fun serialize(encoder: Encoder, value: ThemeBrand)</p> <p>Serializes the provided value of ThemeBrand enum to a string representation.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-theme-brand-serializer/serialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> encoder The encoder to write the serialized data to. value The ThemeBrand value to be serialized."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/#userdataserializer","title":"UserDataSerializer","text":"<p>[androidJvm]\\ object UserDataSerializer : Serializer&lt;UserData&gt; </p> <p>Serializer implementation for serializing and deserializing UserData objects.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/#properties","title":"Properties","text":"Name Summary defaultValue [androidJvm]open override val defaultValue: UserDataThe default value of UserData to be used when deserialization fails."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/#functions","title":"Functions","text":"Name Summary readFrom [androidJvm]open suspend override fun readFrom(input: InputStream): UserDataReads a UserData object from the provided InputStream. writeTo [androidJvm]open suspend override fun writeTo(t: UserData, output: OutputStream)Writes a UserData object to the provided OutputStream."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/default-value/","title":"Default value","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer/defaultValue</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/default-value/#defaultvalue","title":"defaultValue","text":"<p>[androidJvm]\\ open override val defaultValue: UserData</p> <p>The default value of UserData to be used when deserialization fails.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/","title":"Read from","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer/readFrom</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#readfrom","title":"readFrom","text":"<p>[androidJvm]\\ open suspend override fun readFrom(input: InputStream): UserData</p> <p>Reads a UserData object from the provided InputStream.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#return","title":"Return","text":"<p>The deserialized UserData object.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#parameters","title":"Parameters","text":"<p>androidJvm</p> input The input stream to read data from."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#throws","title":"Throws","text":"CorruptionException if there's an issue with deserialization."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/write-to/","title":"Write to","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer/writeTo</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/write-to/#writeto","title":"writeTo","text":"<p>[androidJvm]\\ open suspend override fun writeTo(t: UserData, output: OutputStream)</p> <p>Writes a UserData object to the provided OutputStream.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/write-to/#parameters","title":"Parameters","text":"<p>androidJvm</p> t The UserData object to be serialized. output The output stream to write data to."},{"location":"storage/room/","title":"Index","text":"<p>//room</p>"},{"location":"storage/room/#room","title":"room","text":""},{"location":"storage/room/#packages","title":"Packages","text":"Name dev.atick.storage.room.dao dev.atick.storage.room.data dev.atick.storage.room.di dev.atick.storage.room.models"},{"location":"storage/room/room/dev.atick.storage.room.dao/","title":"Index","text":"<p>//room/dev.atick.storage.room.dao</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.dao/#types","title":"Types","text":"Name Summary BudgetDao [androidJvm]interface BudgetDaoData Access Object (DAO) for the budgets table. ChatDao [androidJvm]interface ChatDaoData Access Object (DAO) for the messages table. ExpenseDao [androidJvm]interface ExpenseDaoData Access Object (DAO) for the expenses table."},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/","title":"Index","text":"<p>//room/dev.atick.storage.room.dao/BudgetDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/#budgetdao","title":"BudgetDao","text":"<p>[androidJvm]\\ interface BudgetDao</p> <p>Data Access Object (DAO) for the budgets table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/#functions","title":"Functions","text":"Name Summary deleteBudget [androidJvm]abstract suspend fun deleteBudget(budget: BudgetEntity)Deletes the given BudgetEntity from the budgets table. getBudgetForMonth [androidJvm]abstract fun getBudgetForMonth(month: Long): Flow&lt;BudgetEntity?&gt;Returns a Flow of BudgetEntity representing the budget for the given month. insertOrUpdateBudget [androidJvm]abstract suspend fun insertOrUpdateBudget(budget: BudgetEntity)Inserts or updates the given BudgetEntity in the budgets table."},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/delete-budget/","title":"Delete budget","text":"<p>//room/dev.atick.storage.room.dao/BudgetDao/deleteBudget</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/delete-budget/#deletebudget","title":"deleteBudget","text":"<p>[androidJvm]\\ abstract suspend fun deleteBudget(budget: BudgetEntity)</p> <p>Deletes the given BudgetEntity from the budgets table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/delete-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The BudgetEntity to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/get-budget-for-month/","title":"Get budget for month","text":"<p>//room/dev.atick.storage.room.dao/BudgetDao/getBudgetForMonth</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/get-budget-for-month/#getbudgetformonth","title":"getBudgetForMonth","text":"<p>[androidJvm]\\ abstract fun getBudgetForMonth(month: Long): Flow&lt;BudgetEntity?&gt;</p> <p>Returns a Flow of BudgetEntity representing the budget for the given month.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/get-budget-for-month/#return","title":"Return","text":"<p>A Flow of BudgetEntity representing the budget for the given month.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/get-budget-for-month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/insert-or-update-budget/","title":"Insert or update budget","text":"<p>//room/dev.atick.storage.room.dao/BudgetDao/insertOrUpdateBudget</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/insert-or-update-budget/#insertorupdatebudget","title":"insertOrUpdateBudget","text":"<p>[androidJvm]\\ abstract suspend fun insertOrUpdateBudget(budget: BudgetEntity)</p> <p>Inserts or updates the given BudgetEntity in the budgets table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-budget-dao/insert-or-update-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The BudgetEntity to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/","title":"Index","text":"<p>//room/dev.atick.storage.room.dao/ChatDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/#chatdao","title":"ChatDao","text":"<p>[androidJvm]\\ interface ChatDao</p> <p>Data Access Object (DAO) for the messages table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/#functions","title":"Functions","text":"Name Summary deleteAllMessages [androidJvm]abstract suspend fun deleteAllMessages()Deletes all the messages from the messages table. deleteMessage [androidJvm]abstract suspend fun deleteMessage(chatEntity: ChatEntity)Deletes the given ChatEntity from the messages table. getAllMessages [androidJvm]abstract fun getAllMessages(): Flow&lt;List&lt;ChatEntity&gt;&gt;Returns a Flow of ChatEntity representing all the messages in the messages table. getRecentMessages [androidJvm]abstract suspend fun getRecentMessages(limit: Int): List&lt;ChatEntity&gt;Returns a Flow of ChatEntity representing the message with the given ID. insertMessage [androidJvm]abstract suspend fun insertMessage(chatEntity: ChatEntity)Inserts the given ChatEntity in the messages table."},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/delete-all-messages/","title":"Delete all messages","text":"<p>//room/dev.atick.storage.room.dao/ChatDao/deleteAllMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/delete-all-messages/#deleteallmessages","title":"deleteAllMessages","text":"<p>[androidJvm]\\ abstract suspend fun deleteAllMessages()</p> <p>Deletes all the messages from the messages table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/delete-message/","title":"Delete message","text":"<p>//room/dev.atick.storage.room.dao/ChatDao/deleteMessage</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/delete-message/#deletemessage","title":"deleteMessage","text":"<p>[androidJvm]\\ abstract suspend fun deleteMessage(chatEntity: ChatEntity)</p> <p>Deletes the given ChatEntity from the messages table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/delete-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatEntity The ChatEntity to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-all-messages/","title":"Get all messages","text":"<p>//room/dev.atick.storage.room.dao/ChatDao/getAllMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-all-messages/#getallmessages","title":"getAllMessages","text":"<p>[androidJvm]\\ abstract fun getAllMessages(): Flow&lt;List&lt;ChatEntity&gt;&gt;</p> <p>Returns a Flow of ChatEntity representing all the messages in the messages table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-all-messages/#return","title":"Return","text":"<p>A Flow of ChatEntity representing all the messages in the messages table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-recent-messages/","title":"Get recent messages","text":"<p>//room/dev.atick.storage.room.dao/ChatDao/getRecentMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-recent-messages/#getrecentmessages","title":"getRecentMessages","text":"<p>[androidJvm]\\ abstract suspend fun getRecentMessages(limit: Int): List&lt;ChatEntity&gt;</p> <p>Returns a Flow of ChatEntity representing the message with the given ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-recent-messages/#return","title":"Return","text":"<p>A Flow of ChatEntity representing the message with the given ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/get-recent-messages/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the message to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/insert-message/","title":"Insert message","text":"<p>//room/dev.atick.storage.room.dao/ChatDao/insertMessage</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/insert-message/#insertmessage","title":"insertMessage","text":"<p>[androidJvm]\\ abstract suspend fun insertMessage(chatEntity: ChatEntity)</p> <p>Inserts the given ChatEntity in the messages table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-chat-dao/insert-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatEntity The ChatEntity to be inserted."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/","title":"Index","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/#expensedao","title":"ExpenseDao","text":"<p>[androidJvm]\\ interface ExpenseDao</p> <p>Data Access Object (DAO) for the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/#functions","title":"Functions","text":"Name Summary deleteExpense [androidJvm]abstract suspend fun deleteExpense(expense: ExpenseEntity)Deletes the given ExpenseEntity from the expenses table. getAllExpenses [androidJvm]abstract fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Get the list of all the expenses in the expenses table. getCategorySpending [androidJvm]abstract fun getCategorySpending(category: String, startDate: Long, endDate: Long): Flow&lt;Double?&gt;Get the total spending for the given category. getCumulativeExpenses [androidJvm]abstract fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;CumulativeExpense&gt;&gt;Get the cumulative expenses for the given date range. getExpenseById [androidJvm]abstract fun getExpenseById(id: Long): Flow&lt;ExpenseEntity?&gt;Get the expense with the given ID. getExpensesToBeCancelled [androidJvm]abstract fun getExpensesToBeCancelled(date: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Get the list of all the expenses to be cancelled in the expenses table. getLastExpenseTime [androidJvm]abstract suspend fun getLastExpenseTime(): Long? getLastPaymentDate [androidJvm]abstract suspend fun getLastPaymentDate(merchant: String): Long?Get the last payment date for the given merchant. getMerchantSpending [androidJvm]abstract fun getMerchantSpending(merchant: String, startDate: Long, endDate: Long): Flow&lt;Double?&gt;Get the total spending for the given merchant. getNextPaymentDate [androidJvm]abstract suspend fun getNextPaymentDate(merchant: String): Long?Get the next payment date for the given merchant. getRecurringExpenses [androidJvm]abstract fun getRecurringExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Get the list of all the recurring expenses in the expenses table. getTopExpensesByCategory [androidJvm]abstract fun getTopExpensesByCategory(startDate: Long, endDate: Long, n: Int = 5): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;Get top expenses by category for the given date range. getTopExpensesByMerchant [androidJvm]abstract fun getTopExpensesByMerchant(startDate: Long, endDate: Long, n: Int = 5): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;Get top expenses by merchant for the given date range. getTotalSpending [androidJvm]abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double?&gt;Get the total spending for a given date range. getUpcomingRecurringExpenses [androidJvm]abstract fun getUpcomingRecurringExpenses(date: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Get the list of all the upcoming recurring expenses in the expenses table. insertExpense [androidJvm]abstract suspend fun insertExpense(expense: ExpenseEntity): LongInserts the given ExpenseEntity in the expenses table. setCancellation [androidJvm]abstract suspend fun setCancellation(merchant: String, toBeCancelled: Boolean)Updates the cancellation status for the given merchant. setRecurringType [androidJvm]abstract suspend fun setRecurringType(merchant: String, recurringType: String, nextRecurringDate: Long)Set the recurring type and next recurring date for the given merchant. updateExpense [androidJvm]abstract suspend fun updateExpense(expense: ExpenseEntity)Updates or inserts the given ExpenseEntity in the expenses table."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/delete-expense/","title":"Delete expense","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/deleteExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/delete-expense/#deleteexpense","title":"deleteExpense","text":"<p>[androidJvm]\\ abstract suspend fun deleteExpense(expense: ExpenseEntity)</p> <p>Deletes the given ExpenseEntity from the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/delete-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-all-expenses/","title":"Get all expenses","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getAllExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-all-expenses/#getallexpenses","title":"getAllExpenses","text":"<p>[androidJvm]\\ abstract fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Get the list of all the expenses in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-all-expenses/#return","title":"Return","text":"<p>A Flow of ExpenseEntity list representing all the expenses in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-all-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the expenses to be retrieved. endDate The end date of the expenses to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-category-spending/","title":"Get category spending","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getCategorySpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-category-spending/#getcategoryspending","title":"getCategorySpending","text":"<p>[androidJvm]\\ abstract fun getCategorySpending(category: String, startDate: Long, endDate: Long): Flow&lt;Double?&gt;</p> <p>Get the total spending for the given category.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-category-spending/#return","title":"Return","text":"<p>A Flow of Double representing the total spending for the given category.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-category-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> category The category for which the total spending is to be retrieved. startDate The start date for the spending to be retrieved. endDate The end date for the spending to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-cumulative-expenses/","title":"Get cumulative expenses","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getCumulativeExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-cumulative-expenses/#getcumulativeexpenses","title":"getCumulativeExpenses","text":"<p>[androidJvm]\\ abstract fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;CumulativeExpense&gt;&gt;</p> <p>Get the cumulative expenses for the given date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-cumulative-expenses/#return","title":"Return","text":"<p>A Flow of CumulativeExpense list representing the cumulative expenses for the given date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-cumulative-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date for the cumulative expenses to be retrieved. endDate The end date for the cumulative expenses to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expense-by-id/","title":"Get expense by id","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getExpenseById</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expense-by-id/#getexpensebyid","title":"getExpenseById","text":"<p>[androidJvm]\\ abstract fun getExpenseById(id: Long): Flow&lt;ExpenseEntity?&gt;</p> <p>Get the expense with the given ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expense-by-id/#return","title":"Return","text":"<p>A Flow of ExpenseEntity representing the expense with the given ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expense-by-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the expense to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expenses-to-be-cancelled/","title":"Get expenses to be cancelled","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getExpensesToBeCancelled</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expenses-to-be-cancelled/#getexpensestobecancelled","title":"getExpensesToBeCancelled","text":"<p>[androidJvm]\\ abstract fun getExpensesToBeCancelled(date: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Get the list of all the expenses to be cancelled in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expenses-to-be-cancelled/#return","title":"Return","text":"<p>A Flow of ExpenseEntity list representing all the expenses to be cancelled in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-expenses-to-be-cancelled/#parameters","title":"Parameters","text":"<p>androidJvm</p> date The date for which the expenses to be cancelled are to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-last-expense-time/","title":"Get last expense time","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getLastExpenseTime</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-last-expense-time/#getlastexpensetime","title":"getLastExpenseTime","text":"<p>[androidJvm]\\ abstract suspend fun getLastExpenseTime(): Long?</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-last-payment-date/","title":"Get last payment date","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getLastPaymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-last-payment-date/#getlastpaymentdate","title":"getLastPaymentDate","text":"<p>[androidJvm]\\ abstract suspend fun getLastPaymentDate(merchant: String): Long?</p> <p>Get the last payment date for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-last-payment-date/#return","title":"Return","text":"<p>A Flow of Long representing the last payment date for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-last-payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the last payment date is to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-merchant-spending/","title":"Get merchant spending","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getMerchantSpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-merchant-spending/#getmerchantspending","title":"getMerchantSpending","text":"<p>[androidJvm]\\ abstract fun getMerchantSpending(merchant: String, startDate: Long, endDate: Long): Flow&lt;Double?&gt;</p> <p>Get the total spending for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-merchant-spending/#return","title":"Return","text":"<p>A Flow of Double representing the total spending for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-merchant-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the total spending is to be retrieved. startDate The start date for the spending to be retrieved. endDate The end date for the spending to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-next-payment-date/","title":"Get next payment date","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getNextPaymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-next-payment-date/#getnextpaymentdate","title":"getNextPaymentDate","text":"<p>[androidJvm]\\ abstract suspend fun getNextPaymentDate(merchant: String): Long?</p> <p>Get the next payment date for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-next-payment-date/#return","title":"Return","text":"<p>A Flow of Long representing the next payment date for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-next-payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the next payment date is to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-recurring-expenses/","title":"Get recurring expenses","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getRecurringExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-recurring-expenses/#getrecurringexpenses","title":"getRecurringExpenses","text":"<p>[androidJvm]\\ abstract fun getRecurringExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Get the list of all the recurring expenses in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-recurring-expenses/#return","title":"Return","text":"<p>A Flow of ExpenseEntity list representing all the recurring expenses in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-category/","title":"Get top expenses by category","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getTopExpensesByCategory</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-category/#gettopexpensesbycategory","title":"getTopExpensesByCategory","text":"<p>[androidJvm]\\ abstract fun getTopExpensesByCategory(startDate: Long, endDate: Long, n: Int = 5): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;</p> <p>Get top expenses by category for the given date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-category/#return","title":"Return","text":"<p>A Flow of ExpenseAnalysis list representing the top expenses by category.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-category/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date for the expenses to be retrieved. endDate The end date for the expenses to be retrieved. n The number of top expenses to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-merchant/","title":"Get top expenses by merchant","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getTopExpensesByMerchant</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-merchant/#gettopexpensesbymerchant","title":"getTopExpensesByMerchant","text":"<p>[androidJvm]\\ abstract fun getTopExpensesByMerchant(startDate: Long, endDate: Long, n: Int = 5): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;</p> <p>Get top expenses by merchant for the given date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-merchant/#return","title":"Return","text":"<p>A Flow of ExpenseAnalysis list representing the top expenses by merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-top-expenses-by-merchant/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date for the expenses to be retrieved. endDate The end date for the expenses to be retrieved. n The number of top expenses to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-total-spending/","title":"Get total spending","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getTotalSpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double?&gt;</p> <p>Get the total spending for a given date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-total-spending/#return","title":"Return","text":"<p>A Flow of Double representing the total spending for the given date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date for the spending to be retrieved. endDate The end date for the spending to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-upcoming-recurring-expenses/","title":"Get upcoming recurring expenses","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/getUpcomingRecurringExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-upcoming-recurring-expenses/#getupcomingrecurringexpenses","title":"getUpcomingRecurringExpenses","text":"<p>[androidJvm]\\ abstract fun getUpcomingRecurringExpenses(date: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Get the list of all the upcoming recurring expenses in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-upcoming-recurring-expenses/#return","title":"Return","text":"<p>A Flow of ExpenseEntity list representing all the upcoming recurring expenses in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/get-upcoming-recurring-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> date The date for which the upcoming recurring expenses are to be retrieved."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/insert-expense/","title":"Insert expense","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/insertExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/insert-expense/#insertexpense","title":"insertExpense","text":"<p>[androidJvm]\\ abstract suspend fun insertExpense(expense: ExpenseEntity): Long</p> <p>Inserts the given ExpenseEntity in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/insert-expense/#return","title":"Return","text":"<p>The ID of the inserted expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/insert-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity to be inserted."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/set-cancellation/","title":"Set cancellation","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/setCancellation</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/set-cancellation/#setcancellation","title":"setCancellation","text":"<p>[androidJvm]\\ abstract suspend fun setCancellation(merchant: String, toBeCancelled: Boolean)</p> <p>Updates the cancellation status for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/set-cancellation/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the cancellation status is to be updated. toBeCancelled The new cancellation status to be set."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/set-recurring-type/","title":"Set recurring type","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/setRecurringType</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/set-recurring-type/#setrecurringtype","title":"setRecurringType","text":"<p>[androidJvm]\\ abstract suspend fun setRecurringType(merchant: String, recurringType: String, nextRecurringDate: Long)</p> <p>Set the recurring type and next recurring date for the given merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/set-recurring-type/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The merchant for which the recurring type is to be set. recurringType The recurring type to be set. nextRecurringDate The next recurring date to be set."},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/update-expense/","title":"Update expense","text":"<p>//room/dev.atick.storage.room.dao/ExpenseDao/updateExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/update-expense/#updateexpense","title":"updateExpense","text":"<p>[androidJvm]\\ abstract suspend fun updateExpense(expense: ExpenseEntity)</p> <p>Updates or inserts the given ExpenseEntity in the expenses table.</p>"},{"location":"storage/room/room/dev.atick.storage.room.dao/-expense-dao/update-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity to be updated or inserted."},{"location":"storage/room/room/dev.atick.storage.room.data/","title":"Index","text":"<p>//room/dev.atick.storage.room.data</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.data/#types","title":"Types","text":"Name Summary AnalysisDataSource [androidJvm]interface AnalysisDataSourceInterface for accessing and analyzing expense data. AnalysisDataSourceImpl [androidJvm]class AnalysisDataSourceImpl@Injectconstructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher, coroutineScope: CoroutineScope) : AnalysisDataSourceImplementation of the AnalysisDataSource interface for accessing and analyzing expense data. BudgetDatabase [androidJvm]abstract class BudgetDatabase : RoomDatabaseRoom database for Budget. BudgetDataSource [androidJvm]interface BudgetDataSourceInterface for accessing and managing budget data. BudgetDataSourceImpl [androidJvm]class BudgetDataSourceImpl@Injectconstructor(budgetDao: BudgetDao, ioDispatcher: CoroutineDispatcher) : BudgetDataSourceImplementation of the BudgetDataSource interface for accessing and managing budget data. ChatDatabase [androidJvm]abstract class ChatDatabase : RoomDatabaseRoom database for Chat. ChatDataSource [androidJvm]interface ChatDataSourceInterface for accessing and managing chat messages. ChatDataSourceImpl [androidJvm]class ChatDataSourceImpl@Injectconstructor(chatDao: ChatDao) : ChatDataSourceImplementation of the ChatDataSource interface for accessing and managing chat messages. ExpenseDatabase [androidJvm]abstract class ExpenseDatabase : RoomDatabaseRoom database for Expense. ExpenseDataSource [androidJvm]interface ExpenseDataSourceInterface for accessing and managing expense data. ExpenseDataSourceImpl [androidJvm]class ExpenseDataSourceImpl@Injectconstructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher) : ExpenseDataSourceImplementation of the ExpenseDataSource interface for accessing and managing expense data."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/#analysisdatasource","title":"AnalysisDataSource","text":"<p>interface AnalysisDataSource</p> <p>Interface for accessing and analyzing expense data.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/#inheritors","title":"Inheritors","text":"AnalysisDataSourceImpl"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/#functions","title":"Functions","text":"Name Summary getCategoryAnalyses [androidJvm]abstract fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;Retrieves category analyses for expenses within a specified date range. getMerchantAnalyses [androidJvm]abstract fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;Retrieves merchant analyses for expenses within a specified date range. getTotalSpending [androidJvm]abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;Retrieves the total spending within a specified date range."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-category-analyses/","title":"Get category analyses","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSource/getCategoryAnalyses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-category-analyses/#getcategoryanalyses","title":"getCategoryAnalyses","text":"<p>[androidJvm]\\ abstract fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;</p> <p>Retrieves category analyses for expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-category-analyses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseAnalysis objects for the top categories.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-category-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch. topN The number of top categories to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-merchant-analyses/","title":"Get merchant analyses","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSource/getMerchantAnalyses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-merchant-analyses/#getmerchantanalyses","title":"getMerchantAnalyses","text":"<p>[androidJvm]\\ abstract fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;</p> <p>Retrieves merchant analyses for expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-merchant-analyses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseAnalysis objects for the top merchants.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-merchant-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch. topN The number of top merchants to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-total-spending/","title":"Get total spending","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSource/getTotalSpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;</p> <p>Retrieves the total spending within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-total-spending/#return","title":"Return","text":"<p>A Flow emitting the total spending as a Double.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/#analysisdatasourceimpl","title":"AnalysisDataSourceImpl","text":"<p>[androidJvm]\\ class AnalysisDataSourceImpl@Injectconstructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher, coroutineScope: CoroutineScope) : AnalysisDataSource</p> <p>Implementation of the AnalysisDataSource interface for accessing and analyzing expense data.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/#constructors","title":"Constructors","text":"AnalysisDataSourceImpl [androidJvm]@Injectconstructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher, coroutineScope: CoroutineScope)"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/#functions","title":"Functions","text":"Name Summary getCategoryAnalyses [androidJvm]open override fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;Retrieves category analyses for expenses within a specified date range. getMerchantAnalyses [androidJvm]open override fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;Retrieves merchant analyses for expenses within a specified date range. getTotalSpending [androidJvm]open override fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;Retrieves the total spending within a specified date range."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/-analysis-data-source-impl/","title":"analysis data source impl","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSourceImpl/AnalysisDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/-analysis-data-source-impl/#analysisdatasourceimpl","title":"AnalysisDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher, coroutineScope: CoroutineScope)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-category-analyses/","title":"Get category analyses","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSourceImpl/getCategoryAnalyses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-category-analyses/#getcategoryanalyses","title":"getCategoryAnalyses","text":"<p>[androidJvm]\\ open override fun getCategoryAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;</p> <p>Retrieves category analyses for expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-category-analyses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseAnalysis objects for the top categories.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-category-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch. topN The number of top categories to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-merchant-analyses/","title":"Get merchant analyses","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSourceImpl/getMerchantAnalyses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-merchant-analyses/#getmerchantanalyses","title":"getMerchantAnalyses","text":"<p>[androidJvm]\\ open override fun getMerchantAnalyses(startDate: Long, endDate: Long, topN: Int): Flow&lt;List&lt;ExpenseAnalysis&gt;&gt;</p> <p>Retrieves merchant analyses for expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-merchant-analyses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseAnalysis objects for the top merchants.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-merchant-analyses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch. topN The number of top merchants to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-total-spending/","title":"Get total spending","text":"<p>//room/dev.atick.storage.room.data/AnalysisDataSourceImpl/getTotalSpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ open override fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;</p> <p>Retrieves the total spending within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-total-spending/#return","title":"Return","text":"<p>A Flow emitting the total spending as a Double.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-analysis-data-source-impl/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/#budgetdatasource","title":"BudgetDataSource","text":"<p>interface BudgetDataSource</p> <p>Interface for accessing and managing budget data.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/#inheritors","title":"Inheritors","text":"BudgetDataSourceImpl"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/#functions","title":"Functions","text":"Name Summary deleteBudget [androidJvm]abstract suspend fun deleteBudget(budget: BudgetEntity)Deletes a budget from the data source. getBudgetForMonth [androidJvm]abstract fun getBudgetForMonth(month: Long): Flow&lt;BudgetEntity?&gt;Retrieves the budget for a specific month. insertOrUpdateBudget [androidJvm]abstract suspend fun insertOrUpdateBudget(budget: BudgetEntity)Inserts or updates a budget in the data source."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/delete-budget/","title":"Delete budget","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSource/deleteBudget</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/delete-budget/#deletebudget","title":"deleteBudget","text":"<p>[androidJvm]\\ abstract suspend fun deleteBudget(budget: BudgetEntity)</p> <p>Deletes a budget from the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/delete-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The BudgetEntity to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/get-budget-for-month/","title":"Get budget for month","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSource/getBudgetForMonth</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/get-budget-for-month/#getbudgetformonth","title":"getBudgetForMonth","text":"<p>[androidJvm]\\ abstract fun getBudgetForMonth(month: Long): Flow&lt;BudgetEntity?&gt;</p> <p>Retrieves the budget for a specific month.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/get-budget-for-month/#return","title":"Return","text":"<p>A Flow emitting the BudgetEntity for the specified month, or null if no budget is found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/get-budget-for-month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is to be retrieved, represented as milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/insert-or-update-budget/","title":"Insert or update budget","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSource/insertOrUpdateBudget</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/insert-or-update-budget/#insertorupdatebudget","title":"insertOrUpdateBudget","text":"<p>[androidJvm]\\ abstract suspend fun insertOrUpdateBudget(budget: BudgetEntity)</p> <p>Inserts or updates a budget in the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source/insert-or-update-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The BudgetEntity to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/#budgetdatasourceimpl","title":"BudgetDataSourceImpl","text":"<p>[androidJvm]\\ class BudgetDataSourceImpl@Injectconstructor(budgetDao: BudgetDao, ioDispatcher: CoroutineDispatcher) : BudgetDataSource</p> <p>Implementation of the BudgetDataSource interface for accessing and managing budget data.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/#constructors","title":"Constructors","text":"BudgetDataSourceImpl [androidJvm]@Injectconstructor(budgetDao: BudgetDao, ioDispatcher: CoroutineDispatcher)"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/#functions","title":"Functions","text":"Name Summary deleteBudget [androidJvm]open suspend override fun deleteBudget(budget: BudgetEntity)Deletes a budget from the data source. getBudgetForMonth [androidJvm]open override fun getBudgetForMonth(month: Long): Flow&lt;BudgetEntity?&gt;Retrieves the budget for a specific month. insertOrUpdateBudget [androidJvm]open suspend override fun insertOrUpdateBudget(budget: BudgetEntity)Inserts or updates a budget in the data source."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/-budget-data-source-impl/","title":"budget data source impl","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSourceImpl/BudgetDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/-budget-data-source-impl/#budgetdatasourceimpl","title":"BudgetDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(budgetDao: BudgetDao, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/delete-budget/","title":"Delete budget","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSourceImpl/deleteBudget</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/delete-budget/#deletebudget","title":"deleteBudget","text":"<p>[androidJvm]\\ open suspend override fun deleteBudget(budget: BudgetEntity)</p> <p>Deletes a budget from the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/delete-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The BudgetEntity to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/get-budget-for-month/","title":"Get budget for month","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSourceImpl/getBudgetForMonth</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/get-budget-for-month/#getbudgetformonth","title":"getBudgetForMonth","text":"<p>[androidJvm]\\ open override fun getBudgetForMonth(month: Long): Flow&lt;BudgetEntity?&gt;</p> <p>Retrieves the budget for a specific month.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/get-budget-for-month/#return","title":"Return","text":"<p>A Flow emitting the BudgetEntity for the specified month, or null if no budget is found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/get-budget-for-month/#parameters","title":"Parameters","text":"<p>androidJvm</p> month The month for which the budget is to be retrieved, represented as milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/insert-or-update-budget/","title":"Insert or update budget","text":"<p>//room/dev.atick.storage.room.data/BudgetDataSourceImpl/insertOrUpdateBudget</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/insert-or-update-budget/#insertorupdatebudget","title":"insertOrUpdateBudget","text":"<p>[androidJvm]\\ open suspend override fun insertOrUpdateBudget(budget: BudgetEntity)</p> <p>Inserts or updates a budget in the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-data-source-impl/insert-or-update-budget/#parameters","title":"Parameters","text":"<p>androidJvm</p> budget The BudgetEntity to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/BudgetDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/#budgetdatabase","title":"BudgetDatabase","text":"<p>[androidJvm]\\ abstract class BudgetDatabase : RoomDatabase</p> <p>Room database for Budget.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/#constructors","title":"Constructors","text":"BudgetDatabase [androidJvm]constructor()"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/#properties","title":"Properties","text":"Name Summary backingFieldMap [androidJvm]val backingFieldMap: MutableMap&lt;String, Any&gt; invalidationTracker [androidJvm]open val invalidationTracker: InvalidationTracker isOpen [androidJvm]open val isOpen: Boolean isOpenInternal [androidJvm]val isOpenInternal: Boolean openHelper [androidJvm]open val openHelper: SupportSQLiteOpenHelper queryExecutor [androidJvm]open val queryExecutor: Executor suspendingTransactionId [androidJvm]val suspendingTransactionId: ThreadLocal&lt;Int&gt; transactionExecutor [androidJvm]open val transactionExecutor: Executor"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/#functions","title":"Functions","text":"Name Summary assertNotMainThread [androidJvm]open fun assertNotMainThread() assertNotSuspendingTransaction [androidJvm]open fun assertNotSuspendingTransaction() beginTransaction [androidJvm]open fun ~~beginTransaction~~() clearAllTables [androidJvm]abstract fun clearAllTables() close [androidJvm]open fun close() compileStatement [androidJvm]open fun compileStatement(sql: String): SupportSQLiteStatement endTransaction [androidJvm]open fun ~~endTransaction~~() getAutoMigrations [androidJvm]open fun getAutoMigrations(autoMigrationSpecs: Map&lt;Class&lt;out AutoMigrationSpec&gt;, AutoMigrationSpec&gt;): List&lt;Migration&gt; getBudgetDao [androidJvm]abstract fun getBudgetDao(): BudgetDaoGet the data access object for BudgetEntity entity. getRequiredAutoMigrationSpecs [androidJvm]open fun getRequiredAutoMigrationSpecs(): Set&lt;Class&lt;out AutoMigrationSpec&gt;&gt; getTypeConverter [androidJvm]open fun &lt;T&gt; getTypeConverter(klass: Class&lt;T&gt;): T? init [androidJvm]open fun init(configuration: DatabaseConfiguration) inTransaction [androidJvm]open fun inTransaction(): Boolean query [androidJvm]open fun query(query: SupportSQLiteQuery, signal: CancellationSignal?): Cursoropen fun query(query: String, args: Array&lt;out Any?&gt;?): Cursor runInTransaction [androidJvm]open fun runInTransaction(body: Runnable)open fun &lt;V&gt; runInTransaction(body: Callable&lt;V&gt;): V setTransactionSuccessful [androidJvm]open fun ~~setTransactionSuccessful~~()"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/-budget-database/","title":"budget database","text":"<p>//room/dev.atick.storage.room.data/BudgetDatabase/BudgetDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/-budget-database/#budgetdatabase","title":"BudgetDatabase","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/get-budget-dao/","title":"Get budget dao","text":"<p>//room/dev.atick.storage.room.data/BudgetDatabase/getBudgetDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/get-budget-dao/#getbudgetdao","title":"getBudgetDao","text":"<p>[androidJvm]\\ abstract fun getBudgetDao(): BudgetDao</p> <p>Get the data access object for BudgetEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-budget-database/get-budget-dao/#return","title":"Return","text":"<p>The data access object for BudgetEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/ChatDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/#chatdatasource","title":"ChatDataSource","text":"<p>interface ChatDataSource</p> <p>Interface for accessing and managing chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/#inheritors","title":"Inheritors","text":"ChatDataSourceImpl"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/#functions","title":"Functions","text":"Name Summary deleteAllMessages [androidJvm]abstract suspend fun deleteAllMessages()Deletes all chat messages. deleteMessage [androidJvm]abstract suspend fun deleteMessage(chatEntity: ChatEntity)Deletes a specific chat message. getAllMessages [androidJvm]abstract fun getAllMessages(): Flow&lt;List&lt;ChatEntity&gt;&gt;Retrieves all chat messages. getRecentMessages [androidJvm]abstract suspend fun getRecentMessages(limit: Int): List&lt;ChatEntity&gt;Retrieves a limited number of recent chat messages. insertMessage [androidJvm]abstract suspend fun insertMessage(chatEntity: ChatEntity)Inserts a new chat message."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/delete-all-messages/","title":"Delete all messages","text":"<p>//room/dev.atick.storage.room.data/ChatDataSource/deleteAllMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/delete-all-messages/#deleteallmessages","title":"deleteAllMessages","text":"<p>[androidJvm]\\ abstract suspend fun deleteAllMessages()</p> <p>Deletes all chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/delete-message/","title":"Delete message","text":"<p>//room/dev.atick.storage.room.data/ChatDataSource/deleteMessage</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/delete-message/#deletemessage","title":"deleteMessage","text":"<p>[androidJvm]\\ abstract suspend fun deleteMessage(chatEntity: ChatEntity)</p> <p>Deletes a specific chat message.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/delete-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatEntity The ChatEntity object representing the message to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-all-messages/","title":"Get all messages","text":"<p>//room/dev.atick.storage.room.data/ChatDataSource/getAllMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-all-messages/#getallmessages","title":"getAllMessages","text":"<p>[androidJvm]\\ abstract fun getAllMessages(): Flow&lt;List&lt;ChatEntity&gt;&gt;</p> <p>Retrieves all chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-all-messages/#return","title":"Return","text":"<p>A Flow emitting a list of ChatEntity objects representing all chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-recent-messages/","title":"Get recent messages","text":"<p>//room/dev.atick.storage.room.data/ChatDataSource/getRecentMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-recent-messages/#getrecentmessages","title":"getRecentMessages","text":"<p>[androidJvm]\\ abstract suspend fun getRecentMessages(limit: Int): List&lt;ChatEntity&gt;</p> <p>Retrieves a limited number of recent chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-recent-messages/#return","title":"Return","text":"<p>A list of ChatEntity objects representing the recent chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/get-recent-messages/#parameters","title":"Parameters","text":"<p>androidJvm</p> limit The maximum number of recent messages to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/insert-message/","title":"Insert message","text":"<p>//room/dev.atick.storage.room.data/ChatDataSource/insertMessage</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/insert-message/#insertmessage","title":"insertMessage","text":"<p>[androidJvm]\\ abstract suspend fun insertMessage(chatEntity: ChatEntity)</p> <p>Inserts a new chat message.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source/insert-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatEntity The ChatEntity object representing the message to be inserted."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/#chatdatasourceimpl","title":"ChatDataSourceImpl","text":"<p>[androidJvm]\\ class ChatDataSourceImpl@Injectconstructor(chatDao: ChatDao) : ChatDataSource</p> <p>Implementation of the ChatDataSource interface for accessing and managing chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/#constructors","title":"Constructors","text":"ChatDataSourceImpl [androidJvm]@Injectconstructor(chatDao: ChatDao)"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/#functions","title":"Functions","text":"Name Summary deleteAllMessages [androidJvm]open suspend override fun deleteAllMessages()Deletes all chat messages. deleteMessage [androidJvm]open suspend override fun deleteMessage(chatEntity: ChatEntity)Deletes a specific chat message. getAllMessages [androidJvm]open override fun getAllMessages(): Flow&lt;List&lt;ChatEntity&gt;&gt;Retrieves all chat messages. getRecentMessages [androidJvm]open suspend override fun getRecentMessages(limit: Int): List&lt;ChatEntity&gt;Retrieves a limited number of recent chat messages. insertMessage [androidJvm]open suspend override fun insertMessage(chatEntity: ChatEntity)Inserts a new chat message."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/-chat-data-source-impl/","title":"chat data source impl","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl/ChatDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/-chat-data-source-impl/#chatdatasourceimpl","title":"ChatDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(chatDao: ChatDao)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/delete-all-messages/","title":"Delete all messages","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl/deleteAllMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/delete-all-messages/#deleteallmessages","title":"deleteAllMessages","text":"<p>[androidJvm]\\ open suspend override fun deleteAllMessages()</p> <p>Deletes all chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/delete-message/","title":"Delete message","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl/deleteMessage</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/delete-message/#deletemessage","title":"deleteMessage","text":"<p>[androidJvm]\\ open suspend override fun deleteMessage(chatEntity: ChatEntity)</p> <p>Deletes a specific chat message.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/delete-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatEntity The ChatEntity object representing the message to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-all-messages/","title":"Get all messages","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl/getAllMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-all-messages/#getallmessages","title":"getAllMessages","text":"<p>[androidJvm]\\ open override fun getAllMessages(): Flow&lt;List&lt;ChatEntity&gt;&gt;</p> <p>Retrieves all chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-all-messages/#return","title":"Return","text":"<p>A Flow emitting a list of ChatEntity objects representing all chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-recent-messages/","title":"Get recent messages","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl/getRecentMessages</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-recent-messages/#getrecentmessages","title":"getRecentMessages","text":"<p>[androidJvm]\\ open suspend override fun getRecentMessages(limit: Int): List&lt;ChatEntity&gt;</p> <p>Retrieves a limited number of recent chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-recent-messages/#return","title":"Return","text":"<p>A list of ChatEntity objects representing the recent chat messages.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/get-recent-messages/#parameters","title":"Parameters","text":"<p>androidJvm</p> limit The maximum number of recent messages to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/insert-message/","title":"Insert message","text":"<p>//room/dev.atick.storage.room.data/ChatDataSourceImpl/insertMessage</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/insert-message/#insertmessage","title":"insertMessage","text":"<p>[androidJvm]\\ open suspend override fun insertMessage(chatEntity: ChatEntity)</p> <p>Inserts a new chat message.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-data-source-impl/insert-message/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatEntity The ChatEntity object representing the message to be inserted."},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/ChatDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/#chatdatabase","title":"ChatDatabase","text":"<p>[androidJvm]\\ abstract class ChatDatabase : RoomDatabase</p> <p>Room database for Chat.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/#constructors","title":"Constructors","text":"ChatDatabase [androidJvm]constructor()"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/#properties","title":"Properties","text":"Name Summary backingFieldMap [androidJvm]val backingFieldMap: MutableMap&lt;String, Any&gt; invalidationTracker [androidJvm]open val invalidationTracker: InvalidationTracker isOpen [androidJvm]open val isOpen: Boolean isOpenInternal [androidJvm]val isOpenInternal: Boolean openHelper [androidJvm]open val openHelper: SupportSQLiteOpenHelper queryExecutor [androidJvm]open val queryExecutor: Executor suspendingTransactionId [androidJvm]val suspendingTransactionId: ThreadLocal&lt;Int&gt; transactionExecutor [androidJvm]open val transactionExecutor: Executor"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/#functions","title":"Functions","text":"Name Summary assertNotMainThread [androidJvm]open fun assertNotMainThread() assertNotSuspendingTransaction [androidJvm]open fun assertNotSuspendingTransaction() beginTransaction [androidJvm]open fun ~~beginTransaction~~() clearAllTables [androidJvm]abstract fun clearAllTables() close [androidJvm]open fun close() compileStatement [androidJvm]open fun compileStatement(sql: String): SupportSQLiteStatement endTransaction [androidJvm]open fun ~~endTransaction~~() getAutoMigrations [androidJvm]open fun getAutoMigrations(autoMigrationSpecs: Map&lt;Class&lt;out AutoMigrationSpec&gt;, AutoMigrationSpec&gt;): List&lt;Migration&gt; getChatDao [androidJvm]abstract fun getChatDao(): ChatDaoGet the data access object for ChatEntity entity. getRequiredAutoMigrationSpecs [androidJvm]open fun getRequiredAutoMigrationSpecs(): Set&lt;Class&lt;out AutoMigrationSpec&gt;&gt; getTypeConverter [androidJvm]open fun &lt;T&gt; getTypeConverter(klass: Class&lt;T&gt;): T? init [androidJvm]open fun init(configuration: DatabaseConfiguration) inTransaction [androidJvm]open fun inTransaction(): Boolean query [androidJvm]open fun query(query: SupportSQLiteQuery, signal: CancellationSignal?): Cursoropen fun query(query: String, args: Array&lt;out Any?&gt;?): Cursor runInTransaction [androidJvm]open fun runInTransaction(body: Runnable)open fun &lt;V&gt; runInTransaction(body: Callable&lt;V&gt;): V setTransactionSuccessful [androidJvm]open fun ~~setTransactionSuccessful~~()"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/-chat-database/","title":"chat database","text":"<p>//room/dev.atick.storage.room.data/ChatDatabase/ChatDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/-chat-database/#chatdatabase","title":"ChatDatabase","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/get-chat-dao/","title":"Get chat dao","text":"<p>//room/dev.atick.storage.room.data/ChatDatabase/getChatDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/get-chat-dao/#getchatdao","title":"getChatDao","text":"<p>[androidJvm]\\ abstract fun getChatDao(): ChatDao</p> <p>Get the data access object for ChatEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-chat-database/get-chat-dao/#return","title":"Return","text":"<p>The data access object for ChatEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/#expensedatasource","title":"ExpenseDataSource","text":"<p>interface ExpenseDataSource</p> <p>Interface for accessing and managing expense data.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/#inheritors","title":"Inheritors","text":"ExpenseDataSourceImpl"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/#functions","title":"Functions","text":"Name Summary deleteExpense [androidJvm]abstract suspend fun deleteExpense(expense: ExpenseEntity)Deletes an expense from the data source. getAllExpenses [androidJvm]abstract fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Retrieves all expenses within a specified date range. getCumulativeExpenses [androidJvm]abstract fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;CumulativeExpense&gt;&gt;Retrieves cumulative expenses within a specified date range. getExpenseById [androidJvm]abstract fun getExpenseById(id: Long): Flow&lt;ExpenseEntity?&gt;Retrieves an expense by its ID. getLastExpenseTime [androidJvm]abstract suspend fun getLastExpenseTime(): LongRetrieves the time of the last expense. getLastPaymentDate [androidJvm]abstract suspend fun getLastPaymentDate(merchant: String): LongRetrieves the last payment date for a specific merchant. getNextPaymentDate [androidJvm]abstract suspend fun getNextPaymentDate(merchant: String): Long?Retrieves the next payment date for a specific merchant. getRecurringExpenses [androidJvm]abstract fun getRecurringExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Retrieves all recurring expenses. getTotalSpending [androidJvm]abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;Retrieves the total spending within a specified date range. insertExpense [androidJvm]abstract suspend fun insertExpense(expense: ExpenseEntity): LongInserts a new expense into the data source. setCancellation [androidJvm]abstract suspend fun setCancellation(merchant: String, toBeCancelled: Boolean)Sets the cancellation status for a specific merchant. setRecurringPayment [androidJvm]abstract suspend fun setRecurringPayment(merchant: String, recurringType: String, nextRecurringDate: Long)Sets a recurring payment for a specific merchant. updateExpense [androidJvm]abstract suspend fun updateExpense(expense: ExpenseEntity)Updates an existing expense in the data source."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/delete-expense/","title":"Delete expense","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/deleteExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/delete-expense/#deleteexpense","title":"deleteExpense","text":"<p>[androidJvm]\\ abstract suspend fun deleteExpense(expense: ExpenseEntity)</p> <p>Deletes an expense from the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/delete-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity object representing the expense to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-all-expenses/","title":"Get all expenses","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getAllExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-all-expenses/#getallexpenses","title":"getAllExpenses","text":"<p>[androidJvm]\\ abstract fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Retrieves all expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-all-expenses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseEntity objects within the specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-all-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-cumulative-expenses/","title":"Get cumulative expenses","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getCumulativeExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-cumulative-expenses/#getcumulativeexpenses","title":"getCumulativeExpenses","text":"<p>[androidJvm]\\ abstract fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;CumulativeExpense&gt;&gt;</p> <p>Retrieves cumulative expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-cumulative-expenses/#return","title":"Return","text":"<p>A Flow emitting a list of CumulativeExpense objects within the specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-cumulative-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-expense-by-id/","title":"Get expense by id","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getExpenseById</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-expense-by-id/#getexpensebyid","title":"getExpenseById","text":"<p>[androidJvm]\\ abstract fun getExpenseById(id: Long): Flow&lt;ExpenseEntity?&gt;</p> <p>Retrieves an expense by its ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-expense-by-id/#return","title":"Return","text":"<p>A Flow emitting the ExpenseEntity object with the specified ID, or null if not found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-expense-by-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the expense to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-expense-time/","title":"Get last expense time","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getLastExpenseTime</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-expense-time/#getlastexpensetime","title":"getLastExpenseTime","text":"<p>[androidJvm]\\ abstract suspend fun getLastExpenseTime(): Long</p> <p>Retrieves the time of the last expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-expense-time/#return","title":"Return","text":"<p>The time of the last expense in milliseconds since epoch.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-payment-date/","title":"Get last payment date","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getLastPaymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-payment-date/#getlastpaymentdate","title":"getLastPaymentDate","text":"<p>[androidJvm]\\ abstract suspend fun getLastPaymentDate(merchant: String): Long</p> <p>Retrieves the last payment date for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-payment-date/#return","title":"Return","text":"<p>The last payment date in milliseconds since epoch.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-last-payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-next-payment-date/","title":"Get next payment date","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getNextPaymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-next-payment-date/#getnextpaymentdate","title":"getNextPaymentDate","text":"<p>[androidJvm]\\ abstract suspend fun getNextPaymentDate(merchant: String): Long?</p> <p>Retrieves the next payment date for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-next-payment-date/#return","title":"Return","text":"<p>The next payment date in milliseconds since epoch, or null if not found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-next-payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-recurring-expenses/","title":"Get recurring expenses","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getRecurringExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-recurring-expenses/#getrecurringexpenses","title":"getRecurringExpenses","text":"<p>[androidJvm]\\ abstract fun getRecurringExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Retrieves all recurring expenses.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-recurring-expenses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseEntity objects that are recurring.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-total-spending/","title":"Get total spending","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/getTotalSpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ abstract fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;</p> <p>Retrieves the total spending within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-total-spending/#return","title":"Return","text":"<p>A Flow emitting the total spending as a Double.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/insert-expense/","title":"Insert expense","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/insertExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/insert-expense/#insertexpense","title":"insertExpense","text":"<p>[androidJvm]\\ abstract suspend fun insertExpense(expense: ExpenseEntity): Long</p> <p>Inserts a new expense into the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/insert-expense/#return","title":"Return","text":"<p>The ID of the newly inserted expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/insert-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity object representing the expense to be inserted."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/set-cancellation/","title":"Set cancellation","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/setCancellation</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/set-cancellation/#setcancellation","title":"setCancellation","text":"<p>[androidJvm]\\ abstract suspend fun setCancellation(merchant: String, toBeCancelled: Boolean)</p> <p>Sets the cancellation status for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/set-cancellation/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant. toBeCancelled The cancellation status to be set."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/set-recurring-payment/","title":"Set recurring payment","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/setRecurringPayment</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/set-recurring-payment/#setrecurringpayment","title":"setRecurringPayment","text":"<p>[androidJvm]\\ abstract suspend fun setRecurringPayment(merchant: String, recurringType: String, nextRecurringDate: Long)</p> <p>Sets a recurring payment for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/set-recurring-payment/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant. recurringType The type of recurring payment. nextRecurringDate The next recurring date in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/update-expense/","title":"Update expense","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSource/updateExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/update-expense/#updateexpense","title":"updateExpense","text":"<p>[androidJvm]\\ abstract suspend fun updateExpense(expense: ExpenseEntity)</p> <p>Updates an existing expense in the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source/update-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity object representing the expense to be updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/#expensedatasourceimpl","title":"ExpenseDataSourceImpl","text":"<p>[androidJvm]\\ class ExpenseDataSourceImpl@Injectconstructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher) : ExpenseDataSource</p> <p>Implementation of the ExpenseDataSource interface for accessing and managing expense data.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/#constructors","title":"Constructors","text":"ExpenseDataSourceImpl [androidJvm]@Injectconstructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher)"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/#functions","title":"Functions","text":"Name Summary deleteExpense [androidJvm]open suspend override fun deleteExpense(expense: ExpenseEntity)Deletes an expense from the data source. getAllExpenses [androidJvm]open override fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Retrieves all expenses within a specified date range. getCumulativeExpenses [androidJvm]open override fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;CumulativeExpense&gt;&gt;Retrieves cumulative expenses within a specified date range. getExpenseById [androidJvm]open override fun getExpenseById(id: Long): Flow&lt;ExpenseEntity?&gt;Retrieves an expense by its ID. getLastExpenseTime [androidJvm]open suspend override fun getLastExpenseTime(): LongRetrieves the time of the last expense. getLastPaymentDate [androidJvm]open suspend override fun getLastPaymentDate(merchant: String): LongRetrieves the last payment date for a specific merchant. getNextPaymentDate [androidJvm]open suspend override fun getNextPaymentDate(merchant: String): Long?Retrieves the next payment date for a specific merchant. getRecurringExpenses [androidJvm]open override fun getRecurringExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;Retrieves all recurring expenses. getTotalSpending [androidJvm]open override fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;Retrieves the total spending within a specified date range. insertExpense [androidJvm]open suspend override fun insertExpense(expense: ExpenseEntity): LongInserts a new expense into the data source. setCancellation [androidJvm]open suspend override fun setCancellation(merchant: String, toBeCancelled: Boolean)Sets the cancellation status for a specific merchant. setRecurringPayment [androidJvm]open suspend override fun setRecurringPayment(merchant: String, recurringType: String, nextRecurringDate: Long)Sets a recurring payment for a specific merchant. updateExpense [androidJvm]open suspend override fun updateExpense(expense: ExpenseEntity)Updates an existing expense in the data source."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/-expense-data-source-impl/","title":"expense data source impl","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/ExpenseDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/-expense-data-source-impl/#expensedatasourceimpl","title":"ExpenseDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(expenseDao: ExpenseDao, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/delete-expense/","title":"Delete expense","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/deleteExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/delete-expense/#deleteexpense","title":"deleteExpense","text":"<p>[androidJvm]\\ open suspend override fun deleteExpense(expense: ExpenseEntity)</p> <p>Deletes an expense from the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/delete-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity object representing the expense to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-all-expenses/","title":"Get all expenses","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getAllExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-all-expenses/#getallexpenses","title":"getAllExpenses","text":"<p>[androidJvm]\\ open override fun getAllExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Retrieves all expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-all-expenses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseEntity objects representing the expenses within the specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-all-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-cumulative-expenses/","title":"Get cumulative expenses","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getCumulativeExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-cumulative-expenses/#getcumulativeexpenses","title":"getCumulativeExpenses","text":"<p>[androidJvm]\\ open override fun getCumulativeExpenses(startDate: Long, endDate: Long): Flow&lt;List&lt;CumulativeExpense&gt;&gt;</p> <p>Retrieves cumulative expenses within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-cumulative-expenses/#return","title":"Return","text":"<p>A Flow emitting a list of CumulativeExpense objects within the specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-cumulative-expenses/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-expense-by-id/","title":"Get expense by id","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getExpenseById</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-expense-by-id/#getexpensebyid","title":"getExpenseById","text":"<p>[androidJvm]\\ open override fun getExpenseById(id: Long): Flow&lt;ExpenseEntity?&gt;</p> <p>Retrieves an expense by its ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-expense-by-id/#return","title":"Return","text":"<p>A Flow emitting the ExpenseEntity object with the specified ID, or null if not found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-expense-by-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the expense to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-expense-time/","title":"Get last expense time","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getLastExpenseTime</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-expense-time/#getlastexpensetime","title":"getLastExpenseTime","text":"<p>[androidJvm]\\ open suspend override fun getLastExpenseTime(): Long</p> <p>Retrieves the time of the last expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-expense-time/#return","title":"Return","text":"<p>The time of the last expense in milliseconds since epoch.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-payment-date/","title":"Get last payment date","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getLastPaymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-payment-date/#getlastpaymentdate","title":"getLastPaymentDate","text":"<p>[androidJvm]\\ open suspend override fun getLastPaymentDate(merchant: String): Long</p> <p>Retrieves the last payment date for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-payment-date/#return","title":"Return","text":"<p>The last payment date in milliseconds since epoch.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-last-payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-next-payment-date/","title":"Get next payment date","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getNextPaymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-next-payment-date/#getnextpaymentdate","title":"getNextPaymentDate","text":"<p>[androidJvm]\\ open suspend override fun getNextPaymentDate(merchant: String): Long?</p> <p>Retrieves the next payment date for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-next-payment-date/#return","title":"Return","text":"<p>The next payment date in milliseconds since epoch, or null if not found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-next-payment-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-recurring-expenses/","title":"Get recurring expenses","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getRecurringExpenses</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-recurring-expenses/#getrecurringexpenses","title":"getRecurringExpenses","text":"<p>[androidJvm]\\ open override fun getRecurringExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;</p> <p>Retrieves all recurring expenses.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-recurring-expenses/#return","title":"Return","text":"<p>A Flow emitting a list of ExpenseEntity objects that are recurring.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-total-spending/","title":"Get total spending","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/getTotalSpending</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-total-spending/#gettotalspending","title":"getTotalSpending","text":"<p>[androidJvm]\\ open override fun getTotalSpending(startDate: Long, endDate: Long): Flow&lt;Double&gt;</p> <p>Retrieves the total spending within a specified date range.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-total-spending/#return","title":"Return","text":"<p>A Flow emitting the total spending as a Double.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/get-total-spending/#parameters","title":"Parameters","text":"<p>androidJvm</p> startDate The start date of the range (inclusive) in milliseconds since epoch. endDate The end date of the range (inclusive) in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/insert-expense/","title":"Insert expense","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/insertExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/insert-expense/#insertexpense","title":"insertExpense","text":"<p>[androidJvm]\\ open suspend override fun insertExpense(expense: ExpenseEntity): Long</p> <p>Inserts a new expense into the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/insert-expense/#return","title":"Return","text":"<p>The ID of the newly inserted expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/insert-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity object representing the expense to be inserted."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/set-cancellation/","title":"Set cancellation","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/setCancellation</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/set-cancellation/#setcancellation","title":"setCancellation","text":"<p>[androidJvm]\\ open suspend override fun setCancellation(merchant: String, toBeCancelled: Boolean)</p> <p>Sets the cancellation status for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/set-cancellation/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant. toBeCancelled The cancellation status to be set."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/set-recurring-payment/","title":"Set recurring payment","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/setRecurringPayment</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/set-recurring-payment/#setrecurringpayment","title":"setRecurringPayment","text":"<p>[androidJvm]\\ open suspend override fun setRecurringPayment(merchant: String, recurringType: String, nextRecurringDate: Long)</p> <p>Sets a recurring payment for a specific merchant.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/set-recurring-payment/#parameters","title":"Parameters","text":"<p>androidJvm</p> merchant The name of the merchant. recurringType The type of recurring payment. nextRecurringDate The next recurring date in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/update-expense/","title":"Update expense","text":"<p>//room/dev.atick.storage.room.data/ExpenseDataSourceImpl/updateExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/update-expense/#updateexpense","title":"updateExpense","text":"<p>[androidJvm]\\ open suspend override fun updateExpense(expense: ExpenseEntity)</p> <p>Updates an existing expense in the data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-data-source-impl/update-expense/#parameters","title":"Parameters","text":"<p>androidJvm</p> expense The ExpenseEntity object representing the expense to be updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/ExpenseDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/#expensedatabase","title":"ExpenseDatabase","text":"<p>[androidJvm]\\ abstract class ExpenseDatabase : RoomDatabase</p> <p>Room database for Expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/#constructors","title":"Constructors","text":"ExpenseDatabase [androidJvm]constructor()"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/#properties","title":"Properties","text":"Name Summary backingFieldMap [androidJvm]val backingFieldMap: MutableMap&lt;String, Any&gt; invalidationTracker [androidJvm]open val invalidationTracker: InvalidationTracker isOpen [androidJvm]open val isOpen: Boolean isOpenInternal [androidJvm]val isOpenInternal: Boolean openHelper [androidJvm]open val openHelper: SupportSQLiteOpenHelper queryExecutor [androidJvm]open val queryExecutor: Executor suspendingTransactionId [androidJvm]val suspendingTransactionId: ThreadLocal&lt;Int&gt; transactionExecutor [androidJvm]open val transactionExecutor: Executor"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/#functions","title":"Functions","text":"Name Summary assertNotMainThread [androidJvm]open fun assertNotMainThread() assertNotSuspendingTransaction [androidJvm]open fun assertNotSuspendingTransaction() beginTransaction [androidJvm]open fun ~~beginTransaction~~() clearAllTables [androidJvm]abstract fun clearAllTables() close [androidJvm]open fun close() compileStatement [androidJvm]open fun compileStatement(sql: String): SupportSQLiteStatement endTransaction [androidJvm]open fun ~~endTransaction~~() getAutoMigrations [androidJvm]open fun getAutoMigrations(autoMigrationSpecs: Map&lt;Class&lt;out AutoMigrationSpec&gt;, AutoMigrationSpec&gt;): List&lt;Migration&gt; getExpenseDao [androidJvm]abstract fun getExpenseDao(): ExpenseDaoGet the data access object for ExpenseEntity entity. getRequiredAutoMigrationSpecs [androidJvm]open fun getRequiredAutoMigrationSpecs(): Set&lt;Class&lt;out AutoMigrationSpec&gt;&gt; getTypeConverter [androidJvm]open fun &lt;T&gt; getTypeConverter(klass: Class&lt;T&gt;): T? init [androidJvm]open fun init(configuration: DatabaseConfiguration) inTransaction [androidJvm]open fun inTransaction(): Boolean query [androidJvm]open fun query(query: SupportSQLiteQuery, signal: CancellationSignal?): Cursoropen fun query(query: String, args: Array&lt;out Any?&gt;?): Cursor runInTransaction [androidJvm]open fun runInTransaction(body: Runnable)open fun &lt;V&gt; runInTransaction(body: Callable&lt;V&gt;): V setTransactionSuccessful [androidJvm]open fun ~~setTransactionSuccessful~~()"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/-expense-database/","title":"expense database","text":"<p>//room/dev.atick.storage.room.data/ExpenseDatabase/ExpenseDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/-expense-database/#expensedatabase","title":"ExpenseDatabase","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/get-expense-dao/","title":"Get expense dao","text":"<p>//room/dev.atick.storage.room.data/ExpenseDatabase/getExpenseDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/get-expense-dao/#getexpensedao","title":"getExpenseDao","text":"<p>[androidJvm]\\ abstract fun getExpenseDao(): ExpenseDao</p> <p>Get the data access object for ExpenseEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-expense-database/get-expense-dao/#return","title":"Return","text":"<p>The data access object for ExpenseEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/","title":"Index","text":"<p>//room/dev.atick.storage.room.di</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.di/#types","title":"Types","text":"Name Summary DaoModule [androidJvm]@Module(includes = [DatabaseModule::class])object DaoModuleDagger module for data access object. DatabaseModule [androidJvm]@Moduleobject DatabaseModuleDagger module for database. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger Hilt module responsible for providing implementations of data source interfaces."},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/","title":"Index","text":"<p>//room/dev.atick.storage.room.di/DaoModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/#daomodule","title":"DaoModule","text":"<p>[androidJvm]\\ @Module(includes = [DatabaseModule::class])</p> <p>object DaoModule</p> <p>Dagger module for data access object.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/#functions","title":"Functions","text":"Name Summary provideBudgetDao [androidJvm]@Singleton@Providesfun provideBudgetDao(budgetDatabase: BudgetDatabase): BudgetDaoGet the budget data access. provideChatDao [androidJvm]@Singleton@Providesfun provideChatDao(chatDatabase: ChatDatabase): ChatDaoGet the chat data access. provideExpenseDao [androidJvm]@Singleton@Providesfun provideExpenseDao(expenseDatabase: ExpenseDatabase): ExpenseDaoGet the expense data access."},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-budget-dao/","title":"Provide budget dao","text":"<p>//room/dev.atick.storage.room.di/DaoModule/provideBudgetDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-budget-dao/#providebudgetdao","title":"provideBudgetDao","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideBudgetDao(budgetDatabase: BudgetDatabase): BudgetDao</p> <p>Get the budget data access.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-budget-dao/#return","title":"Return","text":"<p>The budget data access object.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-budget-dao/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetDatabase The database for budgets."},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-chat-dao/","title":"Provide chat dao","text":"<p>//room/dev.atick.storage.room.di/DaoModule/provideChatDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-chat-dao/#providechatdao","title":"provideChatDao","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideChatDao(chatDatabase: ChatDatabase): ChatDao</p> <p>Get the chat data access.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-chat-dao/#return","title":"Return","text":"<p>The chat data access object.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-chat-dao/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatDatabase The database for chat messages."},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-expense-dao/","title":"Provide expense dao","text":"<p>//room/dev.atick.storage.room.di/DaoModule/provideExpenseDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-expense-dao/#provideexpensedao","title":"provideExpenseDao","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideExpenseDao(expenseDatabase: ExpenseDatabase): ExpenseDao</p> <p>Get the expense data access.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-expense-dao/#return","title":"Return","text":"<p>The expense data access object.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-expense-dao/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDatabase The database for expenses."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/","title":"Index","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger Hilt module responsible for providing implementations of data source interfaces.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindAnalysesDataSource [androidJvm]@Binds@Singletonabstract fun bindAnalysesDataSource(analysisDataSourceImpl: AnalysisDataSourceImpl): AnalysisDataSourceBinds the AnalysisDataSourceImpl implementation to the AnalysisDataSource interface. bindBudgetDataSource [androidJvm]@Binds@Singletonabstract fun bindBudgetDataSource(budgetDataSourceImpl: BudgetDataSourceImpl): BudgetDataSourceBinds the BudgetDataSourceImpl implementation to the BudgetDataSource interface. bindChatDataSource [androidJvm]@Binds@Singletonabstract fun bindChatDataSource(chatDataSourceImpl: ChatDataSourceImpl): ChatDataSourceBinds the ChatDataSourceImpl implementation to the ChatDataSource interface. bindExpenseDataSource [androidJvm]@Binds@Singletonabstract fun bindExpenseDataSource(expenseDataSourceImpl: ExpenseDataSourceImpl): ExpenseDataSourceBinds the ExpenseDataSourceImpl implementation to the ExpenseDataSource interface."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/DataSourceModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-analyses-data-source/","title":"Bind analyses data source","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/bindAnalysesDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-analyses-data-source/#bindanalysesdatasource","title":"bindAnalysesDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindAnalysesDataSource(analysisDataSourceImpl: AnalysisDataSourceImpl): AnalysisDataSource</p> <p>Binds the AnalysisDataSourceImpl implementation to the AnalysisDataSource interface.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-analyses-data-source/#return","title":"Return","text":"<p>An instance of AnalysisDataSource representing the analysis data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-analyses-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> analysisDataSourceImpl The concrete implementation of AnalysisDataSourceImpl."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-budget-data-source/","title":"Bind budget data source","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/bindBudgetDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-budget-data-source/#bindbudgetdatasource","title":"bindBudgetDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindBudgetDataSource(budgetDataSourceImpl: BudgetDataSourceImpl): BudgetDataSource</p> <p>Binds the BudgetDataSourceImpl implementation to the BudgetDataSource interface.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-budget-data-source/#return","title":"Return","text":"<p>An instance of BudgetDataSource representing the budget data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-budget-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> budgetDataSourceImpl The concrete implementation of BudgetDataSourceImpl."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-chat-data-source/","title":"Bind chat data source","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/bindChatDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-chat-data-source/#bindchatdatasource","title":"bindChatDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindChatDataSource(chatDataSourceImpl: ChatDataSourceImpl): ChatDataSource</p> <p>Binds the ChatDataSourceImpl implementation to the ChatDataSource interface.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-chat-data-source/#return","title":"Return","text":"<p>An instance of ChatDataSource representing the chat local data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-chat-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> chatDataSourceImpl The concrete implementation of ChatDataSourceImpl."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-expense-data-source/","title":"Bind expense data source","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/bindExpenseDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-expense-data-source/#bindexpensedatasource","title":"bindExpenseDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindExpenseDataSource(expenseDataSourceImpl: ExpenseDataSourceImpl): ExpenseDataSource</p> <p>Binds the ExpenseDataSourceImpl implementation to the ExpenseDataSource interface.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-expense-data-source/#return","title":"Return","text":"<p>An instance of ExpenseDataSource representing the expense data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-expense-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> expenseDataSourceImpl The concrete implementation of ExpenseDataSourceImpl."},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/","title":"Index","text":"<p>//room/dev.atick.storage.room.di/DatabaseModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/#databasemodule","title":"DatabaseModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DatabaseModule</p> <p>Dagger module for database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/#functions","title":"Functions","text":"Name Summary provideBudgetDatabase [androidJvm]@Singleton@Providesfun provideBudgetDatabase(appContext: Context): BudgetDatabaseGet the database for Budget. provideChatDatabase [androidJvm]@Singleton@Providesfun provideChatDatabase(appContext: Context): ChatDatabaseGet the database for Chat. provideExpenseDatabase [androidJvm]@Singleton@Providesfun provideExpenseDatabase(appContext: Context): ExpenseDatabaseGet the database for Expense."},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-budget-database/","title":"Provide budget database","text":"<p>//room/dev.atick.storage.room.di/DatabaseModule/provideBudgetDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-budget-database/#providebudgetdatabase","title":"provideBudgetDatabase","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideBudgetDatabase(appContext: Context): BudgetDatabase</p> <p>Get the database for Budget.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-budget-database/#return","title":"Return","text":"<p>The database for Budget.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-budget-database/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext The application context."},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-chat-database/","title":"Provide chat database","text":"<p>//room/dev.atick.storage.room.di/DatabaseModule/provideChatDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-chat-database/#providechatdatabase","title":"provideChatDatabase","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideChatDatabase(appContext: Context): ChatDatabase</p> <p>Get the database for Chat.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-chat-database/#return","title":"Return","text":"<p>The database for Chat.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-chat-database/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext The application context."},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-expense-database/","title":"Provide expense database","text":"<p>//room/dev.atick.storage.room.di/DatabaseModule/provideExpenseDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-expense-database/#provideexpensedatabase","title":"provideExpenseDatabase","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideExpenseDatabase(appContext: Context): ExpenseDatabase</p> <p>Get the database for Expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-expense-database/#return","title":"Return","text":"<p>The database for Expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-expense-database/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext The application context."},{"location":"storage/room/room/dev.atick.storage.room.models/","title":"Index","text":"<p>//room/dev.atick.storage.room.models</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.models/#types","title":"Types","text":"Name Summary BudgetEntity [androidJvm]data class BudgetEntity(val month: Long, val amount: Double, val description: String? = null)Entity representing a budget in the database. ChatEntity [androidJvm]data class ChatEntity(val id: Long = 0, val text: String, val isFromUser: Boolean = true, val timestamp: Long = System.currentTimeMillis())Entity representing a chat message in the database. CumulativeExpense [androidJvm]data class CumulativeExpense(val amount: Double, val atTime: Long)Data class representing a cumulative expense. ExpenseAnalysis [androidJvm]data class ExpenseAnalysis(val categoryOrMerchant: String, val spending: Double, val currency: String, val maxAmount: Double, val minAmount: Double, val percentage: Double? = null)Data class representing an analysis of expenses. ExpenseEntity [androidJvm]data class ExpenseEntity(val id: Long = 0, val amount: Double, val currency: String, val merchant: String, val category: String, val paymentStatus: String, val recurringType: String, val paymentDate: Long, val dueDate: Long? = null, val toBeCancelled: Boolean = false, val nextRecurringDate: Long? = null, val createdAt: Long = System.currentTimeMillis())Entity representing an expense in the database."},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/","title":"Index","text":"<p>//room/dev.atick.storage.room.models/BudgetEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/#budgetentity","title":"BudgetEntity","text":"<p>[androidJvm]\\ data class BudgetEntity(val month: Long, val amount: Double, val description: String? = null)</p> <p>Entity representing a budget in the database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/#constructors","title":"Constructors","text":"BudgetEntity [androidJvm]constructor(month: Long, amount: Double, description: String? = null)"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: DoubleThe amount allocated for the budget. description [androidJvm]val description: String? = nullAn optional description of the budget. month [androidJvm]val month: LongThe timestamp of the start of the month, used as the primary key."},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/-budget-entity/","title":"budget entity","text":"<p>//room/dev.atick.storage.room.models/BudgetEntity/BudgetEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/-budget-entity/#budgetentity","title":"BudgetEntity","text":"<p>[androidJvm]\\ constructor(month: Long, amount: Double, description: String? = null)</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/amount/","title":"Amount","text":"<p>//room/dev.atick.storage.room.models/BudgetEntity/amount</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/description/","title":"Description","text":"<p>//room/dev.atick.storage.room.models/BudgetEntity/description</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/description/#description","title":"description","text":"<p>[androidJvm]\\ val description: String? = null</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/month/","title":"Month","text":"<p>//room/dev.atick.storage.room.models/BudgetEntity/month</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-budget-entity/month/#month","title":"month","text":"<p>[androidJvm]\\ val month: Long</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/","title":"Index","text":"<p>//room/dev.atick.storage.room.models/ChatEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/#chatentity","title":"ChatEntity","text":"<p>[androidJvm]\\ data class ChatEntity(val id: Long = 0, val text: String, val isFromUser: Boolean = true, val timestamp: Long = System.currentTimeMillis())</p> <p>Entity representing a chat message in the database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/#constructors","title":"Constructors","text":"ChatEntity [androidJvm]constructor(id: Long = 0, text: String, isFromUser: Boolean = true, timestamp: Long = System.currentTimeMillis())"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: Long = 0The unique identifier for the chat message, auto-generated. isFromUser [androidJvm]val isFromUser: Boolean = trueA flag indicating whether the message is from the user. text [androidJvm]val text: StringThe content of the chat message. timestamp [androidJvm]val timestamp: LongThe timestamp of when the message was created, in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/-chat-entity/","title":"chat entity","text":"<p>//room/dev.atick.storage.room.models/ChatEntity/ChatEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/-chat-entity/#chatentity","title":"ChatEntity","text":"<p>[androidJvm]\\ constructor(id: Long = 0, text: String, isFromUser: Boolean = true, timestamp: Long = System.currentTimeMillis())</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/id/","title":"Id","text":"<p>//room/dev.atick.storage.room.models/ChatEntity/id</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Long = 0</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/is-from-user/","title":"Is from user","text":"<p>//room/dev.atick.storage.room.models/ChatEntity/isFromUser</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/is-from-user/#isfromuser","title":"isFromUser","text":"<p>[androidJvm]\\ val isFromUser: Boolean = true</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/text/","title":"Text","text":"<p>//room/dev.atick.storage.room.models/ChatEntity/text</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/text/#text","title":"text","text":"<p>[androidJvm]\\ val text: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/timestamp/","title":"Timestamp","text":"<p>//room/dev.atick.storage.room.models/ChatEntity/timestamp</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-chat-entity/timestamp/#timestamp","title":"timestamp","text":"<p>[androidJvm]\\ val timestamp: Long</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/","title":"Index","text":"<p>//room/dev.atick.storage.room.models/CumulativeExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/#cumulativeexpense","title":"CumulativeExpense","text":"<p>[androidJvm]\\ data class CumulativeExpense(val amount: Double, val atTime: Long)</p> <p>Data class representing a cumulative expense.</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/#constructors","title":"Constructors","text":"CumulativeExpense [androidJvm]constructor(amount: Double, atTime: Long)"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: DoubleThe total amount of the cumulative expense. atTime [androidJvm]val atTime: LongThe timestamp of when the cumulative expense was recorded, in milliseconds since epoch."},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/-cumulative-expense/","title":"cumulative expense","text":"<p>//room/dev.atick.storage.room.models/CumulativeExpense/CumulativeExpense</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/-cumulative-expense/#cumulativeexpense","title":"CumulativeExpense","text":"<p>[androidJvm]\\ constructor(amount: Double, atTime: Long)</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/amount/","title":"Amount","text":"<p>//room/dev.atick.storage.room.models/CumulativeExpense/amount</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/at-time/","title":"At time","text":"<p>//room/dev.atick.storage.room.models/CumulativeExpense/atTime</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-cumulative-expense/at-time/#attime","title":"atTime","text":"<p>[androidJvm]\\ val atTime: Long</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/","title":"Index","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/#expenseanalysis","title":"ExpenseAnalysis","text":"<p>[androidJvm]\\ data class ExpenseAnalysis(val categoryOrMerchant: String, val spending: Double, val currency: String, val maxAmount: Double, val minAmount: Double, val percentage: Double? = null)</p> <p>Data class representing an analysis of expenses.</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/#constructors","title":"Constructors","text":"ExpenseAnalysis [androidJvm]constructor(categoryOrMerchant: String, spending: Double, currency: String, maxAmount: Double, minAmount: Double, percentage: Double? = null)"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/#properties","title":"Properties","text":"Name Summary categoryOrMerchant [androidJvm]val categoryOrMerchant: StringThe category or merchant associated with the expenses. currency [androidJvm]val currency: StringThe currency of the spending amount. maxAmount [androidJvm]val maxAmount: DoubleThe maximum amount spent in a single transaction. minAmount [androidJvm]val minAmount: DoubleThe minimum amount spent in a single transaction. percentage [androidJvm]val percentage: Double? = nullThe optional percentage representation of the spending. spending [androidJvm]val spending: DoubleThe total spending amount."},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/-expense-analysis/","title":"expense analysis","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/ExpenseAnalysis</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/-expense-analysis/#expenseanalysis","title":"ExpenseAnalysis","text":"<p>[androidJvm]\\ constructor(categoryOrMerchant: String, spending: Double, currency: String, maxAmount: Double, minAmount: Double, percentage: Double? = null)</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/category-or-merchant/","title":"Category or merchant","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/categoryOrMerchant</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/category-or-merchant/#categoryormerchant","title":"categoryOrMerchant","text":"<p>[androidJvm]\\ val categoryOrMerchant: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/currency/","title":"Currency","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/currency</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/currency/#currency","title":"currency","text":"<p>[androidJvm]\\ val currency: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/max-amount/","title":"Max amount","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/maxAmount</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/max-amount/#maxamount","title":"maxAmount","text":"<p>[androidJvm]\\ val maxAmount: Double</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/min-amount/","title":"Min amount","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/minAmount</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/min-amount/#minamount","title":"minAmount","text":"<p>[androidJvm]\\ val minAmount: Double</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/percentage/","title":"Percentage","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/percentage</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/percentage/#percentage","title":"percentage","text":"<p>[androidJvm]\\ val percentage: Double? = null</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/spending/","title":"Spending","text":"<p>//room/dev.atick.storage.room.models/ExpenseAnalysis/spending</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-analysis/spending/#spending","title":"spending","text":"<p>[androidJvm]\\ val spending: Double</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/","title":"Index","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/#expenseentity","title":"ExpenseEntity","text":"<p>[androidJvm]\\ data class ExpenseEntity(val id: Long = 0, val amount: Double, val currency: String, val merchant: String, val category: String, val paymentStatus: String, val recurringType: String, val paymentDate: Long, val dueDate: Long? = null, val toBeCancelled: Boolean = false, val nextRecurringDate: Long? = null, val createdAt: Long = System.currentTimeMillis())</p> <p>Entity representing an expense in the database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/#constructors","title":"Constructors","text":"ExpenseEntity [androidJvm]constructor(id: Long = 0, amount: Double, currency: String, merchant: String, category: String, paymentStatus: String, recurringType: String, paymentDate: Long, dueDate: Long? = null, toBeCancelled: Boolean = false, nextRecurringDate: Long? = null, createdAt: Long = System.currentTimeMillis())"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/#properties","title":"Properties","text":"Name Summary amount [androidJvm]val amount: DoubleThe amount of the expense. category [androidJvm]val category: StringThe category of the expense. createdAt [androidJvm]val createdAt: LongThe timestamp of when the expense was created, in milliseconds since epoch. currency [androidJvm]val currency: StringThe currency of the expense amount. dueDate [androidJvm]val dueDate: Long? = nullThe optional due date of the expense in milliseconds since epoch. id [androidJvm]val id: Long = 0The unique identifier for the expense, auto-generated. merchant [androidJvm]val merchant: StringThe merchant associated with the expense. nextRecurringDate [androidJvm]val nextRecurringDate: Long? = nullThe optional next recurring date in milliseconds since epoch. paymentDate [androidJvm]val paymentDate: LongThe date of the payment in milliseconds since epoch. paymentStatus [androidJvm]val paymentStatus: StringThe payment status of the expense. recurringType [androidJvm]val recurringType: StringThe type of recurring payment for the expense. toBeCancelled [androidJvm]val toBeCancelled: Boolean = falseA flag indicating whether the expense is to be cancelled."},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/-expense-entity/","title":"expense entity","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/ExpenseEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/-expense-entity/#expenseentity","title":"ExpenseEntity","text":"<p>[androidJvm]\\ constructor(id: Long = 0, amount: Double, currency: String, merchant: String, category: String, paymentStatus: String, recurringType: String, paymentDate: Long, dueDate: Long? = null, toBeCancelled: Boolean = false, nextRecurringDate: Long? = null, createdAt: Long = System.currentTimeMillis())</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/amount/","title":"Amount","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/amount</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/amount/#amount","title":"amount","text":"<p>[androidJvm]\\ val amount: Double</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/category/","title":"Category","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/category</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/category/#category","title":"category","text":"<p>[androidJvm]\\ val category: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/created-at/","title":"Created at","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/createdAt</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/created-at/#createdat","title":"createdAt","text":"<p>[androidJvm]\\ val createdAt: Long</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/currency/","title":"Currency","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/currency</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/currency/#currency","title":"currency","text":"<p>[androidJvm]\\ val currency: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/due-date/","title":"Due date","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/dueDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/due-date/#duedate","title":"dueDate","text":"<p>[androidJvm]\\ val dueDate: Long? = null</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/id/","title":"Id","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/id</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Long = 0</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/merchant/","title":"Merchant","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/merchant</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/merchant/#merchant","title":"merchant","text":"<p>[androidJvm]\\ val merchant: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/next-recurring-date/","title":"Next recurring date","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/nextRecurringDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/next-recurring-date/#nextrecurringdate","title":"nextRecurringDate","text":"<p>[androidJvm]\\ val nextRecurringDate: Long? = null</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/payment-date/","title":"Payment date","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/paymentDate</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/payment-date/#paymentdate","title":"paymentDate","text":"<p>[androidJvm]\\ val paymentDate: Long</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/payment-status/","title":"Payment status","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/paymentStatus</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/payment-status/#paymentstatus","title":"paymentStatus","text":"<p>[androidJvm]\\ val paymentStatus: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/recurring-type/","title":"Recurring type","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/recurringType</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/recurring-type/#recurringtype","title":"recurringType","text":"<p>[androidJvm]\\ val recurringType: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/to-be-cancelled/","title":"To be cancelled","text":"<p>//room/dev.atick.storage.room.models/ExpenseEntity/toBeCancelled</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-expense-entity/to-be-cancelled/#tobecancelled","title":"toBeCancelled","text":"<p>[androidJvm]\\ val toBeCancelled: Boolean = false</p>"}]}